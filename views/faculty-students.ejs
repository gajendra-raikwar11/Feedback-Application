<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Faculty Dashboard - Student Management</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <!-- DataTables CSS -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/css/dataTables.bootstrap5.min.css"
    />
    <!-- Toastify CSS -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css"
    />
    <!-- Custom CSS -->
    <style>
      :root {
        --primary-color: #3f51b5;
        --secondary-color: #f5f5f5;
        --accent-color: #ff4081;
        --text-color: #333;
        --light-gray: #eee;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
      }

      .sidebar {
        background-color: var(--primary-color);
        color: white;
        height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        transition: all 0.3s;
        z-index: 1000;
      }

      .content {
        margin-left: 250px;
        padding: 20px;
        transition: all 0.3s;
      }

      @media (max-width: 768px) {
        .toggle-btn {
          display: block;
        }

        .sidebar {
          margin-left: -250px;
          z-index: 1100;
          box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        }

        .sidebar.active {
          margin-left: 0;
        }

        .content {
          margin-left: 0;
          transition: all 0.3s;
        }

        .content.active::before {
          content: "";
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(0, 0, 0, 0.4);
          backdrop-filter: blur(3px);
          -webkit-backdrop-filter: blur(3px);
          z-index: 1050;
          transition: all 0.3s ease;
        }
      }

      .logo {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .nav-item {
        padding: 10px 20px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .nav-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }

      .nav-item.active {
        background-color: rgba(255, 255, 255, 0.2);
        border-left: 4px solid var(--accent-color);
      }

      .card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        border: none;
      }

      .card-header {
        background-color: white;
        border-bottom: 1px solid var(--light-gray);
        font-weight: 600;
        border-radius: 10px 10px 0 0 !important;
      }

      .toggle-btn {
        display: none;
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 1001;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      }

      .filter-section {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      }

      .badge-forms {
        font-size: 85%;
        padding: 5px 8px;
        border-radius: 20px;
      }

      .progress {
        height: 8px;
        border-radius: 4px;
      }

      .student-status {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 6px;
      }

      .status-active {
        background-color: #4caf50;
      }

      .status-inactive {
        background-color: #f44336;
      }

      .form-select,
      .form-control {
        box-shadow: none !important;
        border-color: #ddd;
      }

      .form-select:focus,
      .form-control:focus {
        border-color: var(--primary-color);
      }

      .stats-card {
        border-left: 4px solid;
        transition: transform 0.2s;
      }

      .stats-card:hover {
        transform: translateY(-5px);
      }

      .dt-button {
        background-color: var(--primary-color) !important;
        color: white !important;
        border: none !important;
        border-radius: 4px !important;
        padding: 6px 14px !important;
        margin-right: 8px !important;
      }

      .dt-button:hover {
        background-color: #303f9f !important;
      }

      @media (max-width: 768px) {
        .toggle-btn {
          display: block;
        }
      }

      .sidebar-close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: transparent;
        border: none;
        font-size: 24px;
        cursor: pointer;
        padding: 5px 10px;
        color: white;
      }

      @media (min-width: 768px) {
        .sidebar-close-btn {
          display: none;
        }
      }

      .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
      }
      @media (max-width: 576px) {
        .mobile-left-shift {
          margin-left: 40px;
        }
      }

      /* Hide DataTable elements we don't want */
      .dataTables_length,
      .dataTables_info {
        display: none !important;
      }

      /* Style for quick search in filter section */
      #quickSearch {
        width: 100%;
      }

      .dataTables_filter {
        width: 100%;
      }

      .dataTables_filter input {
        width: 100%;
        margin-left: 0 !important;
      }

      /* Added styles for scrollable table */
      .table-scroll-container {
        max-height: 500px;
        overflow-y: auto;
      }

      /* Hide pagination */
      .dataTables_paginate {
        display: none !important;
      }

      /* Improved search styling */
      #Search {
        padding-left: 30px;
      }

      .search-icon {
        position: absolute;
        left: 25px;
        top: 40px;
        color: #777;
      }

      #studentDialog::-webkit-scrollbar {
  display: none; /* Chrome, Safari */
}

      .student-dialog {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 1000px;
    height: 1000px;
    background-color: #3f51b5;
    z-index: 2000;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    overflow: auto;
  }
  
  /* Make sure the dialog is responsive */
  @media (max-width: 1100px) {
    .student-dialog {
      width: 90%;
      height: 90%;
    }
  }
    </style>
    <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  </head>

  <body>
    <!-- Mobile Toggle Button -->
    <button class="toggle-btn mb-2" id="sidebarToggle">
      <i class="fas fa-bars"></i>
    </button>

    <!-- Sidebar -->
    <%- include('partials/facultySideNavbar', {activePage: 'students'}) %>

    <!-- Main Content -->
    <div class="content" id="content">
      <div class="container-fluid">
        <div class="row mb-4">
          <div class="col-md-12 mobile-left-shift">
            <h2 class="mb-0">Student Management</h2>
            <small class="text-muted"
              >View and manage assigned students & their form submissions</small
            >
          </div>
        </div>

        <!-- Stats Cards Row -->
        <div class="row mb-4">
          <div class="col-md-3">
            <div class="card stats-card" style="border-left-color: #3f51b5">
              <div class="card-body">
                <h6 class="card-title text-muted mb-0">Total Students</h6>
                <h3 class="mt-2 mb-0">
                  <% let StudentCount = 0; studentsDetails.forEach(student => {
                  if(String(facultyDetails.sections).includes(student.section))
                  { StudentCount++; } }); %> <%= StudentCount %>
                </h3>
                <small class="text-success">Across <%=facultyDetails.sections.length %> Sections</small>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card stats-card" style="border-left-color: #f44336">
              <div class="card-body">
                <h6 class="card-title text-muted mb-0">
                  Total Forms
                </h6>
                <h3 class="mt-2 mb-0">
                   <% let assignedFormsCount = 0; forms.forEach((form) => {
                assignedFormsCount++; }); %> <%= assignedFormsCount %>
                </h3>
                <small class="text-danger">Need attention</small>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card stats-card" style="border-left-color: #4caf50">
              <div class="card-body">
                <h6 class="card-title text-muted mb-0">Forms Submitted</h6>
                <h3 class="mt-2 mb-0">
                  <% let  SubmittedFormCount = 0; %>
                  <% feedbackData.forEach((feedback) => { %>
                    <% if ( facultyDetails._id.toString() === feedback.facultyID.toString() ) { %>
                      <% SubmittedFormCount++; %>
                    <% } %>
                  <% }); %>
                  <%= SubmittedFormCount %>
                </h3>
                <small class="text-success">+12 new today</small>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card stats-card" style="border-left-color: #ff9800">
              <div class="card-body">
                <h6 class="card-title text-muted mb-0">Pending Forms</h6>
                <h3 class="mt-2 mb-0">
                 <%= assignedFormsCount - SubmittedFormCount %>
                </h3>
                <small class="text-warning">Due within 7 days</small>
              </div>
            </div>
          </div>
        </div>

        <!-- Filter Section -->
        <div class="filter-section mb-4 card-body">
          <div class="row align-items-end">
              <div class="col-md-2 mb-3 mb-md-0">
                <label for="semesterFilter" class="form-label">Semester</label>
                <select class="form-select" id="semesterFilter">
                  <option value="all">All Semesters</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                  <option value="6">6</option>
                  <option value="7">7</option>
                  <option value="8">8</option>
                </select>
              </div>
            <div class="col-md-2 mb-3 mb-md-0">
              <label for="sectionFilter" class="form-label">Section</label>
              <select class="form-select" id="sectionFilter">
                <option value="all">All Sections</option>
                <% if (facultyDetails && facultyDetails.sections && facultyDetails.sections.length) { %>
                  <% facultyDetails.sections.forEach(function(sec) { %>
                    <option value="<%= sec %>"><%= sec %></option>
                  <% }); %>
                <% } else { %>
                  <option disabled>No Section available</option>
                <% } %>

              </select>
            </div>
            <div class="col-md-2 mb-3 mb-md-0">
              <label for="typeFilter" class="form-label">Type</label>
              <select class="form-select" id="typeFilter">
                <option value="all">All Types</option>
                <option value="institutional">Institutional</option>
                <option value="academic">Academic</option>
                <option value="training">Training</option>
              </select>
            </div>
            <div class="col-md-2 mb-3 mb-md-0">
              <label for="submissionFilter" class="form-label"
                >Form Submission</label
              >
              <select class="form-select" id="submissionFilter">
                <option value="all">All Statuses</option>
                <option value="submitted">Submitted</option>
                <option value="pending">Pending</option>
              </select>
            </div>
            <div class="col-md-4 d-flex align-items-end">
              <button id="applyFilters" class="btn btn-primary me-2 w-100">
                <i class="fas fa-filter me-2"></i>Apply Filters
              </button>
              <button
                id="resetFilters"
                class="btn btn-outline-secondary w-auto"
              >
                <i class="fas fa-redo"></i>
              </button>
            </div>
          </div>
          <div class="row mt-3">
            <div class="col-12">
              <label for="Search" class="form-label">Search Student</label>
              <input
                type="text"
                class="form-control"
                id="Search"
                placeholder="Search by name or ID"
              />
            </div>
          </div>
        </div>

        <!-- Student Data Table -->
        <div class="card">
          <div
            class="card-header d-flex justify-content-between align-items-center"
          >
            <span>Student Records</span>
            <div>
              <button id="exportExcel" class="btn btn-success btn-sm">
                <i class="fas fa-file-excel me-2"></i>Export to Excel
              </button>
            </div>
          </div>
          <div class="card-body">
            <div class="table-scroll-container">
              <table id="studentTable" class="table table-hover">
                <thead>
                  <tr>
                    <th>Student ID</th>
                    <th>Name</th>
                    <th>semester</th>
                    <th>Section</th>
                    <th>Institutional</th>
                    <th>Academic</th>
                    <th>Training</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Table data will be populated by JavaScript -->
                  <% studentsDetails.forEach(student => { %> <%
                  if(String(facultyDetails.sections).includes(student.section))
                  { %>
                  <tr id="studentStatus">
                    <td><%= student.enrollmentNumber %></td>
                    <td><%= student.name %></td>
                    <td><%= student.semester %></td>
                    <td><%= student.section %></td>
                    <td> 
                            <% var institute = 0; %>
                            <% feedbackData.forEach((feedback) => { %>
                                <% if ( facultyDetails._id.toString() === feedback.facultyID.toString() &&
                                            student._id.toString() === feedback.studentID.toString() &&
                                            feedback.formType === 'Institutional' ) { %>
                                            <% institute++; %>
                                 <% } %>
                             <% }); %>
                             <%= institute %> /
                             <% let filteredInstituteForm = 0; 
                             forms.forEach((form) => { 
                             if ( form.formType === 'Institutional' &&
                                  form.status === 'active' &&
                                  Array.isArray(form.sectionsAssigned) &&
                                  form.sectionsAssigned.includes(student.section) &&
                                 Array.isArray(form.semesters) &&
                                 form.semesters.includes(student.semester)) { 
                                     filteredInstituteForm++; }});%>
                             <%= filteredInstituteForm %>                          
                      </td>
                      <td>
                              <% var academic = 0; %>
                              <% feedbackData.forEach((feedback) => { %>
                              <% if ( facultyDetails._id.toString() === feedback.facultyID.toString() &&
                                          student._id.toString() === feedback.studentID.toString() &&
                                          feedback.formType === 'Academic' ) { %>
                                            <% academic++; %>
                              <% } %>
                              <% }); %>
                              <%= academic %> /
                              <% let filteredAcademicForm = 0; 
                                     forms.forEach((form) => { 
                                     if ( form.formType === 'Academic' &&
                                          form.status === 'active' &&
                                                    Array.isArray(form.sectionsAssigned) &&
                                                    form.sectionsAssigned.includes(student.section) &&
                                                    Array.isArray(form.semesters) &&
                                                    form.semesters.includes(student.semester)
                                                ) { 
                                                    filteredAcademicForm++; 
                                                } 
                                            }); 
                                        %>
                                        <%= filteredAcademicForm %>
                                    </td>
                        <td>
                        <% var training = 0; %>
                        <% feedbackData.forEach((feedback) => { %>
                            <% if (
                                facultyDetails._id.toString() === feedback.facultyID.toString() &&
                                student._id.toString() === feedback.studentID.toString() &&
                                feedback.formType === 'Training'
                            ) { %>
                                <% training++; %>
                            <% } %>
                        <% }); %>
                        <%= training %> /
                        <% 
                            let filteredTrainingForm = 0; 
                            forms.forEach((form) => { 
                                if (
                                    form.formType === 'Training' &&
                                    form.status === 'active' &&
                                    Array.isArray(form.sectionsAssigned) &&
                                    form.sectionsAssigned.includes(student.section) &&
                                    Array.isArray(form.semesters) &&
                                    form.semesters.includes(student.semester)
                                ) { 
                                    filteredTrainingForm++; 
                                } 
                            }); 
                        %>
                        <%= filteredTrainingForm %>
                        </td>
                  </tr>
                  <% } %> <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="overlay ease-in duration-3000" style="display: none; background-color: rgba(255, 255, 255, 0.2); widht: 100vh; height: 100vh; backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(5px); padding: 100vh;
            border-radius: 10px; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 2000; pointer-events: none !important; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
        </div>
        <div id="studentDialog"
            class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-[1000px] h-[90%] max-h-[800px] bg-indigo-600 z-[3000] rounded-lg shadow-2xl overflow-auto">
        </div>
      </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container"></div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>

    <script>// DOM Elements and Variables
const sidebarToggle = document.getElementById("sidebarToggle");
const sidebar = document.getElementById("sidebar");
const content = document.getElementById("content");
const semesterFilter = document.getElementById("semesterFilter");
const sectionFilter = document.getElementById("sectionFilter");
const typeFilter = document.getElementById("typeFilter");
const submissionFilter = document.getElementById("submissionFilter");
const applyFiltersBtn = document.getElementById("applyFilters");
const resetFiltersBtn = document.getElementById("resetFilters");
const exportExcelBtn = document.getElementById("exportExcel");
const searchInput = document.getElementById("Search");
const studentStatus = document.querySelectorAll("#studentTable studentStatus");
const studentDialog = document.getElementById("studentDialog")
const overlay = document.querySelector(".overlay")

let dataTable;
let sampleStudents = []; // Will be populated from table data
let filteredStudents = [];

// Initialize the page
document.addEventListener("DOMContentLoaded", function () {
  // Initialize DataTable with pagination disabled
  dataTable = $("#studentTable").DataTable({
    responsive: true,
    lengthChange: false, // Hide "Show entries" dropdown
    info: false, // Hide "Showing 1 to 10 of 15 entries" text
    order: [[0, "asc"]], // Sort by Student ID by default
    language: {
      search: "",
      emptyTable: "No student records found",
      zeroRecords: "No results found for your filter criteria",
    },
    dom: "t", // Only show table (remove pagination 'p')
    paging: false, // Explicitly disable pagination
  });

  // Extract student data from the rendered table
  extractStudentData();

  // Setup event listeners
  setupEventListeners();

  // Initialize tooltips
  initTooltips();
});

// Extract student data from the table
function extractStudentData() {
  sampleStudents = [];

  $("#studentTable tbody tr").each(function () {
    const $row = $(this);
    const studentId = $row.find("td:eq(0)").text().trim();
    const name = $row.find("td:eq(1)").text().trim();
    const semester = parseInt($row.find("td:eq(2)").text().trim()) || 0;
    const section = $row.find("td:eq(3)").text().trim();

    // Parse institutional forms
    const institutionalText = $row.find("td:eq(4)").text().trim();
    const institutionalParts = institutionalText.split("/");
    const institutionalSubmitted =
      parseInt(institutionalParts[0].trim()) || 0;
    const institutionalTotal =
      parseInt(institutionalParts[1].trim()) || 0;

    // Parse academic forms
    const academicText = $row.find("td:eq(5)").text().trim();
    const academicParts = academicText.split("/");
    const academicSubmitted = parseInt(academicParts[0].trim()) || 0;
    const academicTotal = parseInt(academicParts[1].trim()) || 0;

    // Parse training forms
    const trainingText = $row.find("td:eq(6)").text().trim();
    const trainingParts = trainingText.split("/");
    const trainingSubmitted = parseInt(trainingParts[0].trim()) || 0;
    const trainingTotal = parseInt(trainingParts[1].trim()) || 0;

    // Calculate aggregate values
    const formsSubmitted =
      institutionalSubmitted + academicSubmitted + trainingSubmitted;
    const formsAssigned =
      institutionalTotal + academicTotal + trainingTotal;
    const formsPending = formsAssigned - formsSubmitted;

    // Assume any pending forms that are more than 7 days old are overdue (for demo purposes)
    const formsOverdue = Math.floor(formsPending * 0.3); // Estimate 30% of pending forms are overdue

    // Create student object
    const student = {
      id: studentId,
      name: name,
      section: section,
      semester: semester,
      institutionalSubmitted: institutionalSubmitted,
      institutionalTotal: institutionalTotal,
      academicSubmitted: academicSubmitted,
      academicTotal: academicTotal,
      trainingSubmitted: trainingSubmitted,
      trainingTotal: trainingTotal,
      formsSubmitted: formsSubmitted,
      formsAssigned: formsAssigned,
      formsPending: formsPending,
      formsOverdue: formsOverdue,
      attendance: Math.floor(Math.random() * 30) + 70, // Random attendance between 70-100%
      status: "active",
    };

    sampleStudents.push(student);
  });

  // Initialize filteredStudents with all students
  filteredStudents = [...sampleStudents];
}

// Set up event listeners
function setupEventListeners() {
  // Sidebar toggle
  sidebarToggle.addEventListener("click", () => {
    sidebar.classList.toggle("active");
    content.classList.toggle("active");

    const isExpanded = sidebar.classList.contains("active");
    sidebarToggle.setAttribute("aria-expanded", isExpanded);

    if (isExpanded) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
  });

  // Close sidebar when clicking on the blur overlay
  content.addEventListener("click", (e) => {
    if (content.classList.contains("active") && e.target === content) {
      sidebar.classList.remove("active");
      content.classList.remove("active");
      document.body.style.overflow = "";
      sidebarToggle.setAttribute("aria-expanded", "false");
    }
  });

  // Close sidebar with close button
  if (document.querySelector(".sidebar-close-btn")) {
    document
      .querySelector(".sidebar-close-btn")
      .addEventListener("click", () => {
        sidebar.classList.remove("active");
        content.classList.remove("active");
        document.body.style.overflow = "";
        sidebarToggle.setAttribute("aria-expanded", "false");
      });
  }

  // Apply filters button
  applyFiltersBtn.addEventListener("click", function () {
    applyFilters();
  });

  // Reset filters button
  resetFiltersBtn.addEventListener("click", function () {
    semesterFilter.value = "all";
    sectionFilter.value = "all";
    typeFilter.value = "all";
    submissionFilter.value = "all";
    searchInput.value = ""; // Clear the search input field
    dataTable.search("").draw(); // Clear any DataTable search

    applyFilters();
  });

  // Export to Excel button
  exportExcelBtn.addEventListener("click", function () {
    exportToExcel();
  });

  // Search input for live filtering
  searchInput.addEventListener("keyup", function () {
    dataTable.search(this.value).draw();
    updateFilteredStudents();
  });

  // View student details (delegation pattern)
  $("#studentTable").on("click", ".view-details", function () {
    const studentId = $(this).data("id");
    const student = sampleStudents.find((s) => s.id === studentId);
    if (student) {
      showToast(`Viewing details for ${student.name}`, "info");
      // In a real app, this would open a modal with student details
      console.log("View details for student:", student);
    }
  });

  // Bulk email button
  $(document).on("click", "#bulkEmail", function () {
    if (filteredStudents.length === 0) {
      showToast("No students selected for bulk email", "error");
    } else {
      showToast(
        `Preparing to send email to ${filteredStudents.length} students`,
        "info"
      );
      // In a real app, this would open a bulk email compose interface
    }
  });

  // Quick summary button
  $(document).on("click", "#quickSummary", function () {
    const totalStudents = filteredStudents.length;
    const totalSubmitted = filteredStudents.reduce(
      (sum, student) => sum + student.formsSubmitted,
      0
    );
    const totalAssigned = filteredStudents.reduce(
      (sum, student) => sum + student.formsAssigned,
      0
    );
    const submissionRate =
      totalAssigned > 0
        ? ((totalSubmitted / totalAssigned) * 100).toFixed(1)
        : 0;

    showToast(
      `Summary: ${totalStudents} students with ${submissionRate}% form submission rate`,
      "info"
    );
    // In a real app, this would open a summary modal with charts
  });
}

// Apply filters to the data table
function applyFilters() {
  const semester = semesterFilter.value;
  const section = sectionFilter.value;
  const type = typeFilter.value;
  const submission = submissionFilter.value;
  const searchTerm = searchInput.value;

  // Clear any previous DataTable search filters
  dataTable.search("").columns().search("").draw();

  // Apply search term if provided
  if (searchTerm) {
    dataTable.search(searchTerm).draw();
  }

  // Apply section filter if not "all"
  if (section !== "all") {
    dataTable.column(3).search(section).draw(); // Updated index to 3 for section column
  }

  // For semester, type, and submission status, we need custom filtering
  // Remove any existing custom filters
  $.fn.dataTable.ext.search.pop();

  // Add our custom filter
  $.fn.dataTable.ext.search.push(function (settings, searchData, index) {
    const rowId = searchData[0]; // Student ID is in the first column
    const student = sampleStudents.find((s) => s.id === rowId);

    if (!student) return true; // If student not found, include the row

    // Filter by semester
    if (semester !== "all" && student.semester !== parseInt(semester)) {
      return false;
    }

    // Filter by form type - FIXED LOGIC HERE
    if (type !== "all") {
      if (type === "institutional" && student.institutionalSubmitted >= student.institutionalTotal) {
        // Filter out students who have completed all institutional forms
        return false;
      } else if (type === "academic" && student.academicSubmitted >= student.academicTotal) {
        // Filter out students who have completed all academic forms
        return false;
      } else if (type === "training" && student.trainingSubmitted >= student.trainingTotal) {
        // Filter out students who have completed all training forms
        return false;
      } else if (type === "institutional" && student.institutionalTotal === 0) {
        // Filter out students who don't have any institutional forms assigned
        return false;
      } else if (type === "academic" && student.academicTotal === 0) {
        // Filter out students who don't have any academic forms assigned
        return false;
      } else if (type === "training" && student.trainingTotal === 0) {
        // Filter out students who don't have any training forms assigned
        return false;
      }
    }

    // Filter by submission status
    if (submission !== "all") {
      if (submission === "submitted" && student.formsSubmitted !== student.formsAssigned) {
        // Show only students who have submitted all forms
        return false;
      } else if (submission === "pending" && student.formsPending === 0) {
        // Show only students who have pending forms
        return false;
      } else if (submission === "overdue" && student.formsOverdue === 0) {
        // Show only students who have overdue forms
        return false;
      }
    }

    return true;
  });

  // Redraw the table with the filter applied
  dataTable.draw();

  // Remove the filter after drawing
  $.fn.dataTable.ext.search.pop();

  // Update the filteredStudents array
  updateFilteredStudents();
}

// Update the filteredStudents array based on visible table rows
function updateFilteredStudents() {
  filteredStudents = [];

  dataTable.rows({ search: "applied" }).every(function (rowIdx) {
    const data = this.data();
    const studentId = data[0]; // Assuming ID is the first column
    const student = sampleStudents.find((s) => s.id === studentId);
    if (student) {
      filteredStudents.push(student);
    }
  });
}

// Export table data to Excel
function exportToExcel() {
  // Get the visible/filtered data
  const exportData = [];

  dataTable.rows({ search: "applied" }).every(function (rowIdx) {
    const data = this.data();
    const student = sampleStudents.find((s) => s.id === data[0]);

    if (student) {
      exportData.push({
        "Student ID": student.id,
        "Name": student.name,
        "Semester": student.semester,
        "Section": student.section,
        "Institutional Forms": `${student.institutionalSubmitted}/${student.institutionalTotal}`,
        "Academic Forms": `${student.academicSubmitted}/${student.academicTotal}`,
        "Training Forms": `${student.trainingSubmitted}/${student.trainingTotal}`,
        "Total Submitted": student.formsSubmitted,
        "Total Assigned": student.formsAssigned,
        "Completion Rate": `${((student.formsSubmitted / student.formsAssigned) * 100).toFixed(1)}%`,
      });
    }
  });

  // Create worksheet
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Create workbook
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Students");

  // Set column widths
  const wscols = [
    { wch: 12 }, // Student ID width
    { wch: 20 }, // Name width
    { wch: 10 }, // Semester width
    { wch: 10 }, // Section width
    { wch: 15 }, // Institutional Forms width
    { wch: 15 }, // Academic Forms width
    { wch: 15 }, // Training Forms width
    { wch: 15 }, // Total Submitted width
    { wch: 15 }, // Total Assigned width
    { wch: 15 }, // Completion Rate width
  ];
  ws["!cols"] = wscols;

  // Export to file
  const currentDate = new Date().toISOString().slice(0, 10);
  const fileName = `student-data-${currentDate}.xlsx`;
  XLSX.writeFile(wb, fileName);

  showToast("Data exported successfully", "success");
}

// Show toast messages
function showToast(message, type = "info") {
  const bgColors = {
    success: "#4CAF50",
    info: "#2196F3",
    warning: "#FF9800",
    error: "#F44336",
  };

  Toastify({
    text: message,
    duration: 3000,
    close: true,
    gravity: "top",
    position: "right",
    backgroundColor: bgColors[type],
    stopOnFocus: true,
  }).showToast();
}

// Helper function to calculate form submission status
function getFormSubmissionStatus(student) {
  if (student.formsOverdue > 0) return "overdue";
  if (student.formsPending > 0) return "pending";
  if (student.formsSubmitted === student.formsAssigned) return "complete";
  return "in-progress";
}

// Handle window resize to update sidebar
window.addEventListener("resize", function () {
  if (window.innerWidth > 768) {
    sidebar.classList.remove("active");
    content.classList.remove("active");
    document.body.style.overflow = "";
    sidebarToggle.setAttribute("aria-expanded", "false");
  }
});

// Confirm action modal function (for actions like delete)
function confirmAction(title, message, confirmCallback) {
  // In a real application, this would create a confirmation modal
  if (confirm(message)) {
    confirmCallback();
  }
}

// Add student functionality (placeholder for a real implementation)
function addNewStudent() {
  // This would typically open a modal form to add a new student
  showToast("Add student functionality would open a form here", "info");
}

// Batch update functionality (placeholder for a real implementation)
function batchUpdate() {
  // This would typically allow updating multiple students at once
  showToast("Batch update functionality would open here", "info");
}

// Function to handle student status toggle
function toggleStudentStatus(studentId, currentStatus) {
  const newStatus = currentStatus === "active" ? "inactive" : "active";
  const student = sampleStudents.find((s) => s.id === studentId);

  if (student) {
    student.status = newStatus;
    dataTable.clear().rows.add(sampleStudents).draw();
    showToast(
      `${student.name}'s status changed to ${newStatus}`,
      "success"
    );
  }
}

// Function to load form templates (placeholder)
function loadFormTemplates() {
  // This would load form templates from the server
  const templates = [
    { id: 1, name: "Weekly Progress Report" },
    { id: 2, name: "Course Feedback Form" },
    { id: 3, name: "Project Submission Form" },
    { id: 4, name: "Absence Justification Form" },
  ];
  return templates;
}

// Function to show student form history (placeholder)
function showStudentFormHistory(studentId) {
  const student = sampleStudents.find((s) => s.id === studentId);
  if (student) {
    showToast(`Viewing form history for ${student.name}`, "info");
    // In a real app, this would fetch and display the form history
  }
}

// Initialize tooltips
function initTooltips() {
  const tooltipTriggerList = [].slice.call(
    document.querySelectorAll('[data-bs-toggle="tooltip"]')
  );
  tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
}

// Call initTooltips after DOM is fully loaded
document.addEventListener("DOMContentLoaded", function () {
  initTooltips();
});

$("#studentTable tbody").on("click", "tr", function() {
  overlay.style.display = "block";
  overlay.style.padding = "100vh";
  const $row = $(this);
  const studentId = $row.find("td:eq(0)").text().trim();
  const student = sampleStudents.find(s => s.id === studentId);
  
  if (student) {
    showStudentDialog(student);
  }
});

// Add function to show student dialog
function showStudentDialog(student) {
  // Create dialog content
  const dialogContent = `
  <div class="p-3 text-white">
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
      <h3 class="text-2xl">Student Details</h3>
      <button class="btn-close btn-close-white" id="closeDialog" aria-label="Close"></button>
    </div>

    <div class="row g-3 mb-3">
      <!-- Personal Info -->
      <div class="col-12 col-md-6">
        <div class="card bg-white text-dark p-3 h-100">
          <h5 class="card-title">Personal Information</h5>
          <table class="table table-borderless mb-0">
            <tbody>
              <tr><th>Student ID:</th><td>${student.id}</td></tr>
              <tr><th>Name:</th><td>${student.name}</td></tr>
              <tr><th>Section:</th><td>${student.section}</td></tr>
              <tr><th>Semester:</th><td>${student.semester}</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Form Summary -->
      <div class="col-12 col-md-6">
        <div class="card bg-white text-dark p-3 h-100">
          <h5 class="card-title">Form Submission Summary</h5>
          <div class="table-responsive">
            <table class="table table-sm align-middle text-nowrap">
              <thead class="table-light">
                <tr>
                  <th>Form Type</th>
                  <th>Submitted</th>
                  <th>Total</th>
                  <th>Completion</th>
                </tr>
              </thead>
              <tbody>
                ${['institutional', 'academic', 'training'].map(type => `
                  <tr>
                    <td>${capitalize(type)}</td>
                    <td>${student[type + 'Submitted']}</td>
                    <td>${student[type + 'Total']}</td>
                    <td>
                      <div class="progress" style="height: 8px;">
                        <div class="progress-bar bg-success" role="progressbar" style="width: ${Math.round((student[type + 'Submitted'] / student[type + 'Total']) * 100) || 0}%"></div>
                      </div>
                    </td>
                  </tr>`).join('')}
                <tr class="table-active">
                  <th>Overall</th>
                  <td>${student.formsSubmitted}</td>
                  <td>${student.formsAssigned}</td>
                  <td>
                    <div class="progress" style="height: 8px;">
                      <div class="progress-bar bg-primary" role="progressbar" style="width: ${Math.round((student.formsSubmitted / student.formsAssigned) * 100) || 0}%"></div>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Pending Forms -->
    <div class="row">
      <div class="col-12">
        <div class="card bg-white card-body text-dark p-3" style="min-height: 250px;">
          <h5 class="card-title">Pending Forms</h5>
          <div class="table-responsive">
            <table class="table table-hover table-sm text-nowrap">
              <thead class="table-light">
                <tr>
                  <th>Form Title</th>
                  <th>Type</th>
                  <th>Due Date</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                ${generateMockPendingForms(student)}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
`;

// Helper function to capitalize first letter
function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}
  
  // Get the dialog element
  const $dialog = $("#studentDialog");
  
  // Update dialog content and show it
  $dialog.html(dialogContent).fadeIn(300);
  
  // Add event listener to close button
  $("#closeDialog").on("click", function() {
    overlay.style.padding = "0px";
    overlay.style.display = "none";
    $dialog.fadeOut(300);
  });
  
  // Close dialog if clicked outside
  $(document).on("mousedown", function(e) {
    if (!$(e.target).closest("#studentDialog").length && !$(e.target).closest("#studentTable tbody tr").length) {
      overlay.style.display = "none";
      $dialog.fadeOut(300);
    }
  });
  
  // Handle reminder button click
  $("#sendReminder").on("click", function() {
    showToast(`Reminder sent to ${student.name}`, "success");
  });
}

// Helper function to generate mock pending forms for the dialog
function generateMockPendingForms(student) {
  // Create a mock list of forms based on the student's data
  const mockForms = [];
  
  // Calculate how many of each type are pending
  const institutionalPending = student.institutionalTotal - student.institutionalSubmitted;
  const academicPending = student.academicTotal - student.academicSubmitted;
  const trainingPending = student.trainingTotal - student.trainingSubmitted;
  
  // Generate institutional forms
  for (let i = 0; i < institutionalPending; i++) {
    mockForms.push({
      title: `Institutional Feedback Form ${i+1}`,
      type: "Institutional",
      dueDate: getRandomFutureDate(),
      status: "Pending"
    });
  }
  
  // Generate academic forms
  for (let i = 0; i < academicPending; i++) {
    mockForms.push({
      title: `Course Feedback ${i+1}`,
      type: "Academic",
      dueDate: getRandomFutureDate(),
      status: "Pending"
    });
  }
  
  // Generate training forms
  for (let i = 0; i < trainingPending; i++) {
    mockForms.push({
      title: `Training Assessment ${i+1}`,
      type: "Training",
      dueDate: getRandomFutureDate(),
      status:  "Pending",
    });
  }
  
  // If no forms are pending, show a message
  if (mockForms.length === 0) {
    return `<tr><td colspan="5" class="text-center">No pending forms found</td></tr>`;
  }
  
  // Generate the HTML for the forms
  return mockForms.map(form => `
    <tr>
      <td>${form.title}</td>
      <td><span class="badge bg-${form.type === 'Institutional' ? 'success' : form.type === 'Academic' ? 'info' : 'warning'}">${form.type}</span></td>
      <td>${form.dueDate}</td>
      <td><span class="badge bg-${form.status === 'Pending' ? 'secondary' : 'danger'}">${form.status}</span></td>
    </tr>
  `).join('');
}

// Helper function to generate random future dates
function getRandomFutureDate() {
  const today = new Date();
  const futureDate = new Date();
  futureDate.setDate(today.getDate() + Math.floor(Math.random() * 14) + 1); // Random date within the next 14 days
  
  const options = { month: 'short', day: 'numeric' };
  return futureDate.toLocaleDateString('en-US', options);
}</script>
  </body>
</html>