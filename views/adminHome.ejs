<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/public/css/admin-css.css">
    <link rel="stylesheet" href="/public/scripts/admin-js.js">
    <link rel="shortcut icon" href="/images/android-chrome-192x192.png" type="image/x-icon">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.2/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #1cc88a;
            --third-color:rgb(88, 161, 88);
            --dark-color: #5a5c69;
            --light-color: #f8f9fc;
        }
        
        body {
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f8f9fc;
        }
        
        #wrapper {
            display: flex;
        }
        
        #content-wrapper {
            background-color: #f8f9fc;
            width: 100%;
            overflow-x: hidden;
            margin-left: 230px;
            transition: all 0.3s;
        }
        
        .navbar {
            background-color: #fff;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            position: relative;
            z-index: 1;
        }
        
        .card {
            border: none;
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            margin-bottom: 1.5rem;
        }
        
        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
            padding: 0.75rem 1.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-header h6 {
            font-weight: 700;
            margin-bottom: 0;
            color: var(--primary-color);
        }
        
        .dashboard-card {
            background-color: #fff;
            border-left: 0.25rem solid var(--primary-color);
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            margin-bottom: 1.5rem;
            padding: 1rem;
            position: relative;
            transition: transform 0.3s;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
        }
        
        .dashboard-card-blue {
            border-left-color: var(--primary-color);
        }
        
        .dashboard-card-green {
            border-left-color: var(--secondary-color);
        }
        
        .dashboard-card-yellow {
            border-left-color: #f6c23e;
        }
        
        .dashboard-card-red {
            border-left-color: #e74a3b;
        }
        
        .dashboard-card h4 {
            color: var(--dark-color);
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .dashboard-card .number {
            color: var(--dark-color);
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .dashboard-card .icon {
            position: absolute;
            top: 50%;
            right: 1.5rem;
            transform: translateY(-50%);
            color: rgba(0, 0, 0, 0.1);
            font-size: 2rem;
        }
        
        .custom-dropdown .dropdown-toggle::after {
            display: none;
        }
        
        @media (max-width: 768px) {
            #content-wrapper {
                margin-left: 0;
            }
        }
        
        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
            position: relative;
        }
        .table thead {
    position: sticky;
    top: 0;
    background: white; /* Background white rakho taki content overlap na ho */
    z-index: 10;
}
        
        .filter-section {
            background-color: #fff;
            border-radius: 0.35rem;
            padding: 1rem;
            margin-bottom: 1rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
        }
        
        .form-card {
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .form-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.15);
        }
        
        .badge-active {
            background-color: var(--secondary-color);
        }
        
        .badge-inactive {
            background-color: #e74a3b;
        }
        
        .badge-pending {
            background-color: #f6c23e;
        }
        .chart-container {
        height: 400px;
        width: 100%;
        max-width: 600px;
        margin: auto;
        padding: 30px;
        position: relative;
        }

        /* Responsive height for small screens */
        @media (max-width: 768px) {
        .chart-container {
            height: auto;
            min-height: 250px;
        }
        }

        @media (max-width: 768px) {
    .table-responsive {
        height: 300px !important; /* Enforce fixed height on mobile */
    }
    
    .table {
        font-size: 0.85rem; /* Slightly smaller font on mobile */
    }
    
    .btn-group .btn {
        padding: 0.25rem 0.4rem; /* Smaller buttons on mobile */
    }
    
    .card-header {
        padding: 0.75rem; /* Smaller padding on header for mobile */
    }
}
    .table thead th {
    background: white; /* For sticky header visibility */
    z-index: 2;         /* Stay above rows */
    }

    </style>
</head>
<body>

<div id="wrapper">
    <!-- Sidebar -->
    <%- include('./partials/adminSideNavbar', { path: currentPath ,admin: adminData  }) %>
    <!-- Content Wrapper -->
    <div id="content-wrapper" class="d-flex flex-column">
        <!-- Main Content -->
        <div id="content">
            <!-- Topbar -->
              <%- include('partials/adminTopNavbar', { admin: adminData }) %>
            <!-- Begin Page Content -->
            <div class="container-fluid px-10 py-4">
                <!-- Content Row -->
                <div class="row">
                    <!-- Faculty Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-blue">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-primary text-uppercase mb-1">Faculty Members</h4>
                                        <div class="number mb-0"><%= faculties.length %></div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-chalkboard-teacher fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Students Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-green">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-success text-uppercase mb-1">
                                            Students
                                        </h4>
                                        <div class="number mb-0"><%= students.length %></div> <!-- Dynamic Total Count -->
                                    </div>
                                    
                                    <div class="col-auto">
                                        <i class="fas fa-user-graduate fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                    
                    <!-- Feedback Submitted Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-yellow">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-warning text-uppercase mb-1">
                                            Submitted Feedback
                                        </h4>
                                        <div class="number mb-0"> <%= totalSubmissionCount.toString().padStart(2, '0') %></div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-clipboard-check fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                    
                    <!-- Pending Feedback Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-red">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-danger text-uppercase mb-1">
                                            Pending Feedback
                                        </h4>
                                        <div class="number mb-0">22</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Content Row -->
                <div class="row">
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow mb-4">
                            <div class="card-header py-4">
                                <h6 class="m-0 font-weight-bold text-primary">Create Feedback Forms</h6>
                            </div>
                            <div class="card-body py-16">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-book fa-3x mb-3 text-primary"></i>
                                                <h5>Academic</h5>
                                                <a href="/admin/adminHome/forms/create/Academic" class="btn btn-sm btn-primary mt-2 form-create-btn" data-form-type="academic">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-university fa-3x mb-3 text-success"></i>
                                                <h5>Institutional</h5>
                                                <a href="/admin/adminHome/forms/create/Institutional" class="btn btn-sm btn-success mt-2 form-create-btn" data-form-type="institutional">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-laptop-code fa-3x mb-3 text-info"></i>
                                                <h5>Training</h5>
                                                <a href="/admin/adminHome/forms/create/Training" class="btn btn-sm btn-info mt-2 form-create-btn" data-form-type="training">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Manage Forms Section -->
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                                <h6 class="m-0 font-weight-bold text-primary mb-2 mb-md-0">Manage Feedback Forms</h6>
                                <div class="input-group" style="width: 200px;">
                                    <select class="form-select form-select-sm" id="formStatusFilter">
                                        <option value="all">All Forms</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- Fixed height table container -->
                                <div class="table-responsive" style="height: 240px; overflow-y: auto;">
                                    <table class="table table-hover">
                                        <thead style="position: sticky; top: 0; background: white; z-index: 2;">
                                            <tr>
                                                <th>Form Title</th>
                                                <th>Type</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if(forms && forms.length > 0) { %>
                                                <% forms.forEach(form => { %>
                                                    <tr>
                                                        <td><%= form.title %></td>
                                                        <td><%= form.formType %></td>
                                                        <td>
                                                            <% if(form.status === 'active') { %>
                                                                <span class="badge bg-success">Active</span>
                                                            <% } else if(form.status === 'closed') { %>
                                                                <span class="badge bg-danger">Inactive</span>
                                                            <% } %>
                                                        </td>
                                                        <td>
                                                            <div class="btn-group">
                                                                <button class="btn btn-sm btn-primary" onclick="editForm('<%= form._id %>')">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                
                                                                <% if(form.status === 'active') { %>
                                                                    <button class="btn btn-sm btn-danger" onclick="toggleFormStatus('<%= form._id %>', 'closed')">
                                                                        <i class="fas fa-power-off"></i>
                                                                    </button>
                                                                <% } else { %>
                                                                    <button class="btn btn-sm btn-success" onclick="toggleFormStatus('<%= form._id %>', 'active')">
                                                                        <i class="fas fa-power-off"></i>
                                                                    </button>
                                                                <% } %>
                                
                                                                <button class="btn btn-sm btn-info" onclick="viewForm('<%= form._id %>')">
                                                                    <i class="fas fa-eye"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                <% }); %>
                                            <% } else { %>
                                                <tr>
                                                    <td colspan="4" class="text-center">No forms available</td>
                                                </tr>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                                
                                <div class="d-flex flex-column flex-md-row justify-content-between mt-3 gap-2">
                                    <a href="/admin/Total-Forms" class="btn btn-outline-secondary">View All Forms</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow mb-4 mx-10">
            <div class="card-header py-3 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                <h6 class="m-0 font-weight-bold text-primary mb-2 mb-md-0">Manage Faculty Members</h6>
                <div class="input-group" style="width: 200px;">
                    <select class="form-select form-select-sm" id="facultyBranchFilter">
                        <option value="all">All Branches</option>
                        <option value="IT">IT</option>
                        <option value="CSE">CSE</option>
                        <option value="ECE">ECE</option>
                        <option value="ME">ME</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                <!-- Fixed height table container -->   
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-hover">
                        <thead style="position: sticky; top: 0; background: white; z-index: 2;">
                            <tr>
                                <th>Name</th>
                                <th>ID</th>
                                <th>Branch</th>
                                <th>Sections</th>
                                <th>Assigned Forms</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if(faculties && faculties.length > 0) { %>
                                <% faculties.forEach(faculty => { %>
                                    <tr>
                                        <td><%= faculty.name %></td>
                                        <td><%= faculty.idNumber %></td>
                                        <td><%= faculty.branch %></td>
                                        <td><%= faculty.sections.join(", ") %></td>
                                        <td>
                                            <% if(faculty.feedbackForms && faculty.feedbackForms.length > 0) { %>
                                                <span class="badge bg-info"><%= faculty.feedbackForms.length %> forms</span>
                                            <% } else { %>
                                                <span class="badge bg-secondary">No forms</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#assignFormModal" onclick="prepareFormAssignment('<%= faculty._id %>')">
                                                    <i class="fas fa-clipboard-list"></i>
                                                </button>

                                                <% if(faculty.feedbackForms && faculty.feedbackForms.length > 0) { %>
                                                    <button class="btn btn-sm btn-info" onclick="viewAssignedForms('<%= faculty._id %>')">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-secondary" disabled>
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                <% } %>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="6" class="text-center">No faculty members available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                
                
                <div class="d-flex flex-column flex-md-row justify-content-between mt-3 gap-2">
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#bulkAssignModal">
                        <i class="fas fa-clipboard-check me-1"></i> Bulk Assign Forms
                    </button>
                    <button id="downloadExcelBtn" class="btn btn-success">
                        <i class="fas fa-file-excel me-1"></i> Download Excel
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Faculty Details Modal -->
        <div class="modal fade" id="facultyDetailsModal" tabindex="-1" aria-labelledby="facultyDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="facultyDetailsModalLabel">Faculty Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="facultyDetailsContent">
                            <!-- Faculty details will be loaded here dynamically -->
                        </div>
                        
                        <div class="mt-4" id="assignedFormsSection" style="display: none;">
                            <h6 class="font-weight-bold">Assigned Feedback Forms</h6>
                            <div class="table-responsive mt-2">
                                <table class="table table-sm table-bordered" id="assignedFormsTable">
                                    <thead>
                                        <tr>
                                            <th>Form Title</th>
                                            <th>Type</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="assignedFormsTableBody">
                                        <!-- Assigned forms will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="editFacultyBtn">Edit Details</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Assign Form Modal -->
        <div class="modal fade" id="assignFormModal" tabindex="-1" aria-labelledby="assignFormModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="assignFormModalLabel">Assign Feedback Form</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="assignFormForm">
                            <input type="hidden" id="selectedFacultyId" name="facultyId">
                            
                            <div class="mb-3">
                                <label class="form-label">Faculty</label>
                                <input type="text" class="form-control" id="selectedFacultyName" readonly>
                            </div>
                            
                            <div class="mb-3">
                                <label for="formSelect" class="form-label">Select Feedback Form</label>
                                <select class="form-select" id="formSelect" name="formId" required>
                                    <option value="">Choose a form...</option>
                                    <% if(forms && forms.length > 0) { %>
                                        <% forms.forEach(form => { %>
                                            <% if(form.status === 'active') { %>
                                                <option value="<%= form._id %>"><%= form.title %> (<%= form.formType %>)</option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="assignFormBtn">Assign</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Bulk Assign Modal -->
        <div class="modal fade" id="bulkAssignModal" tabindex="-1" aria-labelledby="bulkAssignModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="bulkAssignModalLabel">Bulk Assign Forms</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="bulkAssignForm">
                            <div class="mb-3">
                                <label for="bulkFormSelect" class="form-label">Select Feedback Form</label>
                                <select class="form-select" id="bulkFormSelect" name="formId" required>
                                    <option value="">Choose a form...</option>
                                    <% if(forms && forms.length > 0) { %>
                                        <% forms.forEach(form => { %>
                                            <% if(form.status === 'active') { %>
                                                <option value="<%= form._id %>"><%= form.title %> (<%= form.formType %>)</option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Select Faculty Members</label>
                                <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="selectAllFaculty">
                                                        <label class="form-check-label" for="selectAllFaculty">All</label>
                                                    </div>
                                                </th>
                                                <th>Name</th>
                                                <th>ID</th>
                                                <th>Branch</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if(faculties && faculties.length > 0) { %>
                                                <% faculties.forEach(faculty => { %>
                                                    <tr>
                                                        <td>
                                                            <div class="form-check">
                                                                <input class="form-check-input faculty-checkbox" type="checkbox" value="<%= faculty._id %>" name="selectedFaculties">
                                                            </div>
                                                        </td>
                                                        <td><%= faculty.name %></td>
                                                        <td><%= faculty.idNumber %></td>
                                                        <td><%= faculty.branch %></td>
                                                    </tr>
                                                <% }); %>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="bulkAssignBtn">Assign to Selected</button>
                    </div>
                </div>
            </div>
        </div>

        <main class="flex-1 overflow-y-auto pb-4 px-4 sm:px-8 md:px-10">
            <div class="mb-6 md:mb-8">
                <h1 class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-800 text-center mt-4 md:mt-6">
                    <%= feedbackData.responseMetadata.currentFormType.toUpperCase() %> FEEDBACK VISUALIZATION
                </h1>
                <p class="text-center text-gray-600 mt-2" id="dataInfo">
                    <span id="currentFilter"><%= subjectFilter || 'All Subjects' %></span> | 
                    <span id="responseCount"><%= feedbackData.responseMetadata.totalResponses %> Responses</span>
                    <% if (feedbackData.responseMetadata.currentFormType === 'Academic' && academicType) { %>
                    | <span id="academicTypeLabel"><%= academicType === 'theory' ? 'Theory' : academicType === 'practical' ? 'Practical' : 'All Types' %></span>
                    <% } %>
                    <% if (session) { %>
                    | <span id="sessionLabel">Session: <%= session %></span>
                    <% } %>
                </p>
            </div>
            <!-- Filter Section with improved layout and added semester filter -->
            <div class="bg-white rounded-lg shadow-md p-4 mb-6">
                <h2 class="text-lg font-semibold text-gray-800 mb-4">Filters</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Form Type Dropdown -->
                    <div class="flex flex-col">
                        <label for="formTypeSelect" class="text-sm font-medium text-gray-700 mb-1">Form Type:</label>
                        <select id="formTypeSelect" name="formType" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="Academic" <%= feedbackData.responseMetadata.currentFormType === 'Academic' ? 'selected' : '' %>>Academic Feedback</option>
                            <option value="Institutional" <%= feedbackData.responseMetadata.currentFormType === 'Institutional' ? 'selected' : '' %>>Institutional Feedback</option>
                            <option value="Training" <%= feedbackData.responseMetadata.currentFormType === 'Training' ? 'selected' : '' %>>Training Feedback</option>
                        </select>
                    </div>

                     <!-- Academic Type Filter (only for Academic form type) -->
                     <% if (feedbackData.responseMetadata.currentFormType === 'Academic') { %>
                        <div class="flex flex-col" id="academicFilters">
                            <label for="academicTypeSelect" class="text-sm font-medium text-gray-700 mb-1">Course Type:</label>
                            <select id="academicTypeSelect" name="academicType" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <option value="all" <%= !academicType || academicType === 'all' ? 'selected' : '' %>>All</option>
                                <option value="theory" <%= academicType === 'theory' ? 'selected' : '' %>>Theory</option>
                                <option value="practical" <%= academicType === 'practical' ? 'selected' : '' %>>Practical</option>
                            </select>
                        </div>
                        <% } %>
                    
                    <!-- Semester Filter Dropdown -->
                    <div class="flex flex-col">
                        <label for="semesterSelect" class="text-sm font-medium text-gray-700 mb-1">Semester:</label>
                        <select id="semesterSelect" name="semester" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="All" <%= selectedSemester === 'All' ? 'selected' : '' %>>All Semesters</option>
                            <% uniqueSemesters.forEach(semester => { %>
                                <% if (semester !== 'All') { %>
                                    <option value="<%= semester %>" <%= selectedSemester === semester ? 'selected' : '' %>><%= semester %></option>
                                <% } %>
                            <% }); %>
                        </select>
                    </div>
                    
                    <!-- Session Dropdown -->
                    <div class="flex flex-col">
                        <label for="sessionSelect" class="text-sm font-medium text-gray-700 mb-1">Session:</label>
                        <select id="sessionSelect" name="session" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="All">All Sessions</option>
                            <% uniqueSessions.forEach(sessionItem => { %>
                                <option value="<%= sessionItem %>" <%= selectedSession === sessionItem ? 'selected' : '' %>><%= sessionItem %></option>
                            <% }); %>
                        </select>
                    </div>

                    <% if (feedbackData.responseMetadata.currentFormType === 'Academic' || feedbackData.responseMetadata.currentFormType === 'Training') { %>
                    <!-- Faculty Selector -->
                    <div class="flex flex-col">
                        <label for="facultySelect" class="text-sm font-medium text-gray-700 mb-1">Faculty:</label>
                        <select id="facultySelect" name="faculty" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">All Faculty</option>
                            <% faculties.forEach(faculty => { %>
                                <option value="<%= faculty._id %>" <%= selectedFaculty === faculty._id.toString() ? 'selected' : '' %>><%= faculty.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <% } %>
                    
                    <!-- Subject Filter -->
                    <div class="flex flex-col">
                        <label for="subjectSelect" class="text-sm font-medium text-gray-700 mb-1">Subject:</label>
                        <select id="subjectSelect" name="subject" class="border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="All">All Subjects</option>
                            <% uniqueSubjects.forEach(subject => { %>
                                <option value="<%= subject %>" <%= subjectFilter === subject ? 'selected' : '' %>><%= subject %></option>
                            <% }); %>
                        </select>
                    </div>
                    
                    <!-- Buttons container -->
                    <div class="flex items-end space-x-2">
                        <!-- Apply filters button -->
                        <button type="submit" id="applyFilters" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
                            Apply Filters
                        </button>
                        
                        <!-- Clear filters button -->
                        <button type="button" id="clearFilters" class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded transition duration-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">
                            Clear Filters
                        </button>
                    </div>
                </div>
            </div>
            <!-- Charts Grid with improved spacing and responsiveness -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <% if (feedbackData.responseMetadata.currentFormType === 'Academic') { %>
                <!-- Academic Feedback Charts with updated chart types -->
                <% if (Object.keys(feedbackData.sectionData).includes('Teacher Effectiveness')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Teacher Effectiveness</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="teacherEffectivenessChart" 
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Teacher Effectiveness'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Teacher Effectiveness'].values) %>"
                            data-type="radar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Student Learning Experience')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Student Learning Experience</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="studentExperienceChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Student Learning Experience'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Student Learning Experience'].values) %>"
                            data-type="bar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Exams and Evaluation')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Exams and Evaluation</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="examsEvaluationChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Exams and Evaluation'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Exams and Evaluation'].values) %>"
                            data-type="horizontalBar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Overall Satisfaction')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Overall Satisfaction</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="overallSatisfactionChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Overall Satisfaction'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Overall Satisfaction'].values) %>"
                            data-type="doughnut">
                        </canvas>
                    </div>
                </div>
                <% } %>
            <% } else if (feedbackData.responseMetadata.currentFormType === 'Institutional') { %>
                <!-- Institutional Feedback Charts with improved visualization -->
                <% if (Object.keys(feedbackData.sectionData).includes('Resources and Administration')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Resources and Administration</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="resourcesAdminChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Resources and Administration'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Resources and Administration'].values) %>"
                            data-type="radar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Administrative Services')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Administrative Services</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="adminServicesChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Administrative Services'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Administrative Services'].values) %>"
                            data-type="horizontalBar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Student Support')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Student Support</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="studentSupportChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Student Support'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Student Support'].values) %>"
                            data-type="line">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Technology Resources')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Technology Resources</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="techResourcesChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Technology Resources'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Technology Resources'].values) %>"
                            data-type="bar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Campus Life')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Campus Life</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="campusLifeChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Campus Life'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Campus Life'].values) %>"
                            data-type="polarArea">
                        </canvas>
                    </div>
                </div>
                <% } %>
            <% } else if (feedbackData.responseMetadata.currentFormType === 'Training') { %>
                <% if (Object.keys(feedbackData.sectionData).includes('Training Materials')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Training Materials</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="trainingMaterialsChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Training Materials'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Training Materials'].values) %>"
                            data-type="horizontalBar">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Workshop Facilities')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Workshop Facilities</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="workshopFacilitiesChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Workshop Facilities'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Workshop Facilities'].values) %>"
                            data-type="polarArea">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Practical Application')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Practical Application</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="practicalApplicationChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Practical Application'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Practical Application'].values) %>"
                            data-type="line">
                        </canvas>
                    </div>
                </div>
                <% } %>
                
                <% if (Object.keys(feedbackData.sectionData).includes('Overall Value')) { %>
                <div class="chart-container bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 class="text-base md:text-lg font-semibold mb-3 text-gray-800">Overall Value</h3>
                    <div class="aspect-w-16 aspect-h-9">
                        <canvas id="overallValueChart"
                            data-labels="<%= JSON.stringify(feedbackData.sectionData['Overall Value'].labels) %>"
                            data-values="<%= JSON.stringify(feedbackData.sectionData['Overall Value'].values) %>"
                            data-type="doughnut">
                        </canvas>
                    </div>
                </div>
                <% } %>
            <% } %>
            </div>
            <!-- Summary Section with improved design -->
            <div class="mt-8 bg-white p-6 rounded-lg shadow-md">
                <h3 class="text-xl font-semibold mb-4 text-gray-800">Overall Feedback Analysis</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <!-- Section averages comparison -->
                    <div class="col-span-1 md:col-span-2 bg-white rounded-lg">
                        <h4 class="text-lg font-medium text-gray-800 mb-3">Section Performance</h4>
                        <div class="h-64">
                            <canvas id="sectionBarChart" data-labels="<%= JSON.stringify(feedbackData.sectionAverages.map(section => section.sectionTitle)) %>" data-values="<%= JSON.stringify(feedbackData.sectionAverages.map(section => section.averageScore)) %>"></canvas>
                        </div>
                    </div>
                    
                    <!-- Donut chart for overall perspective -->
                    <div class="col-span-1 bg-white rounded-lg">
                        <h4 class="text-lg font-medium text-gray-800 mb-3">Overall Rating Distribution</h4>
                        <div class="h-64">
                            <canvas id="sectionDoughnutChart" data-labels="<%= JSON.stringify(feedbackData.sectionAverages.map(section => section.sectionTitle)) %>" data-values="<%= JSON.stringify(feedbackData.sectionAverages.map(section => section.averageScore)) %>"></canvas>
                        </div>
                    </div>
                </div>
                
                <!-- Section scores table -->
                <div class="mt-6 overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="py-3 px-4 text-left font-medium text-gray-700">Section</th>
                                <th class="py-3 px-4 text-center font-medium text-gray-700">Average Score</th>
                                <th class="py-3 px-4 text-center font-medium text-gray-700">Response Count</th>
                                <th class="py-3 px-4 text-right font-medium text-gray-700">Performance</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            <% feedbackData.sectionAverages.forEach(section => { %>
                            <tr class="hover:bg-gray-50">
                                <td class="py-3 px-4 text-gray-800 font-medium"><%= section.sectionTitle %></td>
                                <td class="py-3 px-4 text-center"><%= section.averageScore.toFixed(2) %>/5</td>
                                <td class="py-3 px-4 text-center"><%= feedbackData.responseMetadata.totalResponses || '-' %></td>
                                <td class="py-3 px-4 text-right">
                                    <% const performanceClass = section.averageScore >= 4 ? 'bg-green-100 text-green-800' : 
                                        section.averageScore >= 3 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'; %>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= performanceClass %>">
                                        <%= section.averageScore >= 4 ? 'Excellent' : section.averageScore >= 3 ? 'Good' : 'Needs Improvement' %>
                                    </span>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- Metadata display with improved design -->
            <div class="mt-8 bg-white p-6 rounded-lg shadow-md">
                <h3 class="text-xl font-semibold mb-4 text-gray-800">Feedback Information</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500 mb-1">Form Type</p>
                        <p class="font-medium text-gray-800" id="formType"><%= feedbackData.responseMetadata.currentFormType %></p>
                    </div>
                    <div class="bg-green-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500 mb-1">Total Responses</p>
                        <p class="font-medium text-gray-800" id="responseCount"><%= feedbackData.responseMetadata.totalResponses %></p>
                    </div>
                    <div class="bg-purple-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500 mb-1">Session</p>
                        <p class="font-medium text-gray-800" id="sessionDisplay"><%= session || 'All Sessions' %></p>
                    </div>
                    <div class="bg-yellow-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500 mb-1">Last Updated</p>
                        <p class="font-medium text-gray-800" id="lastUpdated"><%= feedbackData.responseMetadata.lastUpdated.toLocaleString() %></p>
                    </div>
                </div>
            </div>
            <!-- Download options -->
            <div class="flex flex-col sm:flex-row justify-center gap-4 mt-8">
                <button id="downloadFullExcel"
                    class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg flex items-center justify-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-download">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="7 10 12 15 17 10"></polyline>
                        <line x1="12" x2="12" y1="15" y2="3"></line>
                    </svg>
                    <span>Download Complete Data</span>
                </button>
                
                <button id="downloadFilteredExcel"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg flex items-center justify-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-filter">
                        <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                    </svg>
                    <span>Download Filtered Data</span>
                </button>
            </div>
        </main>

        <!-- Footer -->
        <%- include('partials/adminBottomNavbar') %>
        <!-- End of Footer -->
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<!-- Bootstrap core JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<!-- Custom scripts -->
<script>
   
     // Form status filter functionality
     document.getElementById('formStatusFilter').addEventListener('change', function() {
        const status = this.value;
        const rows = document.querySelectorAll('.table tbody tr');
        
        rows.forEach(row => {
            if (status === 'all') {
                row.style.display = '';
            } else {
                const badgeText = row.querySelector('.badge').textContent.toLowerCase();
                if (badgeText === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            }
        });
    });
    // Function to edit form
    function editForm(formId) {
        window.location.href = `/admin/forms/${formId}/edit`;
    }
    // Function to toggle form status
    async function toggleFormStatus(formId, newStatus) {
        try {
            const response = await fetch(`/admin/forms/updateStatus/${formId}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ status: newStatus })
            });

            const result = await response.json();
            if (result.success) {
                alert(`Form status updated to ${newStatus}`);
                location.reload(); // Refresh to show updated status
            } else {
                alert("Failed to update form status");
            }
        } catch (error) {
            console.error("Error updating form status:", error);
        }
    }
    // Function to view form
    function viewForm(formId) {
        window.location.href = `/admin/forms/view/${formId}`;
    }
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle sidebar
        const toggleSidebar = document.querySelector('.toggle-sidebar');
        const sidebar = document.querySelector('.sidebar');
        const contentWrapper = document.querySelector('#content-wrapper');
        
        if (toggleSidebar) {
            toggleSidebar.addEventListener('click', function() {
                sidebar.classList.toggle('toggled');
                contentWrapper.classList.toggle('toggled');
            });
        }
        
        // Dropdown functionality
        const dropdowns = document.querySelectorAll('.dropdown-toggle');
        dropdowns.forEach(dropdown => {
            new bootstrap.Dropdown(dropdown);
        });
    });


    ///
    document.addEventListener('DOMContentLoaded', function() {
  // Save scroll position
  let scrollPosition = 0;
  
  // Form Type Dropdown Change Event
  const formTypeSelect = document.getElementById('formTypeSelect');
  if (formTypeSelect) {
    formTypeSelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('formType');
    });
  }
  
  // Academic Type Filter Change Event
  const academicTypeSelect = document.getElementById('academicTypeSelect');
  if (academicTypeSelect) {
    academicTypeSelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('academicType');
    });
  }
  
  // Faculty Select Change Event
  const facultySelect = document.getElementById('facultySelect');
  if (facultySelect) {
    facultySelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('faculty');
    });
  }
  
  // Semester Select Change Event
  const semesterSelect = document.getElementById('semesterSelect');
  if (semesterSelect) {
    semesterSelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('semester');
    });
  }
  
  // Session Select Change Event
  const sessionSelect = document.getElementById('sessionSelect');
  if (sessionSelect) {
    sessionSelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('session');
    });
  }
  
  // Subject Select Change Event
  const subjectSelect = document.getElementById('subjectSelect');
  if (subjectSelect) {
    subjectSelect.addEventListener('change', function() {
      scrollPosition = window.scrollY;
      // Only apply subject filter to feedback charts, not faculty table
      applyFeedbackFiltersOnly();
    });
  }
  
  // Apply Filters Button Click Event
  const applyFiltersBtn = document.getElementById('applyFilters');
  if (applyFiltersBtn) {
    applyFiltersBtn.addEventListener('click', function() {
      scrollPosition = window.scrollY;
      buildAndNavigateURL('all');
    });
  }
  
  // Clear Filters Button Click Event
  const clearFiltersBtn = document.getElementById('clearFilters');
  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener('click', function() {
      scrollPosition = window.scrollY;
      clearAllFilters();
    });
  }
  
  // Function to clear all filters and reset to defaults
  function clearAllFilters() {
    // Reset form type to default (usually Academic)
    if (formTypeSelect) {
      formTypeSelect.value = 'Academic';
    }
    
    // Reset semester to "All"
    if (semesterSelect) {
      semesterSelect.value = 'All';
    }
    
    // Reset session to "All"
    if (sessionSelect) {
      sessionSelect.value = 'All';
    }
    
    // Reset faculty to empty (All Faculty)
    if (facultySelect) {
      facultySelect.value = '';
    }
    
    // Reset subject to "All"
    if (subjectSelect) {
      subjectSelect.value = 'All';
    }
    
    // Reset academic type to "all" if it exists
    if (academicTypeSelect) {
      academicTypeSelect.value = 'all';
    }
    
    // Clear any stored filters in session storage
    sessionStorage.removeItem('currentSubjectFilter');
    
    // Navigate to the base URL with default Academic form type
    window.location.href = '/admin/adminHome?formType=Academic';
  }
  
  // Function to apply only feedback-related filters without affecting faculty table
  function applyFeedbackFiltersOnly() {
    const formType = formTypeSelect ? formTypeSelect.value : 'Academic';
    const subjectValue = subjectSelect ? subjectSelect.value : 'All';
    
    // Instead of navigating to a new URL, filter the charts directly
    filterFeedbackCharts(subjectValue);
    
    // Save current filters in session storage for persistence
    sessionStorage.setItem('currentSubjectFilter', subjectValue);
  }
  
  // Function to filter feedback charts without affecting faculty table
  function filterFeedbackCharts(subjectValue) {
    // Get all chart containers that should be affected by subject filter
    const chartContainers = document.querySelectorAll('.feedback-chart-container');
    
    chartContainers.forEach(container => {
      const chartSubject = container.getAttribute('data-subject');
      
      if (subjectValue === 'All' || !subjectValue) {
        // Show all charts if 'All' is selected
        container.style.display = 'block';
      } else if (chartSubject && chartSubject === subjectValue) {
        // Show only charts matching the selected subject
        container.style.display = 'block';
      } else {
        // Hide charts not matching the selected subject
        container.style.display = 'none';
      }
    });
    
    // Re-initialize visible charts to ensure proper rendering
    initializeVisibleCharts();
  }
  
  // Function to initialize only visible charts
  function initializeVisibleCharts() {
    // Clear existing charts to prevent duplicates
    Chart.helpers.each(Chart.instances, function(instance) {
      instance.destroy();
    });
    
    // Get all visible chart canvases
    const visibleChartCanvases = document.querySelectorAll('.feedback-chart-container[style="display: block;"] canvas[data-type]');
    
    // For each visible canvas, initialize the appropriate chart type
    visibleChartCanvases.forEach(canvas => {
      if (!canvas.id.includes('sectionBarChart') && !canvas.id.includes('sectionDoughnutChart')) {
        const chartType = canvas.getAttribute('data-type');
        const chartLabels = JSON.parse(canvas.getAttribute('data-labels'));
        const chartValues = JSON.parse(canvas.getAttribute('data-values'));
        
        createChart(canvas, chartType, chartLabels, chartValues);
      }
    });
    
    // Also reinitialize section charts if they're visible
    const visibleSectionDoughnut = document.querySelector('.feedback-chart-container[style="display: block;"] #sectionDoughnutChart');
    const visibleSectionBar = document.querySelector('.feedback-chart-container[style="display: block;"] #sectionBarChart');
    
    if (visibleSectionDoughnut) {
      initializeSectionDoughnutChart();
    }
    
    if (visibleSectionBar) {
      initializeSectionBarChart();
    }
  }
  
  // Function to build URL with all active filters and navigate to it
  function buildAndNavigateURL(changedFilter) {
    const formType = formTypeSelect ? formTypeSelect.value : 'Academic';
    
    // Build the base URL
    let newUrl = `/admin/adminHome?formType=${formType}`;
    
    // Add faculty parameter if it exists and has a value
    if (facultySelect && facultySelect.value) {
      newUrl += `&faculty=${facultySelect.value}`;
    }
    
    // Add academic type parameter if form type is Academic and it has a value other than 'all'
    if (formType === 'Academic' && academicTypeSelect && academicTypeSelect.value !== 'all') {
      newUrl += `&academicType=${academicTypeSelect.value}`;
    }
    
    // Add semester parameter if it exists and is not 'All'
    if (semesterSelect && semesterSelect.value !== 'All') {
      newUrl += `&semester=${semesterSelect.value}`;
    }
    
    // Add session parameter if it exists and is not 'All'
    if (sessionSelect && sessionSelect.value !== 'All') {
      newUrl += `&session=${sessionSelect.value}`;
    }
    
    // Add subject parameter ONLY if it's not the subject filter that changed
    // This prevents the subject filter from affecting the faculty table
    if (changedFilter !== 'subject' && subjectSelect && subjectSelect.value !== 'All') {
      newUrl += `&subject=${subjectSelect.value}`;
    }
    
    // Save the scroll position in sessionStorage
    sessionStorage.setItem('scrollPosition', scrollPosition);
    
    // If the subject filter changed, apply it locally without navigation
    if (changedFilter === 'subject') {
      applyFeedbackFiltersOnly();
      return;
    }
    
    // Navigate to the new URL for other filter changes
    window.location.href = newUrl;
  }
  
  // Restore scroll position after page load
  const savedScrollPosition = sessionStorage.getItem('scrollPosition');
  if (savedScrollPosition) {
    window.scrollTo(0, parseInt(savedScrollPosition));
    sessionStorage.removeItem('scrollPosition'); // Clear saved position
  }
  
  // Apply any stored subject filter on page load
  const storedSubjectFilter = sessionStorage.getItem('currentSubjectFilter');
  if (storedSubjectFilter && subjectSelect) {
    subjectSelect.value = storedSubjectFilter;
    filterFeedbackCharts(storedSubjectFilter);
  }
  
  // Initialize charts with their appropriate types
  initializeCharts();
  
  // Initialize the section doughnut chart
  initializeSectionDoughnutChart();
  
  // Initialize the section bar chart
  initializeSectionBarChart();
  
  // Add class to identify chart containers if not already present
  document.querySelectorAll('canvas[data-type]').forEach(canvas => {
    const container = canvas.closest('div');
    if (container && !container.classList.contains('feedback-chart-container')) {
      container.classList.add('feedback-chart-container');
      
      // Add data-subject attribute if not present
      if (!container.hasAttribute('data-subject') && canvas.hasAttribute('data-subject')) {
        container.setAttribute('data-subject', canvas.getAttribute('data-subject'));
      }
    }
  });
  
  // Download Full Excel Button
  const downloadFullExcelBtn = document.getElementById('downloadFullExcel');
  if (downloadFullExcelBtn) {
    downloadFullExcelBtn.addEventListener('click', function() {
      const formType = document.getElementById('formType').textContent.trim();
      
      // Create download URL for complete data
      let downloadUrl = `/feedback/download/${formType.toLowerCase()}/full`;
      
      window.location.href = downloadUrl;
    });
  }
  
  // Download Filtered Excel Button
  const downloadFilteredExcelBtn = document.getElementById('downloadFilteredExcel');
  if (downloadFilteredExcelBtn) {
    downloadFilteredExcelBtn.addEventListener('click', function() {
      const formType = document.getElementById('formType').textContent.trim();
      const academicTypeElem = document.getElementById('academicTypeLabel');
      const academicType = academicTypeElem ? academicTypeElem.textContent.trim() : null;
      
      // Build download URL with all active filters
      let downloadUrl = `/feedback/download/${formType.toLowerCase()}/filtered`;
      
      // Add query parameters
      const params = new URLSearchParams();
      
      // Add faculty parameter
      if (facultySelect && facultySelect.value) {
        params.append('faculty', facultySelect.value);
      }
      
      // Add academic type parameter if it exists and is not 'All Types'
      if (academicType && academicType !== 'All Types') {
        params.append('academicType', academicType.toLowerCase());
      }
      
      // Add semester parameter
      if (semesterSelect && semesterSelect.value !== 'All') {
        params.append('semester', semesterSelect.value);
      }
      
      // Add session parameter
      if (sessionSelect && sessionSelect.value !== 'All') {
        params.append('session', sessionSelect.value);
      }
      
      // Add subject parameter
      if (subjectSelect && subjectSelect.value !== 'All') {
        params.append('subject', subjectSelect.value);
      }
      
      // Append parameters to URL if they exist
      if (params.toString()) {
        downloadUrl += `?${params.toString()}`;
      }
      
      window.location.href = downloadUrl;
    });
  }
});

// Function to initialize charts based on the data attributes
function initializeCharts() {
  // Get all chart canvases
  const chartCanvases = document.querySelectorAll('canvas[data-type]');
  
  // For each canvas, initialize the appropriate chart type
  chartCanvases.forEach(canvas => {
    if (!canvas.id.includes('sectionBarChart') && !canvas.id.includes('sectionDoughnutChart')) {
      const chartType = canvas.getAttribute('data-type');
      const chartLabels = JSON.parse(canvas.getAttribute('data-labels'));
      const chartValues = JSON.parse(canvas.getAttribute('data-values'));
      
      createChart(canvas, chartType, chartLabels, chartValues);
    }
  });
}
// Function to create a chart
function createChart(canvas, type, labels, values) {
  // Chart.js configuration
  const chartConfig = {
    type: type === 'horizontalBar' ? 'bar' : type, // 'horizontalBar' is deprecated in Chart.js v3+
    data: {
      labels: labels,
      datasets: [{
        label: 'Average Rating',
        data: values,
        backgroundColor: getBackgroundColors(type, values.length),
        borderColor: getBorderColors(type, values.length),
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      indexAxis: type === 'horizontalBar' ? 'y' : 'x', // For horizontal bar charts in Chart.js v3+
      scales: {
        y: {
          beginAtZero: true,
          max: 5, // Rating scale is 1-5
          ticks: {
            stepSize: 1
          }
        }
      },
      plugins: {
        legend: {
          display: ['doughnut', 'pie', 'polarArea'].includes(type)
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              return `Rating: ${context.raw}/5`;
            }
          }
        }
      }
    }
  };
  
  // Adjust options based on chart type
  if (type === 'radar') {
    chartConfig.options.scales = {
      r: {
        beginAtZero: true,
        max: 5,
        ticks: {
          stepSize: 1
        }
      }
    };
  } else if (['doughnut', 'pie', 'polarArea'].includes(type)) {
    chartConfig.options.scales = {}; // No scales for these chart types
  }
  
  // Create the chart
  new Chart(canvas, chartConfig);
}

// Function to initialize the section doughnut chart
function initializeSectionDoughnutChart() {
  const canvas = document.getElementById('sectionDoughnutChart');
  if (canvas) {
    const labels = JSON.parse(canvas.getAttribute('data-labels'));
    const values = JSON.parse(canvas.getAttribute('data-values'));
    
    new Chart(canvas, {
      type: 'doughnut',
      data: {
        labels: labels,
        datasets: [{
          data: values,
          backgroundColor: getBackgroundColors('doughnut', values.length),
          borderColor: getBorderColors('doughnut', values.length),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              boxWidth: 12,
              font: {
                size: 10
              }
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `${context.label}: ${context.raw.toFixed(2)}/5`;
              }
            }
          }
        }
      }
    });
  }
}

// Function to initialize the section bar chart
function initializeSectionBarChart() {
  const barCanvas = document.getElementById('sectionBarChart');
  if (barCanvas) {
    const labels = JSON.parse(barCanvas.getAttribute('data-labels'));
    const values = JSON.parse(barCanvas.getAttribute('data-values'));
    
    new Chart(barCanvas, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Section Average',
          data: values,
          backgroundColor: getBackgroundColors('bar', values.length),
          borderColor: getBorderColors('bar', values.length),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        scales: {
          y: {
            beginAtZero: true,
            max: 5,
            ticks: {
              stepSize: 1
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `Average: ${context.raw.toFixed(2)}/5`;
              }
            }
          }
        }
      }
    });
  }
}

// Function to get background colors for charts
function getBackgroundColors(type, count) {
  // Base colors for charts
  const colors = [
    'rgba(54, 162, 235, 0.6)',  // Blue
    'rgba(255, 99, 132, 0.6)',   // Red
    'rgba(75, 192, 192, 0.6)',   // Green
    'rgba(255, 206, 86, 0.6)',   // Yellow
    'rgba(153, 102, 255, 0.6)',  // Purple
    'rgba(255, 159, 64, 0.6)',   // Orange
    'rgba(199, 199, 199, 0.6)',  // Gray
    'rgba(83, 102, 255, 0.6)',   // Indigo
    'rgba(255, 99, 255, 0.6)',   // Pink
    'rgba(159, 159, 64, 0.6)'    // Olive
  ];
  
  // For radar, bar, line, and horizontalBar charts, return a single color
  if (['radar', 'line', 'bar', 'horizontalBar'].includes(type)) {
    return 'rgba(54, 162, 235, 0.6)';
  }
  
  // For other charts, return an array of colors
  let result = [];
  for (let i = 0; i < count; i++) {
    result.push(colors[i % colors.length]);
  }
  
  return result;
}

// Function to get border colors for charts
function getBorderColors(type, count) {
  // Base colors for chart borders
  const colors = [
    'rgba(54, 162, 235, 1)',   // Blue
    'rgba(255, 99, 132, 1)',    // Red
    'rgba(75, 192, 192, 1)',    // Green
    'rgba(255, 206, 86, 1)',    // Yellow
    'rgba(153, 102, 255, 1)',   // Purple
    'rgba(255, 159, 64, 1)',    // Orange
    'rgba(199, 199, 199, 1)',   // Gray
    'rgba(83, 102, 255, 1)',    // Indigo
    'rgba(255, 99, 255, 1)',    // Pink
    'rgba(159, 159, 64, 1)'     // Olive
  ];
  
  // For radar, bar, line, and horizontalBar charts, return a single color
  if (['radar', 'line', 'bar', 'horizontalBar'].includes(type)) {
    return 'rgba(54, 162, 235, 1)';
  }
  
  // For other charts, return an array of colors
  let result = [];
  for (let i = 0; i < count; i++) {
    result.push(colors[i % colors.length]);
  }
  
  return result;
}
// Initialize charts with their specific types
function initializeCharts() {
  const chartContainers = document.querySelectorAll('.chart-container canvas');
  
  chartContainers.forEach(canvas => {
    const chartType = canvas.getAttribute('data-type') || 'bar';
    let labels = [];
    let values = [];
    
    try {
      labels = JSON.parse(canvas.getAttribute('data-labels') || '[]');
      values = JSON.parse(canvas.getAttribute('data-values') || '[]');
    } catch (e) {
      console.error(`Error parsing data for ${canvas.id}:`, e);
    }
    
    // Create the appropriate chart based on type
    if (chartType === 'polarArea') {
      createPolarAreaChart(canvas, labels, values);
    } else if (chartType === 'doughnut') {
      createDoughnutChart(canvas, labels, values);
    } else if (chartType === 'line') {
      createLineChart(canvas, labels, values);
    } else if (chartType === 'bar') {
      createBarChart(canvas, labels, values);
    }
  });
}

// Function to initialize the section doughnut chart
function initializeSectionDoughnutChart() {
  const sectionDoughnutCanvas = document.getElementById('sectionDoughnutChart');
  
  // Check if the canvas element exists
  if (!sectionDoughnutCanvas) return;
  
  // Get section data from data attributes
  let sectionTitles = [];
  let sectionScores = [];
  
  try {
    sectionTitles = JSON.parse(sectionDoughnutCanvas.getAttribute('data-labels') || '[]');
    sectionScores = JSON.parse(sectionDoughnutCanvas.getAttribute('data-values') || '[]');
  } catch (e) {
    console.error('Error parsing section data for chart:', e);
    return;
  }
  
  // Create the doughnut chart
  new Chart(sectionDoughnutCanvas, {
    type: 'doughnut',
    data: {
      labels: sectionTitles,
      datasets: [{
        data: sectionScores,
        backgroundColor: [
          'rgba(54, 162, 235, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(255, 99, 132, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)',
          'rgba(199, 199, 199, 0.6)',
          'rgba(83, 102, 255, 0.6)',
          'rgba(78, 175, 74, 0.6)',
          'rgba(255, 99, 132, 0.6)'
        ],
        borderColor: [
          'rgba(54, 162, 235, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 99, 132, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(159, 159, 159, 1)',
          'rgba(83, 102, 255, 1)',
          'rgba(78, 175, 74, 1)',
          'rgba(255, 99, 132, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right',
          labels: {
            padding: 20,
            boxWidth: 12,
            font: {
              size: 11
            }
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.raw || 0;
              return `${label}: ${value.toFixed(2)} / 5`;
            }
          }
        }
      },
      animation: {
        animateRotate: true,
        animateScale: true,
        duration: 800,
        easing: 'easeOutCirc'
      },
      cutout: '60%'
    }
  });
}
// Create a Polar Area chart for Academic feedback
function createPolarAreaChart(canvas, labels, values) {
  new Chart(canvas, {
    type: 'polarArea',
    data: {
      labels: labels,
      datasets: [{
        data: values,
        backgroundColor: [
          'rgba(54, 162, 235, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(255, 99, 132, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)',
          'rgba(199, 199, 199, 0.6)',
          'rgba(83, 102, 255, 0.6)',
          'rgba(78, 175, 74, 0.6)',
          'rgba(255, 99, 132, 0.6)'
        ],
        borderColor: [
          'rgba(54, 162, 235, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 99, 132, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(159, 159, 159, 1)',
          'rgba(83, 102, 255, 1)',
          'rgba(78, 175, 74, 1)',
          'rgba(255, 99, 132, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        r: {
          beginAtZero: true,
          max: 5,
          ticks: {
            stepSize: 1
          }
        }
      },
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            boxWidth: 12
          }
        },
        tooltip: {
          callbacks: {
            title: function(context) {
              return context[0].label;
            },
            label: function(context) {
              return `Score: ${context.raw.toFixed(2)}`;
            }
          }
        }
      },
      animation: {
        animateRotate: true,
        animateScale: true,
        duration: 800,
        easing: 'easeOutQuad'
      }
    }
  });
}

// Create a Doughnut chart for Academic feedback
function createDoughnutChart(canvas, labels, values) {
  new Chart(canvas, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [{
        data: values,
        backgroundColor: [
          'rgba(54, 162, 235, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(255, 99, 132, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)'
        ],
        borderColor: [
          'rgba(54, 162, 235, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 99, 132, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            padding: 20,
            boxWidth: 12
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.raw || 0;
              return `${label}: ${value.toFixed(2)}`;
            }
          }
        }
      },
      animation: {
        animateRotate: true,
        animateScale: true,
        duration: 800,
        easing: 'easeOutCirc'
      },
      cutout: '60%'
    }
  });
}

// Create a Line chart for Institutional feedback
function createLineChart(canvas, labels, values) {
  new Chart(canvas, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Average Rating (1-5)',
        data: values,
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(75, 192, 192, 1)',
        pointRadius: 4,
        pointHoverRadius: 6,
        fill: true,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          max: 5,
          ticks: {
            stepSize: 1
          }
        }
      },
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          titleFont: {
            size: 14
          },
          bodyFont: {
            size: 13
          },
          callbacks: {
            label: function(context) {
              return `Rating: ${context.raw.toFixed(2)}`;
            }
          }
        }
      },
      animation: {
        duration: 1000,
        easing: 'easeOutQuart'
      }
    }
  });
}

// Create a Bar chart for Training feedback
function createBarChart(canvas, labels, values) {
  new Chart(canvas, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Average Rating (1-5)',
        data: values,
        backgroundColor: [
          'rgba(54, 162, 235, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(255, 99, 132, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)'
        ],
        borderColor: [
          'rgba(54, 162, 235, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 99, 132, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          max: 5,
          ticks: {
            stepSize: 1
          }
        }
      },
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          callbacks: {
            label: function(context) {
              return `Rating: ${context.raw.toFixed(2)}`;
            }
          }
        }
      },
      animation: {
        duration: 1000,
        easing: 'easeOutBounce'
      },
      barThickness: 'flex',
      maxBarThickness: 30
    }
  });
}

// faculty management script
    // View faculty details with their assigned forms
    function viewFacultyDetails(facultyId) {
    const facultyData = getFacultyById(facultyId);
    if (!facultyData) return;
    
    // Populate faculty details
    const detailsContent = document.getElementById('facultyDetailsContent');
    detailsContent.innerHTML = `
        <div class="row mb-3">
            <div class="col-md-6">
                <p><strong>Name:</strong> ${facultyData.name}</p>
                <p><strong>ID Number:</strong> ${facultyData.idNumber}</p>
                <p><strong>Email:</strong> ${facultyData.email}</p>
            </div>
            <div class="col-md-6">
                <p><strong>Branch:</strong> ${facultyData.branch}</p>
                <p><strong>Sections:</strong> ${facultyData.sections.join(', ')}</p>
                <p><strong>Subjects:</strong> ${facultyData.subjects.join(', ')}</p>
            </div>
        </div>
    `;
    
    // Show assigned forms if any
    const assignedFormsSection = document.getElementById('assignedFormsSection');
    const assignedFormsTableBody = document.getElementById('assignedFormsTableBody');
    
    if (facultyData.feedbackForms && facultyData.feedbackForms.length > 0) {
        assignedFormsTableBody.innerHTML = '';
        
        facultyData.feedbackForms.forEach(formId => {
            const formData = getFormById(formId);
            if (!formData) return;
            
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${formData.title}</td>
                <td>${formData.formType}</td>
                <td>
                    <span class="badge ${formData.status === 'active' ? 'bg-success' : 'bg-danger'}">
                        ${formData.status === 'active' ? 'Active' : 'Inactive'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-sm btn-danger" onclick="removeFormFromFaculty('${facultyId}', '${formId}')">
                        <i class="fas fa-times"></i>
                    </button>
                </td>
            `;
            
            assignedFormsTableBody.appendChild(row);
        });
        
        assignedFormsSection.style.display = 'block';
    } else {
        assignedFormsSection.style.display = 'none';
    }
    
    // Set faculty ID for edit button
    document.getElementById('editFacultyBtn').setAttribute('data-faculty-id', facultyId);
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('facultyDetailsModal'));
    modal.show();
}
    // Helper function to get faculty by ID from the rendered data
    function getFacultyById(facultyId) {
    const faculties = <%- JSON.stringify(faculties || []) %>;
    return faculties.find(faculty => faculty._id === facultyId);
    }

    // Helper function to get form by ID from the rendered data
    function getFormById(formId) {
    const forms = <%- JSON.stringify(forms || []) %>;
    return forms.find(form => form._id === formId);
    }

    // Prepare form assignment modal
    function prepareFormAssignment(facultyId) {
    const faculty = getFacultyById(facultyId);
    if (!faculty) return;
    
    document.getElementById('selectedFacultyId').value = facultyId;
    document.getElementById('selectedFacultyName').value = faculty.name;
    
    // Clear previous disabled states
    const formSelect = document.getElementById('formSelect');
    Array.from(formSelect.options).forEach(option => {
        option.disabled = false;
        option.text = option.text.replace(' (Already assigned)', '');
    });
    
    // Filter out already assigned forms
    if (faculty.feedbackForms && Array.isArray(faculty.feedbackForms)) {
        Array.from(formSelect.options).forEach(option => {
            if (option.value && faculty.feedbackForms.includes(option.value)) {
                option.disabled = true;
                option.text += ' (Already assigned)';
            }
        });
     }
    }

    // View all assigned forms for a faculty
    function viewAssignedForms(facultyId) {
        viewFacultyDetails(facultyId);
    }

    // Remove a form from a faculty
    function removeFormFromFaculty(facultyId, formId) {
        if (confirm('Are you sure you want to remove this form from the faculty?')) {
            console.log('Removing form', formId, 'from faculty', facultyId);
            
            // Create data to send in proper format
            const formData = new URLSearchParams();
            formData.append('facultyId', facultyId);
            formData.append('formId', formId);
            
            // Send AJAX request to remove form
            fetch('/admin/remove-form-from-faculty', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    alert('Form removed successfully');
                    // Refresh the page to show updated data
                    window.location.reload();
                } else {
                    alert('Error: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while removing the form');
            });
        }
    }

    // Handle form assignment
    document.getElementById('assignFormBtn').addEventListener('click', function() {
        const facultyId = document.getElementById('selectedFacultyId').value;
        const formId = document.getElementById('formSelect').value;
        
        if (!formId) {
            alert('Please select a form');
            return;
        }
        
        console.log('Assigning form', formId, 'to faculty', facultyId);
        
        // Create data to send in proper format
        const formData = new URLSearchParams();
        formData.append('facultyId', facultyId);
        formData.append('formId', formId);
        
        // Send AJAX request to assign form
        fetch('/admin/assign-form-to-faculty', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Form assigned successfully');
                // Close modal and refresh page
                const modal = bootstrap.Modal.getInstance(document.getElementById('assignFormModal'));
                modal.hide();
                window.location.reload();
            } else {
                alert('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while assigning the form');
        });
    });

    // Handle bulk form assignment
    document.getElementById('bulkAssignBtn').addEventListener('click', function() {
        const formId = document.getElementById('bulkFormSelect').value;
        const selectedFaculties = Array.from(document.querySelectorAll('.faculty-checkbox:checked')).map(cb => cb.value);
        
        if (!formId) {
            alert('Please select a form');
            return;
        }
        
        if (selectedFaculties.length === 0) {
            alert('Please select at least one faculty member');
            return;
        }
        
        console.log('Bulk assigning form', formId, 'to faculties', selectedFaculties);
        
        // Create data to send in proper format
        const formData = new URLSearchParams();
        formData.append('formId', formId);
        
        // Append each faculty ID
        selectedFaculties.forEach(facultyId => {
            formData.append('facultyIds[]', facultyId);
        });
        
        // Send AJAX request to bulk assign forms
        fetch('/admin/bulk-assign-forms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Forms assigned successfully to selected faculty members');
                // Close modal and refresh page
                const modal = bootstrap.Modal.getInstance(document.getElementById('bulkAssignModal'));
                modal.hide();
                window.location.reload();
            } else {
                alert('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while assigning forms');
        });
    });

    // Handle "Select All" checkbox
    document.getElementById('selectAllFaculty').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.faculty-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Handle branch filter
    document.getElementById('facultyBranchFilter').addEventListener('change', function() {
        const branch = this.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
            const branchCell = row.querySelector('td:nth-child(3)');
            if (!branchCell) return;
            
            if (branch === 'all' || branchCell.textContent.trim() === branch) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    // Edit faculty button handler
    document.getElementById('editFacultyBtn').addEventListener('click', function() {
        const facultyId = this.getAttribute('data-faculty-id');
        window.location.href = `/admin/edit-faculty/${facultyId}`;
    });


    // Form submission enhancement for edit form
    document.addEventListener('DOMContentLoaded', function() {
        const editFormElement = document.getElementById('editFormForm');
        
        if (editFormElement) {
            editFormElement.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Create FormData object from the form
                const formData = new FormData(this);
                const formId = this.getAttribute('data-form-id');
                
                // Process sections data to structure it properly
                const sections = [];
                
                // Find all section divs
                const sectionDivs = document.querySelectorAll('.form-section');
                sectionDivs.forEach((sectionDiv, sectionIndex) => {
                    const section = {
                        title: sectionDiv.querySelector('.section-title').value || '',
                        description: sectionDiv.querySelector('.section-description').value || '',
                        questions: []
                    };
                    
                    // Find all question divs in this section
                    const questionDivs = sectionDiv.querySelectorAll('.question-item');
                    questionDivs.forEach((questionDiv, questionIndex) => {
                        const questionType = questionDiv.querySelector('.question-type').value;
                        const question = {
                            questionText: questionDiv.querySelector('.question-text').value || '',
                            questionType: questionType,
                            required: questionDiv.querySelector('.question-required').checked
                        };
                        
                        // Handle question options based on type
                        if (['mcq', 'dropdown', 'rating', 'yes_no'].includes(questionType)) {
                            const optionsContainer = questionDiv.querySelector('.options-container');
                            if (optionsContainer) {
                                const optionInputs = optionsContainer.querySelectorAll('.option-input');
                                question.options = Array.from(optionInputs).map(input => input.value).filter(Boolean);
                            } else {
                                question.options = [];
                            }
                        } else if (questionType === 'grid') {
                            const rowsContainer = questionDiv.querySelector('.rows-container');
                            const columnsContainer = questionDiv.querySelector('.columns-container');
                            
                            question.gridOptions = {
                                rows: rowsContainer ? 
                                    Array.from(rowsContainer.querySelectorAll('.grid-row-input')).map(input => input.value).filter(Boolean) : [],
                                columns: columnsContainer ? 
                                    Array.from(columnsContainer.querySelectorAll('.grid-col-input')).map(input => input.value).filter(Boolean) : []
                            };
                        }
                        
                        section.questions.push(question);
                    });
                    
                    sections.push(section);
                });
                
                // Add sections to formData as a JSON string
                formData.append('sections', JSON.stringify(sections));
                
                // Get other form fields that might be arrays
                ['facultyAssigned', 'sectionsAssigned', 'semesters', 'subjects'].forEach(fieldName => {
                    // Remove the original field values that might be flattened
                    const originalValues = formData.getAll(fieldName);
                    if (originalValues.length > 0) {
                        // Clear existing values
                        for (let i = 0; i < originalValues.length; i++) {
                            formData.delete(fieldName);
                        }
                        
                        // Add each value with array notation for proper server processing
                        originalValues.forEach(value => {
                            if (value) {
                                formData.append(`${fieldName}[]`, value);
                            }
                        });
                    }
                });
                
                // Send the form data
                fetch(`/forms/${formId}/update`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                        return;
                    }
                    return response.text();
                })
                .then(data => {
                    if (data) {
                        try {
                            const result = JSON.parse(data);
                            if (result.success) {
                                alert('Form updated successfully');
                                window.location.href = '/admin/Total-Forms';
                            } else {
                                alert('Error: ' + (result.message || 'Unknown error'));
                            }
                        } catch (e) {
                            // If not JSON, it might be HTML from redirect
                            console.log('Form submitted, redirecting...');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the form');
                });
            });
        }
    });
    // faculty data excell download
    document.addEventListener('DOMContentLoaded', function () {
        const downloadBtn = document.getElementById('downloadExcelBtn');
        let isDownloading = false;

        downloadBtn.addEventListener('click', async function (event) {
            if (isDownloading) {
                event.preventDefault();
                return;
            }

            isDownloading = true;
            downloadBtn.disabled = true;
            downloadBtn.classList.add('disabled');

            const originalText = downloadBtn.textContent;
            downloadBtn.textContent = 'Downloading...';

            const branchFilter = document.getElementById('facultyBranchFilter').value;
            const url = `/admin/export-faculty-data?branch=${branchFilter}&t=${new Date().getTime()}`;

            try {
                const response = await fetch(url);

                if (!response.ok) throw new Error('Download failed');

                const blob = await response.blob();
                const contentDisposition = response.headers.get('Content-Disposition');
                const fileName = contentDisposition
                    ? contentDisposition.split('filename=')[1].replace(/["']/g, '')
                    : 'Faculty-Data.xlsx';

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                link.remove();

                showToast('success', 'Faculty data exported successfully!');
            } catch (err) {
                console.error(err);
                showToast('error', 'Failed to export faculty data. Please try again.');
            } finally {
                setTimeout(() => {
                    isDownloading = false;
                    downloadBtn.disabled = false;
                    downloadBtn.classList.remove('disabled');
                    downloadBtn.textContent = originalText;
                }, 1000);
            }
        });

        function showToast(type, message) {
            if (typeof Toastify === 'function') {
                Toastify({
                    text: message,
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "right",
                    backgroundColor: type === 'success' ? "#4CAF50" : "#F44336",
                }).showToast();
            } else {
                alert(message);
            }
        }

        // Filter faculty table rows by branch
        const branchFilter = document.getElementById('facultyBranchFilter');
        branchFilter.addEventListener('change', function () {
            const branch = this.value;
            filterFacultyTable(branch);
        });

        function filterFacultyTable(branch) {
            const rows = document.querySelectorAll('.table tbody tr');

            rows.forEach(row => {
                const branchCell = row.querySelector('td:nth-child(3)');

                if (branch === 'all' || branchCell.textContent.trim() === branch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
    });

</script>
</body>
</html>