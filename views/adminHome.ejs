<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/public/css/admin-css.css">
    <link rel="stylesheet" href="/public/scripts/admin-js.js">
    <link rel="shortcut icon" href="/images/android-chrome-192x192.png" type="image/x-icon">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.2/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #1cc88a;
            --third-color:rgb(88, 161, 88);
            --dark-color: #5a5c69;
            --light-color: #f8f9fc;
        }
        
        body {
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f8f9fc;
        }
        
        #wrapper {
            display: flex;
        }
        
        #content-wrapper {
            background-color: #f8f9fc;
            width: 100%;
            overflow-x: hidden;
            margin-left: 230px;
            transition: all 0.3s;
        }
        
        .navbar {
            background-color: #fff;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            position: relative;
            z-index: 1;
        }
        
        .card {
            border: none;
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            margin-bottom: 1.5rem;
        }
        
        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
            padding: 0.75rem 1.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-header h6 {
            font-weight: 700;
            margin-bottom: 0;
            color: var(--primary-color);
        }
        
        .dashboard-card {
            background-color: #fff;
            border-left: 0.25rem solid var(--primary-color);
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            margin-bottom: 1.5rem;
            padding: 1rem;
            position: relative;
            transition: transform 0.3s;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
        }
        
        .dashboard-card-blue {
            border-left-color: var(--primary-color);
        }
        
        .dashboard-card-green {
            border-left-color: var(--secondary-color);
        }
        
        .dashboard-card-yellow {
            border-left-color: #f6c23e;
        }
        
        .dashboard-card-red {
            border-left-color: #e74a3b;
        }
        
        .dashboard-card h4 {
            color: var(--dark-color);
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .dashboard-card .number {
            color: var(--dark-color);
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .dashboard-card .icon {
            position: absolute;
            top: 50%;
            right: 1.5rem;
            transform: translateY(-50%);
            color: rgba(0, 0, 0, 0.1);
            font-size: 2rem;
        }
        
        .custom-dropdown .dropdown-toggle::after {
            display: none;
        }
        
        @media (max-width: 768px) {
            #content-wrapper {
                margin-left: 0;
            }
        }
        
        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
            position: relative;
        }
        .table thead {
    position: sticky;
    top: 0;
    background: white; /* Background white rakho taki content overlap na ho */
    z-index: 10;
}
        
        .filter-section {
            background-color: #fff;
            border-radius: 0.35rem;
            padding: 1rem;
            margin-bottom: 1rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
        }
        
        .form-card {
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .form-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.15);
        }
        
        .badge-active {
            background-color: var(--secondary-color);
        }
        
        .badge-inactive {
            background-color: #e74a3b;
        }
        
        .badge-pending {
            background-color: #f6c23e;
        }
        .chart-container {
        height: 400px;
        width: 100%;
        max-width: 600px;
        margin: auto;
        padding: 30px;
        position: relative;
        }

        /* Responsive height for small screens */
        @media (max-width: 768px) {
        .chart-container {
            height: auto;
            min-height: 250px;
        }
        }

        @media (max-width: 768px) {
    .table-responsive {
        height: 300px !important; /* Enforce fixed height on mobile */
    }
    
    .table {
        font-size: 0.85rem; /* Slightly smaller font on mobile */
    }
    
    .btn-group .btn {
        padding: 0.25rem 0.4rem; /* Smaller buttons on mobile */
    }
    
    .card-header {
        padding: 0.75rem; /* Smaller padding on header for mobile */
    }
}
    </style>
</head>
<body>

<div id="wrapper">
    <!-- Sidebar -->
    <%- include('./partials/adminSideNavbar', { path: currentPath ,admin: adminData  }) %>
    <!-- Content Wrapper -->
    <div id="content-wrapper" class="d-flex flex-column">
        <!-- Main Content -->
        <div id="content">
            <!-- Topbar -->
              <%- include('partials/adminTopNavbar', { admin: adminData }) %>
            <!-- Begin Page Content -->
            <div class="container-fluid px-10 py-4">
                <!-- Content Row -->
                <div class="row">
                    <!-- Faculty Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-blue">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-primary text-uppercase mb-1">Faculty Members</h4>
                                        <div class="number mb-0"><%= faculties.length %></div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-chalkboard-teacher fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Students Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-green">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-success text-uppercase mb-1">
                                            Students
                                        </h4>
                                        <div class="number mb-0"><%= students.length %></div> <!-- Dynamic Total Count -->
                                    </div>
                                    
                                    <div class="col-auto">
                                        <i class="fas fa-user-graduate fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                    
                    <!-- Feedback Submitted Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-yellow">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-warning text-uppercase mb-1">
                                            Submitted Feedback
                                        </h4>
                                        <div class="number mb-0">200</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-clipboard-check fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                    
                    <!-- Pending Feedback Card -->
                    <div class="col-xl-3 col-md-6 mb-4">
                        <div class="dashboard-card dashboard-card-red">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h4 class="font-weight-bold text-danger text-uppercase mb-1">
                                            Pending Feedback
                                        </h4>
                                        <div class="number mb-0">22</div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Content Row -->
                <div class="row">
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow mb-4">
                            <div class="card-header py-4">
                                <h6 class="m-0 font-weight-bold text-primary">Create Feedback Forms</h6>
                            </div>
                            <div class="card-body py-16">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-book fa-3x mb-3 text-primary"></i>
                                                <h5>Academic</h5>
                                                <a href="/admin/adminHome/forms/create/Academic" class="btn btn-sm btn-primary mt-2 form-create-btn" data-form-type="academic">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-university fa-3x mb-3 text-success"></i>
                                                <h5>Institutional</h5>
                                                <a href="/admin/adminHome/forms/create/Institutional" class="btn btn-sm btn-success mt-2 form-create-btn" data-form-type="institutional">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="card form-card">
                                            <div class="card-body text-center">
                                                <i class="fas fa-laptop-code fa-3x mb-3 text-info"></i>
                                                <h5>Training</h5>
                                                <a href="/admin/adminHome/forms/create/Training" class="btn btn-sm btn-info mt-2 form-create-btn" data-form-type="training">Create</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Manage Forms Section -->
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                                <h6 class="m-0 font-weight-bold text-primary mb-2 mb-md-0">Manage Feedback Forms</h6>
                                <div class="input-group" style="width: 200px;">
                                    <select class="form-select form-select-sm" id="formStatusFilter">
                                        <option value="all">All Forms</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- Fixed height table container -->
                                <div class="table-responsive" style="height: 240px; overflow-y: auto;">
                                    <table class="table table-hover">
                                        <thead style="position: sticky; top: 0;">
                                            <tr>
                                                <th>Form Title</th>
                                                <th>Type</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if(forms && forms.length > 0) { %>
                                                <% forms.forEach(form => { %>
                                                    <tr>
                                                        <td><%= form.title %></td>
                                                        <td><%= form.formType %></td>
                                                        <td>
                                                            <% if(form.status === 'active') { %>
                                                                <span class="badge bg-success">Active</span>
                                                            <% } else if(form.status === 'closed') { %>
                                                                <span class="badge bg-danger">Inactive</span>
                                                            <% } %>
                                                        </td>
                                                        <td>
                                                            <div class="btn-group">
                                                                <button class="btn btn-sm btn-primary" onclick="editForm('<%= form._id %>')">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                
                                                                <% if(form.status === 'active') { %>
                                                                    <button class="btn btn-sm btn-danger" onclick="toggleFormStatus('<%= form._id %>', 'closed')">
                                                                        <i class="fas fa-power-off"></i>
                                                                    </button>
                                                                <% } else { %>
                                                                    <button class="btn btn-sm btn-success" onclick="toggleFormStatus('<%= form._id %>', 'active')">
                                                                        <i class="fas fa-power-off"></i>
                                                                    </button>
                                                                <% } %>
                                    
                                                                <button class="btn btn-sm btn-info" onclick="viewForm('<%= form._id %>')">
                                                                    <i class="fas fa-eye"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                <% }); %>
                                            <% } else { %>
                                                <tr>
                                                    <td colspan="4" class="text-center">No forms available</td>
                                                </tr>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="d-flex flex-column flex-md-row justify-content-between mt-3 gap-2">
                                    <a href="/admin/Total-Forms" class="btn btn-outline-secondary">View All Forms</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow mb-4 mx-10">
            <div class="card-header py-3 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                <h6 class="m-0 font-weight-bold text-primary mb-2 mb-md-0">Manage Faculty Members</h6>
                <div class="input-group" style="width: 200px;">
                    <select class="form-select form-select-sm" id="facultyBranchFilter">
                        <option value="all">All Branches</option>
                        <option value="IT">IT</option>
                        <option value="CSE">CSE</option>
                        <option value="ECE">ECE</option>
                        <option value="ME">ME</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                <!-- Fixed height table container -->
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-hover">
                        <thead style="position: sticky; top: 0; background: white; z-index: 10;">
                            <tr>
                                <th>Name</th>
                                <th>ID</th>
                                <th>Branch</th>
                                <th>Sections</th>
                                <th>Assigned Forms</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if(faculties && faculties.length > 0) { %>
                                <% faculties.forEach(faculty => { %>
                                    <tr>
                                        <td><%= faculty.name %></td>
                                        <td><%= faculty.idNumber %></td>
                                        <td><%= faculty.branch %></td>
                                        <td><%= faculty.sections.join(", ") %></td>
                                        <td>
                                            <% if(faculty.feedbackForms && faculty.feedbackForms.length > 0) { %>
                                                <span class="badge bg-info"><%= faculty.feedbackForms.length %> forms</span>
                                            <% } else { %>
                                                <span class="badge bg-secondary">No forms</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                
                                                <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#assignFormModal" onclick="prepareFormAssignment('<%= faculty._id %>')">
                                                    <i class="fas fa-clipboard-list"></i>
                                                </button>
                        
                                                <% if(faculty.feedbackForms && faculty.feedbackForms.length > 0) { %>
                                                    <button class="btn btn-sm btn-info" onclick="viewAssignedForms('<%= faculty._id %>')">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-secondary" disabled>
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                <% } %>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="6" class="text-center">No faculty members available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                <div class="d-flex flex-column flex-md-row justify-content-between mt-3 gap-2">
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#bulkAssignModal">
                        <i class="fas fa-clipboard-check me-1"></i> Bulk Assign Forms
                    </button>
                    <button id="downloadExcelBtn" class="btn btn-success">
                        <i class="fas fa-file-excel me-1"></i> Download Excel
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Faculty Details Modal -->
        <div class="modal fade" id="facultyDetailsModal" tabindex="-1" aria-labelledby="facultyDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="facultyDetailsModalLabel">Faculty Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="facultyDetailsContent">
                            <!-- Faculty details will be loaded here dynamically -->
                        </div>
                        
                        <div class="mt-4" id="assignedFormsSection" style="display: none;">
                            <h6 class="font-weight-bold">Assigned Feedback Forms</h6>
                            <div class="table-responsive mt-2">
                                <table class="table table-sm table-bordered" id="assignedFormsTable">
                                    <thead>
                                        <tr>
                                            <th>Form Title</th>
                                            <th>Type</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="assignedFormsTableBody">
                                        <!-- Assigned forms will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="editFacultyBtn">Edit Details</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Assign Form Modal -->
        <div class="modal fade" id="assignFormModal" tabindex="-1" aria-labelledby="assignFormModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="assignFormModalLabel">Assign Feedback Form</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="assignFormForm">
                            <input type="hidden" id="selectedFacultyId" name="facultyId">
                            
                            <div class="mb-3">
                                <label class="form-label">Faculty</label>
                                <input type="text" class="form-control" id="selectedFacultyName" readonly>
                            </div>
                            
                            <div class="mb-3">
                                <label for="formSelect" class="form-label">Select Feedback Form</label>
                                <select class="form-select" id="formSelect" name="formId" required>
                                    <option value="">Choose a form...</option>
                                    <% if(forms && forms.length > 0) { %>
                                        <% forms.forEach(form => { %>
                                            <% if(form.status === 'active') { %>
                                                <option value="<%= form._id %>"><%= form.title %> (<%= form.formType %>)</option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="assignFormBtn">Assign</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Bulk Assign Modal -->
        <div class="modal fade" id="bulkAssignModal" tabindex="-1" aria-labelledby="bulkAssignModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="bulkAssignModalLabel">Bulk Assign Forms</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="bulkAssignForm">
                            <div class="mb-3">
                                <label for="bulkFormSelect" class="form-label">Select Feedback Form</label>
                                <select class="form-select" id="bulkFormSelect" name="formId" required>
                                    <option value="">Choose a form...</option>
                                    <% if(forms && forms.length > 0) { %>
                                        <% forms.forEach(form => { %>
                                            <% if(form.status === 'active') { %>
                                                <option value="<%= form._id %>"><%= form.title %> (<%= form.formType %>)</option>
                                            <% } %>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Select Faculty Members</label>
                                <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="selectAllFaculty">
                                                        <label class="form-check-label" for="selectAllFaculty">All</label>
                                                    </div>
                                                </th>
                                                <th>Name</th>
                                                <th>ID</th>
                                                <th>Branch</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if(faculties && faculties.length > 0) { %>
                                                <% faculties.forEach(faculty => { %>
                                                    <tr>
                                                        <td>
                                                            <div class="form-check">
                                                                <input class="form-check-input faculty-checkbox" type="checkbox" value="<%= faculty._id %>" name="selectedFaculties">
                                                            </div>
                                                        </td>
                                                        <td><%= faculty.name %></td>
                                                        <td><%= faculty.idNumber %></td>
                                                        <td><%= faculty.branch %></td>
                                                    </tr>
                                                <% }); %>
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="bulkAssignBtn">Assign to Selected</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Data Visualization -->
       <div class="mt-4 mb-6 px-10">
           <div class="flex space-x-1 bg-gray-100 p-1 rounded-xl">
             <a href="/admin/adminHome?formType=Academic<%= subjectFilter ? '&subject=' + subjectFilter : '' %>" 
               class="flex-1 text-center py-2 px-4 rounded-lg <%= feedbackData.responseMetadata.currentFormType === 'Academic' ? 'bg-white shadow' : 'hover:bg-gray-200' %>">
               Academic Feedback
             </a>
             <a href="/admin/adminHome?formType=Institutional<%= subjectFilter ? '&subject=' + subjectFilter : '' %>" 
               class="flex-1 text-center py-2 px-4 rounded-lg <%= feedbackData.responseMetadata.currentFormType === 'Institutional' ? 'bg-white shadow' : 'hover:bg-gray-200' %>">
               Institutional Feedback
             </a>
             <a href="/admin/adminHome?formType=Training<%= subjectFilter ? '&subject=' + subjectFilter : '' %>" 
               class="flex-1 text-center py-2 px-4 rounded-lg <%= feedbackData.responseMetadata.currentFormType === 'Training' ? 'bg-white shadow' : 'hover:bg-gray-200' %>">
               Training Feedback
             </a>
           </div>
         </div>
         
         <main class="flex-1 overflow-y-auto pb-4 px-10">
           <div class="mb-6 md:mb-8">
               <h1 class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-800 text-center mt-4 md:mt-6">
                   <%= feedbackData.responseMetadata.currentFormType.toUpperCase() %> FEEDBACK VISUALIZATION
               </h1>
               <p class="text-center text-gray-600 mt-2" id="dataInfo">
                   <span id="currentFilter"><%= subjectFilter || 'All Subjects' %></span> | 
                   <span id="responseCount"><%= feedbackData.responseMetadata.totalResponses %> Responses</span>
               </p>
           </div>
           
           <!-- Faculty Selector (for Academic feedback) -->
           <% if (feedbackData.responseMetadata.currentFormType === 'Academic') { %>
           <div class="mb-6">
               <label for="facultySelect" class="block text-sm font-medium text-gray-700 mb-1">Select Faculty:</label>
               <select id="facultySelect" class="border border-gray-300 rounded-md p-2 w-full md:w-1/2 lg:w-1/3">
                   <option value="">All Faculty</option>
                   <% faculties.forEach(faculty => { %>
                       <option value="<%= faculty._id %>" <%= selectedFaculty === faculty._id.toString() ? 'selected' : '' %>><%= faculty.name %> (<%= faculty.subjects.join(', ') %>)</option>
                   <% }); %>
               </select>
           </div>
           <% } %>
           
           <!-- Charts Grid -->
           <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4 md:gap-6 lg:gap-8">
               <% if (feedbackData.responseMetadata.currentFormType === 'Academic') { %>
                   <!-- Academic Feedback Charts -->
                   <% if (Object.keys(feedbackData.sectionData).includes('Teacher Effectiveness')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Teacher Effectiveness</h3>
                       <canvas id="teacherEffectivenessChart" 
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Teacher Effectiveness'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Teacher Effectiveness'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Student Learning Experience')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Student Learning Experience</h3>
                       <canvas id="studentExperienceChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Student Learning Experience'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Student Learning Experience'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Exams and Evaluation')) { %>
                   <div class="chart-container chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Exams and Evaluation</h3>
                       <canvas id="examsEvaluationChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Exams and Evaluation'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Exams and Evaluation'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Overall Satisfaction')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Overall Satisfaction</h3>
                       <canvas id="overallSatisfactionChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Overall Satisfaction'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Overall Satisfaction'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
               <% } else if (feedbackData.responseMetadata.currentFormType === 'Institutional') { %>
                   <!-- Institutional Feedback Charts -->
                   <% if (Object.keys(feedbackData.sectionData).includes('Resources and Administration')) { %>
                   <div class="chart-container  bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Resources and Administration</h3>
                       <canvas id="resourcesAdminChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Resources and Administration'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Resources and Administration'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Curriculum Aspects')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Curriculum Aspects</h3>
                       <canvas id="curriculumAspectsChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Curriculum Aspects'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Curriculum Aspects'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Administrative Services')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Administrative Services</h3>
                       <canvas id="adminServicesChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Administrative Services'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Administrative Services'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Student Support')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Student Support</h3>
                       <canvas id="studentSupportChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Student Support'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Student Support'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Technology Resources')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Technology Resources</h3>
                       <canvas id="techResourcesChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Technology Resources'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Technology Resources'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Campus Life')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Campus Life</h3>
                       <canvas id="campusLifeChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Campus Life'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Campus Life'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
               <% } else if (feedbackData.responseMetadata.currentFormType === 'Training') { %>
                   <!-- Training Feedback Charts -->
                   <% if (Object.keys(feedbackData.sectionData).includes('Training Content')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Training Content</h3>
                       <canvas id="trainingContentChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Training Content'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Training Content'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Trainer Effectiveness')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Trainer Effectiveness</h3>
                       <canvas id="trainerEffectivenessChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Trainer Effectiveness'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Trainer Effectiveness'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Training Materials')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Training Materials</h3>
                       <canvas id="trainingMaterialsChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Training Materials'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Training Materials'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Workshop Facilities')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Workshop Facilities</h3>
                       <canvas id="workshopFacilitiesChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Workshop Facilities'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Workshop Facilities'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Practical Application')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Practical Application</h3>
                       <canvas id="practicalApplicationChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Practical Application'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Practical Application'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
                   
                   <% if (Object.keys(feedbackData.sectionData).includes('Overall Value')) { %>
                   <div class="chart-container bg-white p-3 md:p-5 rounded shadow">
                       <h3 class="text-base md:text-lg font-semibold mb-2 md:mb-4">Overall Value</h3>
                       <canvas id="overallValueChart"
                           data-labels="<%= JSON.stringify(feedbackData.sectionData['Overall Value'].labels) %>"
                           data-values="<%= JSON.stringify(feedbackData.sectionData['Overall Value'].values) %>">
                       </canvas>
                   </div>
                   <% } %>
               <% } %>
           </div>
           
           <!-- Summary Section -->
           <div class="mt-8 bg-white p-4 rounded shadow">
               <h3 class="text-lg font-semibold mb-3">Overall Averages by Section</h3>
               <div class="overflow-x-auto">
                   <table class="min-w-full divide-y divide-gray-200">
                       <thead class="bg-gray-50">
                           <tr>
                               <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Section</th>
                               <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Average Score</th>
                           </tr>
                       </thead>
                       <tbody class="bg-white divide-y divide-gray-200">
                           <% feedbackData.sectionAverages.forEach(section => { %>
                           <tr>
                               <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"><%= section.sectionTitle %></td>
                               <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                   <div class="flex items-center">
                                       <span class="mr-2"><%= section.averageScore.toFixed(2) %></span>
                                       <div class="w-32 bg-gray-200 rounded-full h-2.5">
                                           <div class="bg-blue-600 h-2.5 rounded-full" style="width: <%= (section.averageScore/5)*100 %>%"></div>
                                       </div>
                                   </div>
                               </td>
                           </tr>
                           <% }); %>
                       </tbody>
                   </table>
               </div>
           </div>
           
           <!-- Metadata display -->
           <div class="mt-8 bg-white p-4 rounded shadow">
               <h3 class="text-lg font-semibold mb-3">Feedback Information</h3>
               <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                   <div class="bg-gray-50 p-3 rounded">
                       <p class="text-sm text-gray-500">Form Type</p>
                       <p class="font-medium" id="formType"><%= feedbackData.responseMetadata.currentFormType %></p>
                   </div>
                   <div class="bg-gray-50 p-3 rounded">
                       <p class="text-sm text-gray-500">Responses</p>
                       <p class="font-medium" id="responseCount"><%= feedbackData.responseMetadata.totalResponses %></p>
                   </div>
                   <div class="bg-gray-50 p-3 rounded">
                       <p class="text-sm text-gray-500">Last Updated</p>
                       <p class="font-medium" id="lastUpdated"><%= feedbackData.responseMetadata.lastUpdated.toLocaleString() %></p>
                   </div>
               </div>
           </div>
           
           <div class="flex justify-center mt-6 md:mt-8 lg:mt-10">
               <button id="downloadExcel"
                   class="bg-green-300 hover:bg-green-200 text-green-800 font-semibold py-2 md:py-3 px-4 md:px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg flex items-center justify-center space-x-2">
                   <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                       stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                       class="lucide lucide-download">
                       <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                       <polyline points="7 10 12 15 17 10"></polyline>
                       <line x1="12" x2="12" y1="15" y2="3"></line>
                   </svg>
                   <span>Download Feedback Data</span>
               </button>
           </div>
       </main>

        <!-- Footer -->
        <%- include('partials/adminBottomNavbar') %>
        <!-- End of Footer -->
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<!-- Bootstrap core JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<!-- Custom scripts -->
<script>
   
     // Form status filter functionality
     document.getElementById('formStatusFilter').addEventListener('change', function() {
        const status = this.value;
        const rows = document.querySelectorAll('.table tbody tr');
        
        rows.forEach(row => {
            if (status === 'all') {
                row.style.display = '';
            } else {
                const badgeText = row.querySelector('.badge').textContent.toLowerCase();
                if (badgeText === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            }
        });
    });
    // Function to edit form
    function editForm(formId) {
        window.location.href = `/admin/forms/${formId}/edit`;
    }
    // Function to toggle form status
    async function toggleFormStatus(formId, newStatus) {
        try {
            const response = await fetch(`/admin/forms/updateStatus/${formId}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ status: newStatus })
            });

            const result = await response.json();
            if (result.success) {
                alert(`Form status updated to ${newStatus}`);
                location.reload(); // Refresh to show updated status
            } else {
                alert("Failed to update form status");
            }
        } catch (error) {
            console.error("Error updating form status:", error);
        }
    }
    // Function to view form
    function viewForm(formId) {
        window.location.href = `/admin/forms/view/${formId}`;
    }
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle sidebar
        const toggleSidebar = document.querySelector('.toggle-sidebar');
        const sidebar = document.querySelector('.sidebar');
        const contentWrapper = document.querySelector('#content-wrapper');
        
        if (toggleSidebar) {
            toggleSidebar.addEventListener('click', function() {
                sidebar.classList.toggle('toggled');
                contentWrapper.classList.toggle('toggled');
            });
        }
        
        // Dropdown functionality
        const dropdowns = document.querySelectorAll('.dropdown-toggle');
        dropdowns.forEach(dropdown => {
            new bootstrap.Dropdown(dropdown);
        });
    });

        document.addEventListener('DOMContentLoaded', function() {
            const formType = document.getElementById('formType').textContent.trim();
            
            // Set common chart options with improved animation settings
            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 5
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                },
                animation: {
                    duration: 800,  // Shorter animation duration
                    easing: 'easeOutQuad',  // Smoother easing function
                    mode: 'fade'  // Fade in instead of growing from bottom
                }
            };
            
            // Create charts based on form type
            if (formType === 'Academic') {
                createAcademicCharts();
            } else if (formType === 'Institutional') {
                createInstitutionalCharts();
            } else if (formType === 'Training') {
                createTrainingCharts();
            }
            
            // Faculty selector for Academic feedback
            if (formType === 'Academic') {
                const facultySelect = document.getElementById('facultySelect');
                if (facultySelect) {
                    facultySelect.addEventListener('change', function() {
                        // Add AJAX call to filter data by faculty
                        const facultyId = this.value;
                        window.location.href = `/admin/adminHome?formType=Academic&faculty=${facultyId}`;
                    });
                }
            }
            
            // Download Excel button
            const downloadBtn = document.getElementById('downloadExcel');
            if (downloadBtn) {
                downloadBtn.addEventListener('click', function() {
                    window.location.href = `/feedback/download/${formType.toLowerCase()}`;
                });
            }
            
            // Function to get data from canvas attributes
            function getChartData(chartId) {
                const canvas = document.getElementById(chartId);
                if (!canvas) return null;
                
                try {
                    const labels = JSON.parse(canvas.getAttribute('data-labels') || '[]');
                    const values = JSON.parse(canvas.getAttribute('data-values') || '[]');
                    
                    return { labels, values };
                } catch (e) {
                    console.error(`Error parsing data for ${chartId}:`, e);
                    return { labels: [], values: [] };
                }
            }
            
            // Function to create Academic charts
            function createAcademicCharts() {
                // Teacher Effectiveness Chart
                if (document.getElementById('teacherEffectivenessChart')) {
                    const chartData = getChartData('teacherEffectivenessChart');
                    if (chartData) {
                        new Chart(document.getElementById('teacherEffectivenessChart'), {
                            type: 'bar',
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    label: 'Average Rating (1-5)',
                                    data: chartData.values,
                                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1
                                }]
                            },
                            options: chartOptions
                        });
                    }
                }
                
                // Student Learning Experience Chart
                if (document.getElementById('studentExperienceChart')) {
                    const chartData = getChartData('studentExperienceChart');
                    if (chartData) {
                        new Chart(document.getElementById('studentExperienceChart'), {
                            type: 'radar',
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    label: 'Average Rating (1-5)',
                                    data: chartData.values,
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                    borderColor: 'rgba(255, 99, 132, 1)',
                                    borderWidth: 1,
                                    pointBackgroundColor: 'rgba(255, 99, 132, 1)'
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    r: {
                                        min: 0,
                                        max: 5,
                                        ticks: {
                                            stepSize: 1
                                        }
                                    }
                                },
                                animation: {
                                    duration: 500,
                                    easing: 'linear'
                                }
                            }
                        });
                    }
                }
                
                // Exams and Evaluation Chart
                if (document.getElementById('examsEvaluationChart')) {
                    const chartData = getChartData('examsEvaluationChart');
                    if (chartData) {
                        new Chart(document.getElementById('examsEvaluationChart'), {
                            type: 'bar',
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    label: 'Average Rating (1-5)',
                                    data: chartData.values,
                                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    borderWidth: 1
                                }]
                            },
                            options: chartOptions
                        });
                    }
                }
                
                // Overall Satisfaction Chart
                if (document.getElementById('overallSatisfactionChart')) {
                    const chartData = getChartData('overallSatisfactionChart');
                    if (chartData) {
                        // For pie/doughnut charts, we need labels and count data
                        // If values are average scores, we format appropriately
                        
                        let displayData = chartData.values;
                        // If we have a response distribution for satisfaction levels
                        if (chartData.labels.some(label => ['Very Satisfied', 'Satisfied', 'Neutral', 'Dissatisfied', 'Very Dissatisfied'].includes(label))) {
                            displayData = chartData.values; // Keep as is - these are counts
                        } else {
                            // If we just have question averages, adapt the display
                            displayData = chartData.values;
                        }
                        
                        new Chart(document.getElementById('overallSatisfactionChart'), {
                            type: 'doughnut',
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    data: displayData,
                                    backgroundColor: [
                                        'rgba(75, 192, 192, 0.6)',
                                        'rgba(54, 162, 235, 0.6)',
                                        'rgba(255, 206, 86, 0.6)',
                                        'rgba(255, 159, 64, 0.6)',
                                        'rgba(255, 99, 132, 0.6)'
                                    ],
                                    borderColor: [
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(255, 159, 64, 1)',
                                        'rgba(255, 99, 132, 1)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'bottom'
                                    }
                                },
                                animation: {
                                    animateRotate: true,
                                    animateScale: false,
                                    duration: 500,
                                    easing: 'easeOutCirc'
                                }
                            }
                        });
                    }
                }
            }
            
            // Function to create Institutional charts
            function createInstitutionalCharts() {
                // Resources and Administration Chart
                renderDynamicChart('resourcesAdminChart', 'bar', 'rgba(153, 102, 255, 0.6)', 'rgba(153, 102, 255, 1)');
                
                // Curriculum Aspects Chart
                if (document.getElementById('curriculumAspectsChart')) {
                    const chartData = getChartData('curriculumAspectsChart');
                    if (chartData) {
                        new Chart(document.getElementById('curriculumAspectsChart'), {
                            type: 'radar',
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    label: 'Average Rating (1-5)',
                                    data: chartData.values,
                                    backgroundColor: 'rgba(255, 159, 64, 0.2)',
                                    borderColor: 'rgba(255, 159, 64, 1)',
                                    borderWidth: 1,
                                    pointBackgroundColor: 'rgba(255, 159, 64, 1)'
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    r: {
                                        min: 0,
                                        max: 5,
                                        ticks: {
                                            stepSize: 1
                                        }
                                    }
                                },
                                animation: {
                                    duration: 500,
                                    easing: 'linear'
                                }
                            }
                        });
                    }
                }
                
                // Render other charts
                renderDynamicChart('adminServicesChart', 'bar', 'rgba(54, 162, 235, 0.6)', 'rgba(54, 162, 235, 1)');
                renderDynamicChart('studentSupportChart', 'bar', 'rgba(75, 192, 192, 0.6)', 'rgba(75, 192, 192, 1)');
                renderDynamicChart('techResourcesChart', 'bar', 'rgba(153, 102, 255, 0.6)', 'rgba(153, 102, 255, 1)');
                renderDynamicChart('campusLifeChart', 'bar', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 159, 64, 1)');
            }
            
            // Function to create Training charts
            function createTrainingCharts() {
                renderDynamicChart('trainingContentChart', 'bar', 'rgba(54, 162, 235, 0.6)', 'rgba(54, 162, 235, 1)');
                renderDynamicChart('trainerEffectivenessChart', 'bar', 'rgba(75, 192, 192, 0.6)', 'rgba(75, 192, 192, 1)');
                renderDynamicChart('trainingMaterialsChart', 'bar', 'rgba(153, 102, 255, 0.6)', 'rgba(153, 102, 255, 1)');
                renderDynamicChart('workshopFacilitiesChart', 'bar', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 159, 64, 1)');
                renderDynamicChart('practicalApplicationChart', 'bar', 'rgba(255, 99, 132, 0.6)', 'rgba(255, 99, 132, 1)');
                renderDynamicChart('overallValueChart', 'bar', 'rgba(0, 128, 128, 0.6)', 'rgba(0, 128, 128, 1)');
            }
            
            // Helper function to render dynamic charts
            function renderDynamicChart(chartId, chartType, bgColor, borderColor) {
                const chartElement = document.getElementById(chartId);
                if (chartElement) {
                    const chartData = getChartData(chartId);
                    if (chartData) {
                        new Chart(chartElement, {
                            type: chartType,
                            data: {
                                labels: chartData.labels,
                                datasets: [{
                                    label: 'Average Rating (1-5)',
                                    data: chartData.values,
                                    backgroundColor: bgColor,
                                    borderColor: borderColor,
                                    borderWidth: 1
                                }]
                            },
                            options: chartOptions
                        });
                    }
                }
            }
        });
    // faculty management script
    // View faculty details with their assigned forms
    function viewFacultyDetails(facultyId) {
    const facultyData = getFacultyById(facultyId);
    if (!facultyData) return;
    
    // Populate faculty details
    const detailsContent = document.getElementById('facultyDetailsContent');
    detailsContent.innerHTML = `
        <div class="row mb-3">
            <div class="col-md-6">
                <p><strong>Name:</strong> ${facultyData.name}</p>
                <p><strong>ID Number:</strong> ${facultyData.idNumber}</p>
                <p><strong>Email:</strong> ${facultyData.email}</p>
            </div>
            <div class="col-md-6">
                <p><strong>Branch:</strong> ${facultyData.branch}</p>
                <p><strong>Sections:</strong> ${facultyData.sections.join(', ')}</p>
                <p><strong>Subjects:</strong> ${facultyData.subjects.join(', ')}</p>
            </div>
        </div>
    `;
    
    // Show assigned forms if any
    const assignedFormsSection = document.getElementById('assignedFormsSection');
    const assignedFormsTableBody = document.getElementById('assignedFormsTableBody');
    
    if (facultyData.feedbackForms && facultyData.feedbackForms.length > 0) {
        assignedFormsTableBody.innerHTML = '';
        
        facultyData.feedbackForms.forEach(formId => {
            const formData = getFormById(formId);
            if (!formData) return;
            
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${formData.title}</td>
                <td>${formData.formType}</td>
                <td>
                    <span class="badge ${formData.status === 'active' ? 'bg-success' : 'bg-danger'}">
                        ${formData.status === 'active' ? 'Active' : 'Inactive'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-sm btn-danger" onclick="removeFormFromFaculty('${facultyId}', '${formId}')">
                        <i class="fas fa-times"></i>
                    </button>
                </td>
            `;
            
            assignedFormsTableBody.appendChild(row);
        });
        
        assignedFormsSection.style.display = 'block';
    } else {
        assignedFormsSection.style.display = 'none';
    }
    
    // Set faculty ID for edit button
    document.getElementById('editFacultyBtn').setAttribute('data-faculty-id', facultyId);
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('facultyDetailsModal'));
    modal.show();
}
    // Helper function to get faculty by ID from the rendered data
    function getFacultyById(facultyId) {
    const faculties = <%- JSON.stringify(faculties || []) %>;
    return faculties.find(faculty => faculty._id === facultyId);
    }

    // Helper function to get form by ID from the rendered data
    function getFormById(formId) {
    const forms = <%- JSON.stringify(forms || []) %>;
    return forms.find(form => form._id === formId);
    }

    // Prepare form assignment modal
    function prepareFormAssignment(facultyId) {
    const faculty = getFacultyById(facultyId);
    if (!faculty) return;
    
    document.getElementById('selectedFacultyId').value = facultyId;
    document.getElementById('selectedFacultyName').value = faculty.name;
    
    // Clear previous disabled states
    const formSelect = document.getElementById('formSelect');
    Array.from(formSelect.options).forEach(option => {
        option.disabled = false;
        option.text = option.text.replace(' (Already assigned)', '');
    });
    
    // Filter out already assigned forms
    if (faculty.feedbackForms && Array.isArray(faculty.feedbackForms)) {
        Array.from(formSelect.options).forEach(option => {
            if (option.value && faculty.feedbackForms.includes(option.value)) {
                option.disabled = true;
                option.text += ' (Already assigned)';
            }
        });
     }
    }

    // View all assigned forms for a faculty
    function viewAssignedForms(facultyId) {
        viewFacultyDetails(facultyId);
    }

    // Remove a form from a faculty
    function removeFormFromFaculty(facultyId, formId) {
        if (confirm('Are you sure you want to remove this form from the faculty?')) {
            console.log('Removing form', formId, 'from faculty', facultyId);
            
            // Create data to send in proper format
            const formData = new URLSearchParams();
            formData.append('facultyId', facultyId);
            formData.append('formId', formId);
            
            // Send AJAX request to remove form
            fetch('/admin/remove-form-from-faculty', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    alert('Form removed successfully');
                    // Refresh the page to show updated data
                    window.location.reload();
                } else {
                    alert('Error: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while removing the form');
            });
        }
    }

    // Handle form assignment
    document.getElementById('assignFormBtn').addEventListener('click', function() {
        const facultyId = document.getElementById('selectedFacultyId').value;
        const formId = document.getElementById('formSelect').value;
        
        if (!formId) {
            alert('Please select a form');
            return;
        }
        
        console.log('Assigning form', formId, 'to faculty', facultyId);
        
        // Create data to send in proper format
        const formData = new URLSearchParams();
        formData.append('facultyId', facultyId);
        formData.append('formId', formId);
        
        // Send AJAX request to assign form
        fetch('/admin/assign-form-to-faculty', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Form assigned successfully');
                // Close modal and refresh page
                const modal = bootstrap.Modal.getInstance(document.getElementById('assignFormModal'));
                modal.hide();
                window.location.reload();
            } else {
                alert('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while assigning the form');
        });
    });

    // Handle bulk form assignment
    document.getElementById('bulkAssignBtn').addEventListener('click', function() {
        const formId = document.getElementById('bulkFormSelect').value;
        const selectedFaculties = Array.from(document.querySelectorAll('.faculty-checkbox:checked')).map(cb => cb.value);
        
        if (!formId) {
            alert('Please select a form');
            return;
        }
        
        if (selectedFaculties.length === 0) {
            alert('Please select at least one faculty member');
            return;
        }
        
        console.log('Bulk assigning form', formId, 'to faculties', selectedFaculties);
        
        // Create data to send in proper format
        const formData = new URLSearchParams();
        formData.append('formId', formId);
        
        // Append each faculty ID
        selectedFaculties.forEach(facultyId => {
            formData.append('facultyIds[]', facultyId);
        });
        
        // Send AJAX request to bulk assign forms
        fetch('/admin/bulk-assign-forms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Forms assigned successfully to selected faculty members');
                // Close modal and refresh page
                const modal = bootstrap.Modal.getInstance(document.getElementById('bulkAssignModal'));
                modal.hide();
                window.location.reload();
            } else {
                alert('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while assigning forms');
        });
    });

    // Handle "Select All" checkbox
    document.getElementById('selectAllFaculty').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.faculty-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Handle branch filter
    document.getElementById('facultyBranchFilter').addEventListener('change', function() {
        const branch = this.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
            const branchCell = row.querySelector('td:nth-child(3)');
            if (!branchCell) return;
            
            if (branch === 'all' || branchCell.textContent.trim() === branch) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    // Edit faculty button handler
    document.getElementById('editFacultyBtn').addEventListener('click', function() {
        const facultyId = this.getAttribute('data-faculty-id');
        window.location.href = `/admin/edit-faculty/${facultyId}`;
    });


    // Form submission enhancement for edit form
    document.addEventListener('DOMContentLoaded', function() {
        const editFormElement = document.getElementById('editFormForm');
        
        if (editFormElement) {
            editFormElement.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Create FormData object from the form
                const formData = new FormData(this);
                const formId = this.getAttribute('data-form-id');
                
                // Process sections data to structure it properly
                const sections = [];
                
                // Find all section divs
                const sectionDivs = document.querySelectorAll('.form-section');
                sectionDivs.forEach((sectionDiv, sectionIndex) => {
                    const section = {
                        title: sectionDiv.querySelector('.section-title').value || '',
                        description: sectionDiv.querySelector('.section-description').value || '',
                        questions: []
                    };
                    
                    // Find all question divs in this section
                    const questionDivs = sectionDiv.querySelectorAll('.question-item');
                    questionDivs.forEach((questionDiv, questionIndex) => {
                        const questionType = questionDiv.querySelector('.question-type').value;
                        const question = {
                            questionText: questionDiv.querySelector('.question-text').value || '',
                            questionType: questionType,
                            required: questionDiv.querySelector('.question-required').checked
                        };
                        
                        // Handle question options based on type
                        if (['mcq', 'dropdown', 'rating', 'yes_no'].includes(questionType)) {
                            const optionsContainer = questionDiv.querySelector('.options-container');
                            if (optionsContainer) {
                                const optionInputs = optionsContainer.querySelectorAll('.option-input');
                                question.options = Array.from(optionInputs).map(input => input.value).filter(Boolean);
                            } else {
                                question.options = [];
                            }
                        } else if (questionType === 'grid') {
                            const rowsContainer = questionDiv.querySelector('.rows-container');
                            const columnsContainer = questionDiv.querySelector('.columns-container');
                            
                            question.gridOptions = {
                                rows: rowsContainer ? 
                                    Array.from(rowsContainer.querySelectorAll('.grid-row-input')).map(input => input.value).filter(Boolean) : [],
                                columns: columnsContainer ? 
                                    Array.from(columnsContainer.querySelectorAll('.grid-col-input')).map(input => input.value).filter(Boolean) : []
                            };
                        }
                        
                        section.questions.push(question);
                    });
                    
                    sections.push(section);
                });
                
                // Add sections to formData as a JSON string
                formData.append('sections', JSON.stringify(sections));
                
                // Get other form fields that might be arrays
                ['facultyAssigned', 'sectionsAssigned', 'semesters', 'subjects'].forEach(fieldName => {
                    // Remove the original field values that might be flattened
                    const originalValues = formData.getAll(fieldName);
                    if (originalValues.length > 0) {
                        // Clear existing values
                        for (let i = 0; i < originalValues.length; i++) {
                            formData.delete(fieldName);
                        }
                        
                        // Add each value with array notation for proper server processing
                        originalValues.forEach(value => {
                            if (value) {
                                formData.append(`${fieldName}[]`, value);
                            }
                        });
                    }
                });
                
                // Send the form data
                fetch(`/forms/${formId}/update`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                        return;
                    }
                    return response.text();
                })
                .then(data => {
                    if (data) {
                        try {
                            const result = JSON.parse(data);
                            if (result.success) {
                                alert('Form updated successfully');
                                window.location.href = '/admin/Total-Forms';
                            } else {
                                alert('Error: ' + (result.message || 'Unknown error'));
                            }
                        } catch (e) {
                            // If not JSON, it might be HTML from redirect
                            console.log('Form submitted, redirecting...');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the form');
                });
            });
        }
    });
    // faculty data excell download
    document.addEventListener('DOMContentLoaded', function () {
        const downloadBtn = document.getElementById('downloadExcelBtn');
        let isDownloading = false;

        downloadBtn.addEventListener('click', async function (event) {
            if (isDownloading) {
                event.preventDefault();
                return;
            }

            isDownloading = true;
            downloadBtn.disabled = true;
            downloadBtn.classList.add('disabled');

            const originalText = downloadBtn.textContent;
            downloadBtn.textContent = 'Downloading...';

            const branchFilter = document.getElementById('facultyBranchFilter').value;
            const url = `/admin/export-faculty-data?branch=${branchFilter}&t=${new Date().getTime()}`;

            try {
                const response = await fetch(url);

                if (!response.ok) throw new Error('Download failed');

                const blob = await response.blob();
                const contentDisposition = response.headers.get('Content-Disposition');
                const fileName = contentDisposition
                    ? contentDisposition.split('filename=')[1].replace(/["']/g, '')
                    : 'Faculty-Data.xlsx';

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                link.remove();

                showToast('success', 'Faculty data exported successfully!');
            } catch (err) {
                console.error(err);
                showToast('error', 'Failed to export faculty data. Please try again.');
            } finally {
                setTimeout(() => {
                    isDownloading = false;
                    downloadBtn.disabled = false;
                    downloadBtn.classList.remove('disabled');
                    downloadBtn.textContent = originalText;
                }, 1000);
            }
        });

        function showToast(type, message) {
            if (typeof Toastify === 'function') {
                Toastify({
                    text: message,
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "right",
                    backgroundColor: type === 'success' ? "#4CAF50" : "#F44336",
                }).showToast();
            } else {
                alert(message);
            }
        }

        // Filter faculty table rows by branch
        const branchFilter = document.getElementById('facultyBranchFilter');
        branchFilter.addEventListener('change', function () {
            const branch = this.value;
            filterFacultyTable(branch);
        });

        function filterFacultyTable(branch) {
            const rows = document.querySelectorAll('.table tbody tr');

            rows.forEach(row => {
                const branchCell = row.querySelector('td:nth-child(3)');

                if (branch === 'all' || branchCell.textContent.trim() === branch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
    });

</script>
</body>
</html>