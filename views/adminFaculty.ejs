<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Faculty Management Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --success-color: #4cc9f0;
        --warning-color: #f72585;
        --light-bg: #f8f9fa;
        --dark-text: #212529;
        --sidebar-width: 250px;
    }
    
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f7fa;
        overflow-x: hidden;
        margin: 0;
        padding: 0;
    }
    
    /* Add these new classes for layout fixes */
    .admin-layout {
        display: flex;
        width: 100%;
        position: relative;
    }
    
    .admin-sidebar {
        width: var(--sidebar-width);
        min-height: calc(100vh - 56px); /* Adjust based on your top navbar height */
        position: fixed;
        top: 56px; /* Should match your top navbar height */
        left: 0;
        z-index: 100;
        background-color: #fff;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    }
    
    .main-content {
        width: calc(100% - var(--sidebar-width));
        margin-left: var(--sidebar-width);
        padding: 15px;
        transition: margin-left 0.3s;
        min-height: calc(100vh - 56px);
    }
    
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
        border: none;
        margin-bottom: 1.5rem;
    }
    
    .dashboard-card:hover {
        transform: translateY(-5px);
    }
    
    .count-card {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
    }
    
    .table-card {
        background-color: white;
    }
    
    .faculty-table {
        width: 100%;
    }
    
    .faculty-table th {
        background-color: var(--light-bg);
        color: var(--dark-text);
        position: sticky;
        top: 0;
    }
    
    .assignment-badge {
        background-color: var(--accent-color);
        color: white;
        border-radius: 20px;
        padding: 0.25rem 0.75rem;
        margin: 2px;
        display: inline-block;
        font-size: 0.85rem;
    }
    
    .actions-column .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .modal-header {
        background-color: var(--primary-color);
        color: white;
    }
    
    .badge-subject {
        background-color: #4cc9f0;
    }
    
    .badge-section {
        background-color: #4361ee;
    }
    
    .badge-semester {
        background-color: #3f37c9;
    }
    
    #assignmentMappingContainer {
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 1rem;
        margin-top: 1rem;
    }
    
    .assignment-item {
        background-color: var(--light-bg);
        border-radius: 8px;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .save-btn {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }
    
    .save-btn:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
    }
    
    .remove-btn {
        background-color: var(--warning-color);
        border-color: var(--warning-color);
    }
    
    .item-list {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 1rem;
    }
    
    @media (max-width: 992px) {
        .dashboard-card {
            margin-bottom: 1rem;
        }
    }
    
    @media (max-width: 768px) {
        :root {
            --sidebar-width: 200px;
        }
        
        .admin-sidebar {
            width: var(--sidebar-width);
        }
        
        .main-content {
            width: calc(100% - var(--sidebar-width));
            margin-left: var(--sidebar-width);
        }
        
        .faculty-table {
            font-size: 0.9rem;
        }
        
        .assignment-badge {
            font-size: 0.75rem;
            padding: 0.2rem 0.5rem;
        }
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 576px) {
        :root {
            --sidebar-width: 0px;
        }
        
        .admin-layout {
            flex-direction: column;
        }
        
        .admin-sidebar {
            width: 100%;
            min-height: auto;
            position: relative;
            top: 0;
        }
        
        .main-content {
            width: 100%;
            margin-left: 0;
        }
        
        /* Add a toggle button for mobile */
        .sidebar-toggle {
            display: block;
        }
    }
</style>
</head>
<body>
    <!-- Top Navbar Placeholder (Will be replaced with partial) -->
    <%- include('partials/adminTopNavbar', { admin: adminData }) %>

    <%- include('./partials/adminSideNavbar', { path: currentPath ,admin: adminData  }) %>

<div class="main-content">
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0 text-gray-800">Faculty Management</h1>
                        <p class="mb-0">Add, edit, and manage faculty members and their teaching assignments</p>
                    </div>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFacultyModal">
                            <i class="fas fa-plus"></i> Add New Faculty
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Dashboard Stats -->
        <div class="row">
            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Faculty Members
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="facultyCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Subjects
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="subjectCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-book fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Sections
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="sectionCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users-class fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Faculty Table Card -->
        <div class="card dashboard-card table-card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Faculty Members</h6>
                <div class="input-group" style="max-width: 300px;">
                    <input type="text" class="form-control" placeholder="Search faculty..." id="searchFaculty">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover faculty-table" id="facultyTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>ID Number</th>
                                <th>Email</th>
                                <th>Branch</th>
                                <th>Subjects</th>
                                <th>Sections</th>
                                <th>Semesters</th>
                                <th>Teaching Assignments</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="facultyTableBody">
                            <!-- Table rows will be dynamically populated from JS -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Faculty Modal -->
<div class="modal fade" id="facultyModal" tabindex="-1" aria-labelledby="facultyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="facultyModalLabel">Add/Edit Faculty</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="facultyForm">
                    <input type="hidden" id="facultyId">
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="facultyName" class="form-label">Faculty Name</label>
                            <input type="text" class="form-control" id="facultyName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="facultyIdNumber" class="form-label">ID Number</label>
                            <input type="text" class="form-control" id="facultyIdNumber" required>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="facultyEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="facultyEmail" required>
                        </div>
                        <div class="col-md-6">
                            <label for="facultyBranch" class="form-label">Branch</label>
                            <input type="text" class="form-control" id="facultyBranch" required>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <!-- Subjects Section -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <h5>Subjects</h5>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" id="newSubject" placeholder="Enter subject name (eg. DBMS , DSA etc)">
                                <button class="btn btn-primary" type="button" id="addSubjectBtn">Add</button>
                            </div>
                            <div id="subjectsList" class="mb-3"></div>
                        </div>
                    </div>
                    
                    <!-- Sections Section -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <h5>Sections</h5>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" id="newSection" placeholder="Enter section name ( eg. CSE-A etc)">
                                <button class="btn btn-primary" type="button" id="addSectionBtn">Add</button>
                            </div>
                            <div id="sectionsList" class="mb-3"></div>
                        </div>
                    </div>
                    
                    <!-- Semesters Section -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <h5>Semesters</h5>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" id="newSemester" placeholder="Enter semester number (eg. 1,2,3 ect)">
                                <button class="btn btn-primary" type="button" id="addSemesterBtn">Add</button>
                            </div>
                            <div id="semestersList" class="mb-3"></div>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <!-- Assignments Mapping -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <h5>Teaching Assignments</h5>
                            <div class="row mb-2">
                                <div class="col-md-4">
                                    <select class="form-select" id="mapSubject">
                                        <option value="" selected disabled>Select Subject</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <select class="form-select" id="mapSection">
                                        <option value="" selected disabled>Select Section</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <select class="form-select" id="mapSemester">
                                        <option value="" selected disabled>Select Semester</option>
                                    </select>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary mb-3" id="addMappingBtn">Add Assignment</button>
                            <div id="assignmentsList" class="assignments-container"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveFacultyBtn">Save Faculty</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmationModalBody">
                <!-- Content will be dynamically set -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Faculty Modal Button (Hidden trigger for the facultyModal) -->
<div id="addFacultyModal" style="display: none;"></div>

<!-- Pass faculty data from server to client -->
<script>
    // Initialize faculty data from server
    window.initialFacultyData = '<%- facultyData %>';
</script>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    
    <script>
        
        // DOM Elements
const facultyTableBody = document.getElementById('facultyTableBody');
const facultyCountElement = document.getElementById('facultyCount');
const subjectCountElement = document.getElementById('subjectCount');
const sectionCountElement = document.getElementById('sectionCount');
const facultyModal = new bootstrap.Modal(document.getElementById('facultyModal'));
const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));

// Form elements
const facultyForm = document.getElementById('facultyForm');
const facultyIdField = document.getElementById('facultyId');
const facultyNameField = document.getElementById('facultyName');
const facultyIdNumberField = document.getElementById('facultyIdNumber');
const facultyEmailField = document.getElementById('facultyEmail');
const facultyBranchField = document.getElementById('facultyBranch');

// Lists and mapping selectors
const subjectsList = document.getElementById('subjectsList');
const sectionsList = document.getElementById('sectionsList');
const semestersList = document.getElementById('semestersList');
const assignmentsList = document.getElementById('assignmentsList');
const mapSubject = document.getElementById('mapSubject');
const mapSection = document.getElementById('mapSection');
const mapSemester = document.getElementById('mapSemester');

// Buttons
const addSubjectBtn = document.getElementById('addSubjectBtn');
const addSectionBtn = document.getElementById('addSectionBtn');
const addSemesterBtn = document.getElementById('addSemesterBtn');
const addMappingBtn = document.getElementById('addMappingBtn');
const saveFacultyBtn = document.getElementById('saveFacultyBtn');
const confirmActionBtn = document.getElementById('confirmActionBtn');
const searchFacultyInput = document.getElementById('searchFaculty');

// Application state
let facultyData = [];
let currentFacultyId = null;
let currentSubjects = [];
let currentSections = [];
let currentSemesters = [];
let currentAssignments = [];

// Initialize the dashboard
document.addEventListener('DOMContentLoaded', function() {
    // Load faculty data from server
    loadFacultyData();
    
    // Setup event listeners
    addSubjectBtn.addEventListener('click', addSubject);
    addSectionBtn.addEventListener('click', addSection);
    addSemesterBtn.addEventListener('click', addSemester);
    addMappingBtn.addEventListener('click', addAssignment);
    saveFacultyBtn.addEventListener('click', saveFaculty);
    searchFacultyInput.addEventListener('input', filterFacultyTable);
    
    // Add event listener for "Add New Faculty" button
    document.querySelector('[data-bs-target="#addFacultyModal"]').addEventListener('click', function() {
        addNewFaculty();
    });
});

// Load faculty data from server
async function loadFacultyData() {
    try {
        // Check if we have data embedded in the page
        if (window.initialFacultyData) {
            facultyData = JSON.parse(window.initialFacultyData);
            updateDashboardCounts();
            renderFacultyTable();
            return;
        }
        
        // Otherwise fetch from API
        const response = await fetch('/admin/api/faculty');
        if (!response.ok) {
            throw new Error('Failed to fetch faculty data');
        }
        
        facultyData = await response.json();
        updateDashboardCounts();
        renderFacultyTable();
    } catch (error) {
        console.error('Error loading faculty data:', error);
        alert('Error loading faculty data. Please refresh the page or contact support.');
    }
}

// Update dashboard counts
function updateDashboardCounts() {
    facultyCountElement.textContent = facultyData.length;
    
    // Count unique subjects across all faculty
    const allSubjects = new Set();
    facultyData.forEach(faculty => {
        faculty.subjects.forEach(subject => allSubjects.add(subject));
    });
    subjectCountElement.textContent = allSubjects.size;
    
    // Count unique sections across all faculty
    const allSections = new Set();
    facultyData.forEach(faculty => {
        faculty.sections.forEach(section => allSections.add(section));
    });
    sectionCountElement.textContent = allSections.size;
}

// Render faculty table with all data
function renderFacultyTable() {
    facultyTableBody.innerHTML = '';
    
    facultyData.forEach(faculty => {
        const row = document.createElement('tr');
        
        // Create table cells
        row.innerHTML = `
            <td>${faculty.name}</td>
            <td>${faculty.idNumber}</td>
            <td>${faculty.email}</td>
            <td>${faculty.branch}</td>
            <td>${renderBadges(faculty.subjects, 'badge-subject')}</td>
            <td>${renderBadges(faculty.sections, 'badge-section')}</td>
            <td>${renderBadges(faculty.semesters, 'badge-semester')}</td>
            <td>${renderAssignments(faculty.teachingAssignments)}</td>
            <td class="actions-column">
                <button class="btn btn-sm btn-primary edit-faculty" data-id="${faculty._id}">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-danger delete-faculty" data-id="${faculty._id}">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        
        facultyTableBody.appendChild(row);
    });
    
    // Add event listeners to the edit and delete buttons
    document.querySelectorAll('.edit-faculty').forEach(btn => {
        btn.addEventListener('click', function() {
            const facultyId = this.getAttribute('data-id');
            editFaculty(facultyId);
        });
    });
    
    document.querySelectorAll('.delete-faculty').forEach(btn => {
        btn.addEventListener('click', function() {
            const facultyId = this.getAttribute('data-id');
            showDeleteConfirmation(facultyId);
        });
    });
}

// Helper function to render badges for subjects, sections, semesters
function renderBadges(items, badgeClass) {
    if (!items || items.length === 0) return '<span class="text-muted">None</span>';
    
    return items.map(item => 
        `<span class="badge ${badgeClass} me-1">${item}</span>`
    ).join(' ');
}

// Helper function to render teaching assignments
function renderAssignments(assignments) {
    if (!assignments || assignments.length === 0) return '<span class="text-muted">None</span>';
    
    return assignments.map(assignment => 
        `<div class="assignment-badge">
            Sem ${assignment.semester} | ${assignment.section} | ${assignment.subject}
        </div>`
    ).join(' ');
}

// Open modal to edit faculty
function editFaculty(facultyId) {
    const faculty = facultyData.find(f => f._id === facultyId);
    if (!faculty) return;
    
    // Set current faculty ID
    currentFacultyId = facultyId;
    
    // Populate form fields
    facultyIdField.value = faculty._id;
    facultyNameField.value = faculty.name;
    facultyIdNumberField.value = faculty.idNumber;
    facultyEmailField.value = faculty.email;
    facultyBranchField.value = faculty.branch;
    
    // Set current lists
    currentSubjects = [...faculty.subjects];
    currentSections = [...faculty.sections];
    currentSemesters = [...faculty.semesters];
    currentAssignments = [...faculty.teachingAssignments];
    
    // Render lists
    renderSubjectsList();
    renderSectionsList();
    renderSemestersList();
    renderAssignmentsList();
    
    // Update mapping dropdowns
    updateMappingDropdowns();
    
    // Show modal
    document.getElementById('facultyModalLabel').textContent = 'Edit Faculty';
    facultyModal.show();
}

// Show modal to add new faculty
function addNewFaculty() {
    // Reset form
    facultyForm.reset();
    currentFacultyId = null;
    
    // Clear lists
    currentSubjects = [];
    currentSections = [];
    currentSemesters = [];
    currentAssignments = [];
    
    // Render empty lists
    renderSubjectsList();
    renderSectionsList();
    renderSemestersList();
    renderAssignmentsList();
    
    // Update mapping dropdowns
    updateMappingDropdowns();
    
    // Show modal
    document.getElementById('facultyModalLabel').textContent = 'Add New Faculty';
    facultyModal.show();
}

// Render subjects list in the form
function renderSubjectsList() {
    subjectsList.innerHTML = '';
    
    currentSubjects.forEach(subject => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary me-1 p-2';
        badge.innerHTML = `
            ${subject}
            <button type="button" class="btn-close btn-close-white ms-2" 
                    style="font-size: 0.65rem;" data-value="${subject}"></button>
        `;
        
        subjectsList.appendChild(badge);
    });
    
    // Add event listeners to remove buttons
    subjectsList.querySelectorAll('.btn-close').forEach(btn => {
        btn.addEventListener('click', function() {
            const value = this.getAttribute('data-value');
            removeSubject(value);
        });
    });
    
    // Update dropdown options
    updateMappingDropdowns();
}

// Render sections list in the form
function renderSectionsList() {
    sectionsList.innerHTML = '';
    
    currentSections.forEach(section => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-info me-1 p-2';
        badge.innerHTML = `
            ${section}
            <button type="button" class="btn-close btn-close-white ms-2" 
                    style="font-size: 0.65rem;" data-value="${section}"></button>
        `;
        
        sectionsList.appendChild(badge);
    });
    
    // Add event listeners to remove buttons
    sectionsList.querySelectorAll('.btn-close').forEach(btn => {
        btn.addEventListener('click', function() {
            const value = this.getAttribute('data-value');
            removeSection(value);
        });
    });
    
    // Update dropdown options
    updateMappingDropdowns();
}

// Render semesters list in the form
function renderSemestersList() {
    semestersList.innerHTML = '';
    
    currentSemesters.forEach(semester => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-success me-1 p-2';
        badge.innerHTML = `
            ${semester}
            <button type="button" class="btn-close btn-close-white ms-2" 
                    style="font-size: 0.65rem;" data-value="${semester}"></button>
        `;
        
        semestersList.appendChild(badge);
    });
    
    // Add event listeners to remove buttons
    semestersList.querySelectorAll('.btn-close').forEach(btn => {
        btn.addEventListener('click', function() {
            const value = this.getAttribute('data-value');
            removeSemester(value);
        });
    });
    
    // Update dropdown options
    updateMappingDropdowns();
}

// Render assignments list in the form
function renderAssignmentsList() {
    assignmentsList.innerHTML = '';
    
    if (currentAssignments.length === 0) {
        assignmentsList.innerHTML = `<div class="text-muted" id="noAssignmentsMsg">No assignments added yet</div>`;
        return;
    }
    
    currentAssignments.forEach((assignment, index) => {
        const item = document.createElement('div');
        item.className = 'assignment-item';
        item.innerHTML = `
            <div>
                <span class="badge badge-subject">${assignment.subject}</span>
                <span class="badge badge-section">${assignment.section}</span>
                <span class="badge badge-semester">Semester ${assignment.semester}</span>
            </div>
            <button type="button" class="btn btn-sm btn-danger remove-assignment" data-index="${index}">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        assignmentsList.appendChild(item);
    });
    
    // Add event listeners to remove buttons
    assignmentsList.querySelectorAll('.remove-assignment').forEach(btn => {
        btn.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            removeAssignment(index);
        });
    });
}

// Update dropdown options for mapping
function updateMappingDropdowns() {
    // Clear existing options
    mapSubject.innerHTML = '<option value="" selected disabled>Select Subject</option>';
    mapSection.innerHTML = '<option value="" selected disabled>Select Section</option>';
    mapSemester.innerHTML = '<option value="" selected disabled>Select Semester</option>';
    
    // Add subject options
    currentSubjects.forEach(subject => {
        const option = document.createElement('option');
        option.value = subject;
        option.textContent = subject;
        mapSubject.appendChild(option);
    });
    
    // Add section options
    currentSections.forEach(section => {
        const option = document.createElement('option');
        option.value = section;
        option.textContent = section;
        mapSection.appendChild(option);
    });
    
    // Add semester options
    currentSemesters.forEach(semester => {
        const option = document.createElement('option');
        option.value = semester;
        option.textContent = `Semester ${semester}`;
        mapSemester.appendChild(option);
    });
}

// Add a new subject
function addSubject() {
    const newSubjectInput = document.getElementById('newSubject');
    const subject = newSubjectInput.value.trim();
    
    if (!subject) return;
    
    if (!currentSubjects.includes(subject)) {
        currentSubjects.push(subject);
        renderSubjectsList();
        newSubjectInput.value = '';
    } else {
        alert('This subject already exists!');
    }
}

// Remove a subject
function removeSubject(subject) {
    // Check if subject is used in any assignment
    const inUse = currentAssignments.some(a => a.subject === subject);
    
    if (inUse) {
        // Show warning
        document.getElementById('confirmationModalBody').innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> This subject is used in teaching assignments.
                Removing it will also remove all associated assignments.
            </div>
            <p>Do you want to continue?</p>
        `;
        
        confirmActionBtn.onclick = function() {
            // Remove assignments using this subject
            currentAssignments = currentAssignments.filter(a => a.subject !== subject);
            
            // Remove the subject
            currentSubjects = currentSubjects.filter(s => s !== subject);
            
            // Update UI
            renderSubjectsList();
            renderAssignmentsList();
            
            confirmationModal.hide();
        };
        
        confirmationModal.show();
    } else {
        // Just remove the subject
        currentSubjects = currentSubjects.filter(s => s !== subject);
        renderSubjectsList();
    }
}

// Add a new section
function addSection() {
    const newSectionInput = document.getElementById('newSection');
    const section = newSectionInput.value.trim();
    
    if (!section) return;
    
    if (!currentSections.includes(section)) {
        currentSections.push(section);
        renderSectionsList();
        newSectionInput.value = '';
    } else {
        alert('This section already exists!');
    }
}

// Remove a section
function removeSection(section) {
    // Check if section is used in any assignment
    const inUse = currentAssignments.some(a => a.section === section);
    
    if (inUse) {
        // Show warning
        document.getElementById('confirmationModalBody').innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> This section is used in teaching assignments.
                Removing it will also remove all associated assignments.
            </div>
            <p>Do you want to continue?</p>
        `;
        
        confirmActionBtn.onclick = function() {
            // Remove assignments using this section
            currentAssignments = currentAssignments.filter(a => a.section !== section);
            
            // Remove the section
            currentSections = currentSections.filter(s => s !== section);
            
            // Update UI
            renderSectionsList();
            renderAssignmentsList();
            
            confirmationModal.hide();
        };
        
        confirmationModal.show();
    } else {
        // Just remove the section
        currentSections = currentSections.filter(s => s !== section);
        renderSectionsList();
    }
}

// Add a new semester
function addSemester() {
    const newSemesterInput = document.getElementById('newSemester');
    const semester = newSemesterInput.value.trim();
    
    if (!semester) return;
    
    if (!currentSemesters.includes(semester)) {
        currentSemesters.push(semester);
        renderSemestersList();
        newSemesterInput.value = '';
    } else {
        alert('This semester already exists!');
    }
}

// Remove a semester
function removeSemester(semester) {
    // Check if semester is used in any assignment
    const inUse = currentAssignments.some(a => a.semester === semester);
    
    if (inUse) {
        // Show warning
        document.getElementById('confirmationModalBody').innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> This semester is used in teaching assignments.
                Removing it will also remove all associated assignments.
            </div>
            <p>Do you want to continue?</p>
        `;
        
        confirmActionBtn.onclick = function() {
            // Remove assignments using this semester
            currentAssignments = currentAssignments.filter(a => a.semester !== semester);
            
            // Remove the semester
            currentSemesters = currentSemesters.filter(s => s !== semester);
            
            // Update UI
            renderSemestersList();
            renderAssignmentsList();
            
            confirmationModal.hide();
        };
        
        confirmationModal.show();
    } else {
        // Just remove the semester
        currentSemesters = currentSemesters.filter(s => s !== semester);
        renderSemestersList();
    }
}

// Add new teaching assignment mapping
function addAssignment() {
    const subject = mapSubject.value;
    const section = mapSection.value;
    const semester = mapSemester.value;
    
    if (!subject || !section || !semester) {
        alert('Please select subject, section and semester for the assignment');
        return;
    }
    
    // Check if this assignment already exists
    const exists = currentAssignments.some(
        a => a.subject === subject && a.section === section && a.semester === semester
    );
    
    if (exists) {
        alert('This assignment combination already exists!');
        return;
    }
    
    // Add new assignment
    currentAssignments.push({
        subject,
        section,
        semester
    });
    
    // Update UI
    renderAssignmentsList();
}

// Remove a teaching assignment
function removeAssignment(index) {
    currentAssignments.splice(index, 1);
    renderAssignmentsList();
}

// Save faculty data
// Save faculty data
async function saveFaculty() {
    // Get form values
    const name = facultyNameField.value.trim();
    const idNumber = facultyIdNumberField.value.trim();
    const email = facultyEmailField.value.trim();
    const branch = facultyBranchField.value.trim();
    
    // Validate required fields
    if (!name || !idNumber || !email || !branch) {
        alert('Please fill in all required fields');
        return;
    }
    
    try {
        // Show loading indicator
        saveFacultyBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        saveFacultyBtn.disabled = true;
        
        // Prepare faculty data with explicit copy of arrays to ensure they're included
        const faculty = {
            name,
            idNumber,
            email,
            branch,
            subjects: currentSubjects.slice(), // Use slice to create a new array
            sections: currentSections.slice(),
            semesters: currentSemesters.slice(),
            teachingAssignments: currentAssignments.map(assignment => ({
                subject: assignment.subject,
                section: assignment.section,
                semester: assignment.semester
            })),
            role: "faculty",
            password: "111111" // Default password for new faculty
        };
        
        // If editing existing faculty, add the ID
        if (currentFacultyId) {
            faculty._id = currentFacultyId;
        }
        
        console.log("Sending faculty data:", faculty); // Debug log
        
        // Send data to server
        const response = await fetch('/admin/api/faculty', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(faculty)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to save faculty data: ${errorData.details || response.statusText}`);
        }
        
        const savedFaculty = await response.json();
        console.log("Received response:", savedFaculty); // Debug log
        
        // Refresh faculty data
        await loadFacultyData();
        
        // Close modal
        facultyModal.hide();
        
        // Show success message
        alert(currentFacultyId ? 'Faculty updated successfully!' : 'New faculty added successfully!');
    } catch (error) {
        console.error('Error saving faculty data:', error);
        alert('Error saving faculty data: ' + error.message);
    } finally {
        // Reset button state
        saveFacultyBtn.innerHTML = 'Save Faculty';
        saveFacultyBtn.disabled = false;
    }
}
// Show confirmation for deleting a faculty
function showDeleteConfirmation(facultyId) {
    const faculty = facultyData.find(f => f._id === facultyId);
    if (!faculty) return;
    
    document.getElementById('confirmationModalBody').innerHTML = `
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i> You are about to delete the following faculty member:
        </div>
        <p><strong>${faculty.name}</strong> (ID: ${faculty.idNumber})</p>
        <p>This action cannot be undone. Do you want to continue?</p>
    `;
    
    confirmActionBtn.onclick = function() {
        deleteFaculty(facultyId);
        confirmationModal.hide();
    };
    
    confirmationModal.show();
}

// Delete a faculty
async function deleteFaculty(facultyId) {
    try {
        // Show loading indicator
        confirmActionBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';
        confirmActionBtn.disabled = true;
        
        const response = await fetch(`/admin/api/faculty/${facultyId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('Failed to delete faculty');
        }
        
        // Refresh faculty data
        await loadFacultyData();
        
        // Show success message
        alert('Faculty deleted successfully!');
    } catch (error) {
        console.error('Error deleting faculty:', error);
        alert('Error deleting faculty: ' + error.message);
    } finally {
        // Reset button state
        confirmActionBtn.innerHTML = 'Confirm';
        confirmActionBtn.disabled = false;
    }
}

// Filter faculty table based on search input
function filterFacultyTable() {
    const searchText = searchFacultyInput.value.toLowerCase();
    const rows = facultyTableBody.querySelectorAll('tr');
    
    rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        if (text.includes(searchText)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}
    </script>
</body>
</html>