<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Faculty Management Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --success-color: #4cc9f0;
        --warning-color: #f72585;
        --light-bg: #f8f9fa;
        --dark-text: #212529;
        --sidebar-width: 250px;
    }
    
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f7fa;
        overflow-x: hidden;
        margin: 0;
        padding: 0;
    }
    
    /* Add these new classes for layout fixes */
    .admin-layout {
        display: flex;
        width: 100%;
        position: relative;
    }
    
    .admin-sidebar {
        width: var(--sidebar-width);
        min-height: calc(100vh - 56px); /* Adjust based on your top navbar height */
        position: fixed;
        top: 56px; /* Should match your top navbar height */
        left: 0;
        z-index: 100;
        background-color: #fff;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    }
    
    .main-content {
        width: calc(100% - var(--sidebar-width));
        margin-left: var(--sidebar-width);
        padding: 15px;
        transition: margin-left 0.3s;
        min-height: calc(100vh - 56px);
    }
    
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
        border: none;
        margin-bottom: 1.5rem;
    }
    
    .dashboard-card:hover {
        transform: translateY(-5px);
    }
    
    .count-card {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
    }
    
    .table-card {
        background-color: white;
    }
    
    .faculty-table {
        width: 100%;
    }
    
    .faculty-table th {
        background-color: var(--light-bg);
        color: var(--dark-text);
        position: sticky;
        top: 0;
    }
    
    .assignment-badge {
        background-color: var(--accent-color);
        color: white;
        border-radius: 20px;
        padding: 0.25rem 0.75rem;
        margin: 2px;
        display: inline-block;
        font-size: 0.85rem;
    }
    
    .actions-column .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .modal-header {
        background-color: var(--primary-color);
        color: white;
    }
    
    .badge-subject {
        background-color: #4cc9f0;
    }
    
    .badge-section {
        background-color: #4361ee;
    }
    
    .badge-semester {
        background-color: #3f37c9;
    }
    
    #assignmentMappingContainer {
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 1rem;
        margin-top: 1rem;
    }
    
    .assignment-item {
        background-color: var(--light-bg);
        border-radius: 8px;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .save-btn {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }
    
    .save-btn:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
    }
    
    .remove-btn {
        background-color: var(--warning-color);
        border-color: var(--warning-color);
    }
    
    .item-list {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 1rem;
    }
    
    @media (max-width: 992px) {
        .dashboard-card {
            margin-bottom: 1rem;
        }
    }
    
    @media (max-width: 768px) {
        :root {
            --sidebar-width: 200px;
        }
        
        .admin-sidebar {
            width: var(--sidebar-width);
        }
        
        .main-content {
            width: calc(100% - var(--sidebar-width));
            margin-left: var(--sidebar-width);
        }
        
        .faculty-table {
            font-size: 0.9rem;
        }
        
        .assignment-badge {
            font-size: 0.75rem;
            padding: 0.2rem 0.5rem;
        }
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 576px) {
        :root {
            --sidebar-width: 0px;
        }
        
        .admin-layout {
            flex-direction: column;
        }
        
        .admin-sidebar {
            width: 100%;
            min-height: auto;
            position: relative;
            top: 0;
        }
        
        .main-content {
            width: 100%;
            margin-left: 0;
        }
        
        /* Add a toggle button for mobile */
        .sidebar-toggle {
            display: block;
        }
    }
</style>
</head>
<body>
     <!-- Topbar -->
              <%- include('partials/adminTopNavbar', { admin: adminData }) %>
     <!-- Sidebar -->
    <%- include('./partials/adminSideNavbar', { path: currentPath ,admin: adminData  }) %>
    <div class="main-content">
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0 text-gray-800">Faculty Management</h1>
                        <p class="mb-0">Add, edit, and manage faculty members and their teaching assignments</p>
                    </div>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFacultyModal">
                            <i class="fas fa-plus"></i> Add New Faculty
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Dashboard Stats -->
        <div class="row">
            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Faculty Members
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="facultyCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Subjects
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="subjectCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-book fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="card dashboard-card count-card">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-uppercase mb-1">
                                    Total Sections
                                </div>
                                <div class="h5 mb-0 font-weight-bold" id="sectionCount">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users-class fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Faculty Table Card -->
        <div class="card dashboard-card table-card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Faculty Members</h6>
                <div class="input-group" style="max-width: 300px;">
                    <input type="text" class="form-control" placeholder="Search faculty..." id="searchFaculty">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover faculty-table" id="facultyTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>ID Number</th>
                                <th>Email</th>
                                <th>Branch</th>
                                <th>Subjects</th>
                                <th>Sections</th>
                                <th>Semesters</th>
                                <th>Teaching Assignments</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="facultyTableBody">
                            <!-- Table rows will be dynamically populated from JS -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    </div>

    <!-- Faculty Modal -->
    <div class="modal fade" id="facultyModal" tabindex="-1" aria-labelledby="facultyModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="facultyModalLabel">Add/Edit Faculty</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="facultyForm">
                        <input type="hidden" id="facultyId">
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="facultyName" class="form-label">Faculty Name</label>
                                <input type="text" class="form-control" id="facultyName" required>
                            </div>
                            <div class="col-md-6">
                                <label for="facultyIdNumber" class="form-label">ID Number</label>
                                <input type="text" class="form-control" id="facultyIdNumber" required>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="facultyEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="facultyEmail" required>
                            </div>
                            <div class="col-md-6">
                                <label for="facultyBranch" class="form-label">Branch</label>
                                <input type="text" class="form-control" id="facultyBranch" required>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isCoordinator">
                                    <label class="form-check-label" for="isCoordinator">
                                        Assign as Coordinator
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <hr>
                        
                        <!-- UPDATED ORDER: First Semesters, then Subjects, then Sections -->
                        
                        <!-- Semesters Section -->
                            <div class="row mb-3">
                                <div class="col-12">
                                    <h5>Semesters</h5>
                                    <div id="semestersCheckboxes" class="checkbox-container mb-3">
                                        <!-- Will be populated dynamically -->
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        <!-- Subjects Section -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <h5>Subjects</h5>
                                <div id="subjectsCheckboxes" class="checkbox-container mb-3">
                                    <!-- Will be populated based on branch and semester -->
                                    <div class="text-muted">Select semester(s) first to see available subjects</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Sections Section -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <h5>Sections</h5>
                                <div id="sectionsCheckboxes" class="checkbox-container mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input section-checkbox" type="checkbox" id="section-CSE-A" value="CSE-A">
                                        <label class="form-check-label" for="section-CSE-A">CSE-A</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input section-checkbox" type="checkbox" id="section-CSE-B" value="CSE-B">
                                        <label class="form-check-label" for="section-CSE-B">CSE-B</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input section-checkbox" type="checkbox" id="section-CSE-C" value="CSE-C">
                                        <label class="form-check-label" for="section-CSE-C">CSE-C</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input section-checkbox" type="checkbox" id="section-CSE-D" value="CSE-D">
                                        <label class="form-check-label" for="section-CSE-D">CSE-D</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <hr>
                        
                        <!-- Assignments Mapping -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <h5>Teaching Assignments</h5>
                                <div class="row mb-2">
                                    <div class="col-md-3">
                                        <select class="form-select" id="mapSubject">
                                            <option value="" selected disabled>Select Subject</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-select" id="mapSection">
                                            <option value="" selected disabled>Select Section</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-select" id="mapSemester">
                                            <option value="" selected disabled>Select Semester</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-select" id="mapType">
                                            <option value="" selected disabled>Select Type</option>
                                            <option value="Theory">Theory</option>
                                            <option value="Practical">Practical</option>
                                        </select>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary mb-3" id="addMappingBtn">Add Assignment</button>
                                <div id="assignmentsList" class="assignments-container"></div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveFacultyBtn">Save Faculty</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmationModalBody">
                    <!-- Content will be dynamically set -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Faculty Modal Button (Hidden trigger for the facultyModal) -->
    <div id="addFacultyModal" style="display: none;"></div>

    <!-- Pass faculty data from server to client -->
    <script>
        // Initialize faculty data from server
        window.initialFacultyData = '<%- facultyData %>';
        // Initialize subjects data from server
        window.subjectsData = '<%- subjectsData %>';
    </script>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        const facultyTableBody = document.getElementById('facultyTableBody');
        const facultyCountElement = document.getElementById('facultyCount');
        const subjectCountElement = document.getElementById('subjectCount');
        const sectionCountElement = document.getElementById('sectionCount');
        
        // Form elements
        const facultyForm = document.getElementById('facultyForm');
        const facultyIdField = document.getElementById('facultyId');
        const facultyNameField = document.getElementById('facultyName');
        const facultyIdNumberField = document.getElementById('facultyIdNumber');
        const facultyEmailField = document.getElementById('facultyEmail');
        const facultyBranchField = document.getElementById('facultyBranch');
        const isCoordinatorCheckbox = document.getElementById('isCoordinator');
        
        // Lists and mapping selectors
        const assignmentsList = document.getElementById('assignmentsList');
        const mapSubject = document.getElementById('mapSubject');
        const mapSection = document.getElementById('mapSection');
        const mapSemester = document.getElementById('mapSemester');
        const mapType = document.getElementById('mapType');
        
        // Buttons
        const addMappingBtn = document.getElementById('addMappingBtn');
        const saveFacultyBtn = document.getElementById('saveFacultyBtn');
        const searchFacultyInput = document.getElementById('searchFaculty');
        
        // Application state
        let facultyData = [];
        let subjectsData = []; 
        let currentFacultyId = null;
        let currentSubjects = [];
        let currentSections = [];
        let currentSemesters = [];
        let currentAssignments = [];
        let isCoordinator = false;
        
        // Initialize Bootstrap modals properly
        const facultyModal = new bootstrap.Modal(document.getElementById('facultyModal'));
        const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
        
        // Add event listener for the coordinator checkbox
        isCoordinatorCheckbox.addEventListener('change', function() {
            isCoordinator = this.checked;
        });
        
        // Event listener for branch changes
        facultyBranchField.addEventListener('input', function() {
            filterSubjectsForSelection();
            updateSubjectsCheckboxes();
        });
        
        // Initialize the subject-type mapping object
        window.subjectTypeMapping = {};
        
        // Event listeners for buttons
        if (saveFacultyBtn) {
            saveFacultyBtn.addEventListener('click', saveFaculty);
        }
        
        if (searchFacultyInput) {
            searchFacultyInput.addEventListener('input', filterFacultyTable);
        }
        
        if (addMappingBtn) {
            addMappingBtn.addEventListener('click', addAssignment);
        }
        
        // Fix: Properly attach event handler for Add New Faculty button
        const addNewFacultyBtn = document.querySelector('button[data-bs-target="#addFacultyModal"]');
        if (addNewFacultyBtn) {
            addNewFacultyBtn.addEventListener('click', function(e) {
                e.preventDefault();
                addNewFaculty();
            });
        }
        
        // Load initial data
        loadFacultyData();
        
        // Filter subjects based on branch and selected semesters
        function filterSubjectsForSelection() {
            const selectedBranch = facultyBranchField.value.trim();
            
            // Get the subject dropdown
            const subjectDropdown = document.getElementById('mapSubject');
            
            // Clear current options
            subjectDropdown.innerHTML = '<option value="" selected disabled>Select Subject</option>';
            
            // Parse the subjects data if it's a string
            let subjects = window.subjectsData;
            if (typeof subjects === 'string') {
                try {
                    subjects = JSON.parse(subjects);
                } catch (error) {
                    console.error('Error parsing subjects data:', error);
                    return;
                }
            }
            
            // Only proceed if we have subjects and branch is set
            if (!subjects || !selectedBranch) {
                return;
            }
            
            // Filter subjects based on branch and if any of the current semesters match
            const filteredSubjects = subjects.filter(subject => {
                let branchMatches = false;
                
                // Check branch - case-insensitive string comparison
                if (selectedBranch && subject.department) {
                    // Try to match either branch or department field
                    if (subject.department.toString().toLowerCase() === selectedBranch.toLowerCase() || 
                        (subject.branch && subject.branch.toString().toLowerCase() === selectedBranch.toLowerCase())) {
                        branchMatches = true;
                    }
                }
                
                // For semester matching, check if subject's semester is in our currentSemesters list
                let semesterMatches = false;
                
                // If we have semesters to check against and subject has a semester
                if (currentSemesters.length > 0 && subject.semester !== undefined) {
                    semesterMatches = currentSemesters.includes(subject.semester.toString());
                } else if (currentSemesters.length === 0) {
                    // If no semesters are selected yet, don't filter by semester
                    semesterMatches = true;
                }
                
                return branchMatches && semesterMatches;
            });
            
            // Add filtered subjects to dropdown
            filteredSubjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject.subjectName || subject.name || subject;
                option.textContent = subject.subjectName || subject.name || subject;
                subjectDropdown.appendChild(option);
            });
        }
        
        // Load faculty data from server
        async function loadFacultyData() {
            try {
                // Check if we have data embedded in the page
                if (window.initialFacultyData) {
                    try {
                        facultyData = JSON.parse(window.initialFacultyData);
                        updateDashboardCounts();
                        renderFacultyTable();
                    } catch (error) {
                        console.error('Error parsing window.initialFacultyData:', error);
                    }
                }
                
                // Load subjects data from window if available
                if (window.subjectsData) {
                    try {
                        subjectsData = JSON.parse(window.subjectsData);
                    } catch (error) {
                        console.error('Error parsing window.subjectsData:', error);
                    }
                }
                
                // Otherwise fetch from API
                if (!facultyData.length) {
                    const response = await fetch('/admin/api/faculty');
                    if (!response.ok) {
                        throw new Error('Failed to fetch faculty data');
                    }
                    
                    facultyData = await response.json();
                    updateDashboardCounts();
                    renderFacultyTable();
                }
                
                // If subjects data not available, fetch from API
                if (!subjectsData.length) {
                    const response = await fetch('/admin/api/subjects');
                    if (!response.ok) {
                        throw new Error('Failed to fetch subjects data');
                    }
                    
                    subjectsData = await response.json();
                }
            } catch (error) {
                console.error('Error loading data:', error);
                alert('Error loading data. Please refresh the page or contact support.');
            }
        }
        
        // Update dashboard counts
        function updateDashboardCounts() {
            facultyCountElement.textContent = facultyData.length;
            
            // Count unique subjects across all faculty
            const allSubjects = new Set();
            facultyData.forEach(faculty => {
                if (faculty.subjects && Array.isArray(faculty.subjects)) {
                    faculty.subjects.forEach(subject => allSubjects.add(subject));
                }
            });
            subjectCountElement.textContent = allSubjects.size;
            
            // Count unique sections across all faculty
            const allSections = new Set();
            facultyData.forEach(faculty => {
                if (faculty.sections && Array.isArray(faculty.sections)) {
                    faculty.sections.forEach(section => allSections.add(section));
                }
            });
            sectionCountElement.textContent = allSections.size;
        }
        
        // Render faculty table with all data
        function renderFacultyTable() {
            if (!facultyTableBody) return;
            
            facultyTableBody.innerHTML = '';
            
            facultyData.forEach(faculty => {
                const row = document.createElement('tr');
                
                // Create table cells
                row.innerHTML = `
                    <td>${faculty.name}</td>
                    <td>${faculty.idNumber}</td>
                    <td>${faculty.email}</td>
                    <td>${faculty.branch}</td>
                    <td>${renderBadges(faculty.subjects, 'badge-subject')}</td>
                    <td>${renderBadges(faculty.sections, 'badge-section')}</td>
                    <td>${renderBadges(faculty.semesters, 'badge-semester')}</td>
                    <td>${renderAssignments(faculty.teachingAssignments)}</td>
                    <td>${faculty.isCoordinator ? '<span class="badge bg-warning">Coordinator</span>' : ''}</td>
                    <td class="actions-column">
                        <button class="btn btn-sm btn-primary edit-faculty" data-id="${faculty._id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger delete-faculty" data-id="${faculty._id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                
                facultyTableBody.appendChild(row);
            });
            
            // Add event listeners to the edit and delete buttons
            // Fix: Add proper event listeners for dynamic content
            document.querySelectorAll('.edit-faculty').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const facultyId = this.getAttribute('data-id');
                    editFaculty(facultyId);
                });
            });
            
            document.querySelectorAll('.delete-faculty').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const facultyId = this.getAttribute('data-id');
                    showDeleteConfirmation(facultyId);
                });
            });
        }
        
        // Helper function to render badges for subjects, sections, semesters
        function renderBadges(items, badgeClass) {
            if (!items || items.length === 0) return '<span class="text-muted">None</span>';
            
            return items.map(item => 
                `<span class="badge ${badgeClass} me-1">${item}</span>`
            ).join(' ');
        }
        
        // Helper function to render teaching assignments
        function renderAssignments(assignments) {
            if (!assignments || assignments.length === 0) return '<span class="text-muted">None</span>';
            
            return assignments.map(assignment => {
                // Include type if available
                const typeInfo = assignment.type ? ` | ${assignment.type}` : '';
                
                return `<div class="assignment-badge">
                    Sem ${assignment.semester} | ${assignment.section} | ${assignment.subject}${typeInfo}
                </div>`;
            }).join(' ');
        }
        
        // Edit faculty function
        function editFaculty(facultyId) {
            const faculty = facultyData.find(f => f._id === facultyId);
            if (!faculty) return;
            
            // Set current faculty ID
            currentFacultyId = facultyId;
            
            // Populate form fields
            facultyIdField.value = faculty._id;
            facultyNameField.value = faculty.name;
            facultyIdNumberField.value = faculty.idNumber;
            facultyEmailField.value = faculty.email;
            facultyBranchField.value = faculty.branch;
            
            // Set checkbox state
            isCoordinator = faculty.isCoordinator || false;
            isCoordinatorCheckbox.checked = isCoordinator;
            
            // Set current lists
            currentSubjects = Array.isArray(faculty.subjects) ? [...faculty.subjects] : [];
            currentSections = Array.isArray(faculty.sections) ? [...faculty.sections] : [];
            currentSemesters = Array.isArray(faculty.semesters) ? [...faculty.semesters] : [];
            currentAssignments = Array.isArray(faculty.teachingAssignments) ? [...faculty.teachingAssignments] : [];
            
            // Populate checkboxes for semesters, subjects, and sections
            populateSemesterCheckboxes();
            updateSubjectsCheckboxes();
            setupSectionCheckboxes();
            
            // Render assignments list
            renderAssignmentsList();
            
            // Update mapping dropdowns
            updateMappingDropdowns();
            
            // Show modal
            document.getElementById('facultyModalLabel').textContent = 'Edit Faculty';
            facultyModal.show();
        }
        
        // Add new faculty function
        function addNewFaculty() {
            // Reset form
            facultyForm.reset();
            currentFacultyId = null;
            
            // Clear lists
            currentSubjects = [];
            currentSections = [];
            currentSemesters = [];
            currentAssignments = [];
            isCoordinator = false;
            
            // Setup checkboxes
            populateSemesterCheckboxes();
            updateSubjectsCheckboxes();
            setupSectionCheckboxes();
            
            // Render empty assignments list
            renderAssignmentsList();
            
            // Update mapping dropdowns
            updateMappingDropdowns();
            
            // Show modal with correct title
            document.getElementById('facultyModalLabel').textContent = 'Add New Faculty';
            facultyModal.show();
        }
        
        // Update mapping dropdowns based on current selections
        function updateMappingDropdowns() {
            // Clear existing options
            mapSubject.innerHTML = '<option value="" selected disabled>Select Subject</option>';
            mapSection.innerHTML = '<option value="" selected disabled>Select Section</option>';
            mapSemester.innerHTML = '<option value="" selected disabled>Select Semester</option>';
            mapType.innerHTML = '<option value="" selected disabled>Select Type</option><option value="Theory">Theory</option><option value="Practical">Practical</option>';
            
            // Add subjects to dropdown - only use the subjects that were selected in checkboxes
            currentSubjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject;
                option.textContent = subject;
                mapSubject.appendChild(option);
            });
            
            // Add sections to dropdown - only use the sections that were selected in checkboxes
            currentSections.forEach(section => {
                const option = document.createElement('option');
                option.value = section;
                option.textContent = section;
                mapSection.appendChild(option);
            });
            
            // Add semesters to dropdown - only use the semesters that were selected in checkboxes
            currentSemesters.forEach(semester => {
                const option = document.createElement('option');
                option.value = semester;
                option.textContent = semester;
                mapSemester.appendChild(option);
            });
            
            // Auto-select type based on subject selection
            mapSubject.addEventListener('change', function() {
                const selectedSubject = this.value;
                
                // Auto-select the appropriate type based on the subject
                const subjectTypeMapping = window.subjectTypeMapping || {};
                const subjectType = subjectTypeMapping[selectedSubject] || 'Theory';
                
                // Select the appropriate type
                mapType.value = subjectType;
            });
        }
        
        // Render assignments list in the form
        function renderAssignmentsList() {
            if (!assignmentsList) return;
            
            assignmentsList.innerHTML = '';
            
            if (currentAssignments.length === 0) {
                assignmentsList.innerHTML = `<div class="text-muted" id="noAssignmentsMsg">No assignments added yet</div>`;
                return;
            }
            
            currentAssignments.forEach((assignment, index) => {
                const item = document.createElement('div');
                item.className = 'assignment-item';
                
                // Include type if available
                const typeDisplay = assignment.type ? 
                    `<span class="badge badge-type">${assignment.type}</span>` : '';
                
                item.innerHTML = `
                    <div>
                        <span class="badge badge-subject">${assignment.subject}</span>
                        <span class="badge badge-section">${assignment.section}</span>
                        <span class="badge badge-semester">Semester ${assignment.semester}</span>
                        ${typeDisplay}
                    </div>
                    <button type="button" class="btn btn-sm btn-danger remove-assignment" data-index="${index}">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                
                assignmentsList.appendChild(item);
            });
            
            // Add event listeners to remove buttons
            assignmentsList.querySelectorAll('.remove-assignment').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeAssignment(index);
                });
            });
        }
        
        // Add teaching assignment mapping
        function addAssignment() {
            const subject = mapSubject.value;
            const section = mapSection.value;
            const semester = mapSemester.value;
            const type = mapType.value;
            
            if (!subject || !section || !semester || !type) {
                alert('Please select all fields for the teaching assignment.');
                return;
            }
            
            // Check if this exact assignment already exists
            const exists = currentAssignments.some(a => 
                a.subject === subject && 
                a.section === section && 
                a.semester === semester &&
                a.type === type
            );
            
            if (exists) {
                alert('This teaching assignment already exists.');
                return;
            }
            
            // Add assignment
            currentAssignments.push({
                subject,
                section,
                semester,
                type
            });
            
            // Clear selection
            mapSubject.selectedIndex = 0;
            mapSection.selectedIndex = 0;
            mapSemester.selectedIndex = 0;
            mapType.selectedIndex = 0;
            
            // Update UI
            renderAssignmentsList();
        }
        
        // Remove assignment by index
        function removeAssignment(index) {
            if (index >= 0 && index < currentAssignments.length) {
                currentAssignments.splice(index, 1);
                renderAssignmentsList();
            }
        }
        
        // Populate semester checkboxes
        function populateSemesterCheckboxes() {
            const semestersContainer = document.getElementById('semestersCheckboxes');
            if (!semestersContainer) return;
            
            semestersContainer.innerHTML = '';
            
            // Create checkboxes for semesters 1-8 (typical engineering degree)
            for (let i = 1; i <= 8; i++) {
                const checkboxDiv = document.createElement('div');
                checkboxDiv.className = 'form-check form-check-inline';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input semester-checkbox';
                checkbox.id = `semester-${i}`;
                checkbox.value = i.toString();
                
                // Check if this semester is already selected
                if (currentSemesters.includes(i.toString())) {
                    checkbox.checked = true;
                }
                
                const label = document.createElement('label');
                label.className = 'form-check-label';
                label.htmlFor = `semester-${i}`;
                label.textContent = i.toString();
                
                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                semestersContainer.appendChild(checkboxDiv);
                
                // Add event listener for checkbox changes
                checkbox.addEventListener('change', function() {
                    const semester = this.value;
                    if (this.checked) {
                        // Add semester if not already in the list
                        if (!currentSemesters.includes(semester)) {
                            currentSemesters.push(semester);
                        }
                    } else {
                        // Remove semester
                        currentSemesters = currentSemesters.filter(s => s !== semester);
                        
                        // Also remove any assignments that use this semester
                        currentAssignments = currentAssignments.filter(a => a.semester !== semester);
                    }
                    
                    // This is key - update both subjects and mapping dropdowns
                    filterSubjectsForSelection();
                    updateSubjectsCheckboxes();
                    updateMappingDropdowns(); // Update the dropdown options when semesters change
                });
            }
        }
        
        // Update subjects with checkboxes
        function updateSubjectsCheckboxes() {
            const subjectsContainer = document.getElementById('subjectsCheckboxes');
            if (!subjectsContainer) return;
            
            subjectsContainer.innerHTML = '';
            
            const selectedBranch = facultyBranchField.value.trim();
            
            // If no branch or semesters selected, show message
            if (!selectedBranch || currentSemesters.length === 0) {
                subjectsContainer.innerHTML = '<div class="text-muted">Select branch and semester(s) first to see available subjects</div>';
                return;
            }
            
            // Parse the subjects data if needed
            let subjects = window.subjectsData;
            if (typeof subjects === 'string') {
                try {
                    subjects = JSON.parse(subjects);
                } catch (error) {
                    console.error('Error parsing subjects data:', error);
                    return;
                }
            }
            
            // Filter subjects based on branch and semesters
            const filteredSubjects = subjects.filter(subject => {
                let branchMatches = false;
                
                // Check branch - case-insensitive string comparison
                if (selectedBranch && subject.department) {
                    if (subject.department.toString().toLowerCase() === selectedBranch.toLowerCase() || 
                        (subject.branch && subject.branch.toString().toLowerCase() === selectedBranch.toLowerCase())) {
                        branchMatches = true;
                    }
                }
                
                let semesterMatches = false;
                if (currentSemesters.length > 0 && subject.semester !== undefined) {
                    semesterMatches = currentSemesters.includes(subject.semester.toString());
                }
                
                return branchMatches && semesterMatches;
            });
            
            // If no subjects found
            if (filteredSubjects.length === 0) {
                subjectsContainer.innerHTML = '<div class="text-muted">No subjects found for the selected branch and semester(s)</div>';
                return;
            }
            
            // Create checkboxes for each subject
            filteredSubjects.forEach(subject => {
                const subjectName = subject.subjectName || subject.name || subject;
                const subjectType = subject.type || 'Theory'; // Default to Theory if type not specified
                
                const checkboxDiv = document.createElement('div');
                checkboxDiv.className = 'form-check';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input subject-checkbox';
                checkbox.id = `subject-${subjectName.replace(/\s+/g, '-')}`;
                checkbox.value = subjectName;
                checkbox.dataset.type = subjectType; // Store the subject type as data attribute
                
                // Check if this subject is already selected
                if (currentSubjects.includes(subjectName)) {
                    checkbox.checked = true;
                }
                
                const label = document.createElement('label');
                label.className = 'form-check-label';
                label.htmlFor = `subject-${subjectName.replace(/\s+/g, '-')}`;
                label.textContent = `${subjectName} (${subjectType})`;
                
                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                subjectsContainer.appendChild(checkboxDiv);
                
                // Add event listener for checkbox changes
                checkbox.addEventListener('change', function() {
                    const subject = this.value;
                    const subjectType = this.dataset.type;
                    
                    if (this.checked) {
                        // Add subject if not already in the list
                        if (!currentSubjects.includes(subject)) {
                            currentSubjects.push(subject);
                            // Store subject type mapping
                            window.subjectTypeMapping = window.subjectTypeMapping || {};
                            window.subjectTypeMapping[subject] = subjectType;
                        }
                    } else {
                        // Remove subject
                        currentSubjects = currentSubjects.filter(s => s !== subject);
                        
                        // Also remove any assignments that use this subject
                        currentAssignments = currentAssignments.filter(a => a.subject !== subject);
                    }
                    
                    // Update the assignment dropdown options when subjects change
                    updateMappingDropdowns();
                });
            });
        }
        
        // Set up section checkboxes event listeners
        function setupSectionCheckboxes() {
            document.querySelectorAll('.section-checkbox').forEach(checkbox => {
                // Check if this section is already selected
                if (currentSections.includes(checkbox.value)) {
                    checkbox.checked = true;
                } else {
                    checkbox.checked = false; // Make sure it's unchecked if not in currentSections
                }
                
                checkbox.addEventListener('change', function() {
                    const section = this.value;
                    if (this.checked) {
                        // Add section if not already in the list
                        if (!currentSections.includes(section)) {
                            currentSections.push(section);
                        }
                    } else {
                        // Remove section
                        currentSections = currentSections.filter(s => s !== section);
                        
                        // Also remove any assignments that use this section
                        currentAssignments = currentAssignments.filter(a => a.section !== section);
                    }
                    
                    // Update the dropdown options when sections change
                    updateMappingDropdowns();
                });
            });
        }
        
        // Filter faculty table based on search input
        function filterFacultyTable() {
            const searchTerm = searchFacultyInput.value.toLowerCase();
            const rows = facultyTableBody.querySelectorAll('tr');
            
            rows.forEach(row => {
                const name = row.cells[0].textContent.toLowerCase();
                const idNumber = row.cells[1].textContent.toLowerCase();
                const email = row.cells[2].textContent.toLowerCase();
                const branch = row.cells[3].textContent.toLowerCase();
                
                if (name.includes(searchTerm) || idNumber.includes(searchTerm) || 
                    email.includes(searchTerm) || branch.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
        
        // Save faculty data
        async function saveFaculty() {
            // Validate form
            if (!facultyNameField.value || !facultyIdNumberField.value || !facultyEmailField.value || !facultyBranchField.value) {
                alert('Please fill in all required fields.');
                return;
            }
            
            // Create faculty object
            const faculty = {
                name: facultyNameField.value,
                idNumber: facultyIdNumberField.value,
                email: facultyEmailField.value,
                branch: facultyBranchField.value,
                isCoordinator: isCoordinator,
                subjects: currentSubjects,
                sections: currentSections,
                semesters: currentSemesters,
                teachingAssignments: currentAssignments
            };
            
            try {
                let response;
                
                if (currentFacultyId) {
                    // Update existing faculty
                    faculty._id = currentFacultyId;
                    response = await fetch(`/admin/api/faculty/${currentFacultyId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(faculty)
                    });
                } else {
                    // Add new faculty
                    response = await fetch('/admin/api/faculty', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(faculty)
                    });
                }
                
                if (!response.ok) {
                    throw new Error('Failed to save faculty data');
                }
                
                // Show success message
                alert(currentFacultyId ? 'Faculty updated successfully!' : 'Faculty added successfully!');
                
                // Close modal
                facultyModal.hide();
                
                // Refresh the page
                window.location.reload();
                
            } catch (error) {
                console.error('Error saving faculty:', error);
                alert('Error saving faculty data. Please try again.');
            }
        }
        

    // Show delete confirmation modal
        function showDeleteConfirmation(facultyId) {
            const faculty = facultyData.find(f => f._id === facultyId);
            if (!faculty) return;
            
            // Set confirmation message
            document.getElementById('confirmationModalBody').innerHTML = `
                Are you sure you want to delete faculty member <strong>${faculty.name}</strong>?
                This action cannot be undone.
            `;
            
            // Set up confirm button
            const confirmActionBtn = document.getElementById('confirmActionBtn');
            confirmActionBtn.onclick = async () => {
                try {
                    const response = await fetch(`/admin/api/faculty/${facultyId}`, {
                        method: 'DELETE'
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to delete faculty');
                    }
                    
                    // Refresh data
                    await loadFacultyData();
                    
                    // Hide modal
                    confirmationModal.hide();
                    
                    // Show success message
                    alert('Faculty deleted successfully!');
                } catch (error) {
                    console.error('Error deleting faculty:', error);
                    alert('Error deleting faculty. Please try again.');
                }
            };
            
            // Show modal
            confirmationModal.show();
        }
    });
    </script>
    
</body>
</html>