<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Builder</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2c3e50;
            --primary-light: #eaecef;
            --secondary-color: #6c757d;
            --success-color: #27ae60;
            --danger-color: #c0392b;
            --light-bg: #f8f9fa;
            --dark-text: #2c3e50;
            --border-radius: 0.375rem;
            --box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
            --transition: all 0.25s ease;
        }

        body {
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            color: var(--dark-text);
            background-color: #f5f7fa;
            line-height: 1.6;
        }

        .main-container {
            padding: 1.5rem 0;
        }

        .page-title {
            font-weight: 600;
            color: var(--dark-text);
            margin-bottom: 1.75rem;
            position: relative;
            padding-bottom: 0.75rem;
            font-size: 1.75rem;
        }

        .page-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background-color: var(--primary-color);
        }

        .card {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            margin-bottom: 2rem;
        }

        .card-header {
            background-color: var(--primary-color);
            color: white;
            border-bottom: none;
            padding: 1.25rem 1.5rem;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
            font-weight: 500;
        }

        .card-body {
            padding: 1.75rem;
        }

        .form-section {
            background-color: var(--light-bg);
            padding: 1.75rem;
            border-radius: var(--border-radius);
            margin-bottom: 2rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .form-section-title {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.25rem;
        }

        .form-section-icon {
            background-color: var(--primary-light);
            color: var(--primary-color);
            padding: 0.5rem;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
        }

        .field-item {
            padding: 1.25rem;
            margin-bottom: 1.25rem;
            background-color: #fff;
            border-radius: var(--border-radius);
            border: 1px solid #e0e5ec;
            transition: var(--transition);
            position: relative;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .field-item:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(44, 62, 80, 0.1);
        }

        .field-handle {
            cursor: move;
            color: var(--secondary-color);
            padding: 0.5rem;
        }

        .field-options-container {
            background-color: var(--light-bg);
            padding: 1rem;
            border-radius: var(--border-radius);
            margin-top: 1rem;
            border: 1px solid #e0e5ec;
        }

        .assigned-faculty {
            display: inline-flex;
            align-items: center;
            margin: 0.375rem;
            padding: 0.5rem 0.875rem;
            background-color: var(--primary-light);
            color: var(--primary-color);
            border-radius: 2rem;
            font-size: 0.875rem;
            border: 1px solid rgba(44, 62, 80, 0.2);
            transition: var(--transition);
        }

        .assigned-faculty:hover {
            background-color: rgba(44, 62, 80, 0.1);
        }

        .remove-faculty {
            background: none;
            border: none;
            color: var(--danger-color);
            margin-left: 0.5rem;
            padding: 0;
            font-size: 0.75rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            transition: var(--transition);
        }

        .btn-primary:hover {
            background-color: #1e2b38;
            border-color: #1e2b38;
        }

        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .form-control,
        .form-select {
            padding: 0.625rem 0.875rem;
            border-radius: var(--border-radius);
            border: 1px solid #d1d9e6;
            transition: var(--transition);
            font-size: 0.95rem;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(44, 62, 80, 0.25);
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: #495057;
        }

        .form-switch .form-check-input {
            height: 1.25rem;
            width: 2.5rem;
        }

        .form-switch .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .empty-container {
            padding: 2.5rem;
            text-align: center;
            color: var(--secondary-color);
            border: 2px dashed #dee2e6;
            border-radius: var(--border-radius);
            background-color: rgba(222, 226, 230, 0.2);
        }

        .empty-container i {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #adb5bd;
        }

        .empty-container p {
            margin-bottom: 0;
            font-size: 1rem;
        }

        .action-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
            margin-top: 2rem;
        }

        .action-buttons .btn {
            padding: 0.625rem 1.75rem;
            font-weight: 500;
            min-width: 120px;
        }

        /* Modal styles */
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            background-color: var(--primary-color);
            color: white;
            border-bottom: none;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
        }

        .modal-title {
            font-weight: 500;
        }

        .modal-body {
            padding: 1.75rem;
        }

        .modal-footer {
            border-top: 1px solid #e9ecef;
            padding: 1rem 1.75rem;
        }

        /* Toast styles */
        .toast {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .toast-header {
            border-bottom: none;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
        }

        /* Assigned Section */
        .assigned-section {
            display: inline-flex;
            align-items: center;
            margin: 0.375rem;
            padding: 0.5rem 0.875rem;
            background-color: var(--primary-light);
            color: var(--primary-color);
            border-radius: 2rem;
            font-size: 0.875rem;
            border: 1px solid rgba(44, 62, 80, 0.2);
            transition: var(--transition);
        }

        .assigned-section:hover {
            background-color: rgba(44, 62, 80, 0.1);
        }

        .remove-section {
            background: none;
            border: none;
            color: var(--danger-color);
            margin-left: 0.5rem;
            padding: 0;
            font-size: 0.75rem;
        }

        /* Form Section Container */
        .form-section-container {
            border: 1px solid #e0e5ec;
            padding: 1.25rem;
            margin-bottom: 1.5rem;
            border-radius: var(--border-radius);
            background-color: white;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e0e5ec;
        }
        
        /* Subjects Badge */
        .subject-badge {
            display: inline-flex;
            align-items: center;
            margin: 0.375rem;
            padding: 0.5rem 0.875rem;
            background-color: #e1f5fe;
            color: #0288d1;
            border-radius: 2rem;
            font-size: 0.875rem;
            border: 1px solid rgba(2, 136, 209, 0.2);
            transition: var(--transition);
        }

        .subject-badge:hover {
            background-color: rgba(2, 136, 209, 0.1);
        }

        .remove-subject {
            background: none;
            border: none;
            color: var(--danger-color);
            margin-left: 0.5rem;
            padding: 0;
            font-size: 0.75rem;
        }

        /* Responsive adjustments */
        @media (max-width: 991px) {
            .card-body {
                padding: 1.5rem;
            }

            .form-section {
                padding: 1.5rem;
            }
        }

        @media (max-width: 767px) {
            .field-item .row [class*="col-"] {
                margin-bottom: 1rem;
            }

            .field-item .row [class*="col-"]:last-child {
                margin-bottom: 0;
            }

            .action-buttons {
                flex-direction: column;
                width: 100%;
                gap: 0.5rem;
            }

            .action-buttons .btn {
                width: 100%;
            }

            .card-body {
                padding: 1.25rem;
            }

            .form-section {
                padding: 1.25rem;
            }

            .page-title {
                font-size: 1.5rem;
            }

            .form-section-title {
                font-size: 1.125rem;
            }
        }

        @media (max-width: 575px) {
            .field-item {
                padding: 1rem;
            }

            .empty-container {
                padding: 2rem 1rem;
            }

            .field-options-container {
                padding: 0.875rem;
            }
        }
    </style>
</head>

<body>
    <%- include('partials/adminTopNavbar', { admin: adminData }) %>
    <div class="container main-container flex">
        <%- include('./partials/adminSideNavbar', { path: currentPath, admin: adminData }) %>
    
        <h2 class="page-title">Feedback Form Builder</h2>
    
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>Create New <%= formType %> Feedback Form</span>
            </div>
            <div class="card-body">
                <form id="createFormForm">
                    <div class="row mb-4">
                        <div class="col-lg-6 mb-3 mb-lg-0">
                            <div class="mb-3">
                                <label for="formType" class="form-label">Form Type</label>
                                <input type="text" class="form-control" value="<%= formType %>" readonly>
                                <input type="hidden" id="formType" name="formType" value="<%= formType %>">
                            </div>
    
                            <div class="mb-3">
                                <label for="formTitle" class="form-label">Form Title</label>
                                <input type="text" class="form-control" id="formTitle" name="title" required
                                    placeholder="Enter descriptive title">
                            </div>
                        </div>
    
                        <div class="col-lg-6">
                            <div class="mb-3">
                                <label for="formDeadline" class="form-label">Submission Deadline</label>
                                <input type="date" class="form-control" id="formDeadline" name="deadline" required>
                            </div>
    
                            <!-- Semesters Selection -->
                            <div class="mb-3">
                                <label for="semesters" class="form-label">Semesters</label>
                                <select class="form-select" id="semesterSelect">
                                    <option value="">-- Select Semester --</option>
                                    <% semesterCategories.forEach(function(semester) { %>
                                        <option value="<%= semester %>"><%= semester %></option>
                                    <% }); %>
                                </select>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary" id="addSemesterBtn">
                                        <i class="fas fa-plus"></i> Add Semester
                                    </button>
                                </div>
                                <div id="assignedSemesters" class="mt-2">
                                    <!-- Assigned semesters will appear here -->
                                    <div class="empty-container" id="emptySemestersMessage">
                                        <i class="fas fa-graduation-cap"></i>
                                        <p>No semesters have been assigned to this form yet.</p>
                                    </div>
                                </div>
                            </div>
    
                            <input type="hidden" id="createdBy" name="createdBy"
                                value="<%= adminData ? adminData.id : '' %>">
    
                            <div class="mb-3">
                                <label class="form-label">Form Status</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="formStatus"
                                        name="status" value="active" checked>
                                    <label class="form-check-label" for="formStatus">
                                        <span class="status-text">Active</span>
                                    </label>
                                </div>
                                <small class="text-muted">Active forms are immediately available for
                                    submission</small>
                            </div>
                        </div>
                    </div>
    
                    <!-- Faculty Assignment Section -->
                    <div class="form-section">
                        <div class="form-section-title">
                            <span class="form-section-icon"><i class="fas fa-user-tie"></i></span>
                            Faculty Assignment
                        </div>
    
                        <div class="row align-items-end">
                            <div class="col-md-8 mb-3 mb-md-0">
                                <label for="facultySelect" class="form-label">Select Faculty Members</label>
                                <select class="form-select" id="facultySelect">
                                    <option value="">-- Select Faculty --</option>
                                    <% faculties.forEach(function(faculty) { %>
                                        <option value="<%= faculty._id %>">
                                            <%= faculty.name %> (<%= faculty.department %>)
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <button type="button" class="btn btn-outline-primary w-100" id="addFacultyBtn">
                                    <i class="fas fa-user-plus me-2"></i> Assign Faculty
                                </button>
                            </div>
                        </div>
    
                        <div id="assignedFaculties" class="mt-3">
                            <div class="empty-container" id="emptyFacultiesMessage">
                                <i class="fas fa-user-check"></i>
                                <p>No faculty members have been assigned to this form yet.</p>
                            </div>
                            <!-- Assigned faculties will appear here -->
                        </div>
                    </div>
    
                    <!-- Section Assignment -->
                    <div class="form-section">
                        <div class="form-section-title">
                            <span class="form-section-icon"><i class="fas fa-layer-group"></i></span>
                            Section Assignment
                        </div>
    
                        <div class="row align-items-end">
                            <div class="col-md-8 mb-3 mb-md-0">
                                <label for="sectionSelect" class="form-label">Select Sections</label>
                                <select class="form-select" id="sectionSelect">
                                    <option value="">-- Select Section --</option>
                                    <% sectionCategories.forEach(function(section) { %>
                                        <option value="<%= section %>">
                                            <%= section %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <button type="button" class="btn btn-outline-primary w-100" id="addSectionBtn">
                                    <i class="fas fa-plus me-2"></i> Assign Section
                                </button>
                            </div>
                        </div>
    
                        <div id="assignedSections" class="mt-3">
                            <div class="empty-container" id="emptySectionsMessage">
                                <i class="fas fa-layer-group"></i>
                                <p>No sections have been assigned to this form yet.</p>
                            </div>
                            <!-- Assigned sections will appear here -->
                        </div>
                    </div>
    
                    <!-- Subjects Section (for Academic forms) -->
                    <% if (formType === 'Academic') { %>
                    <div class="form-section">
                        <div class="form-section-title">
                            <span class="form-section-icon"><i class="fas fa-book"></i></span>
                            Subjects
                        </div>
    
                        <div class="row align-items-end">
                            <div class="col-md-8 mb-3 mb-md-0">
                                <label for="subjectSelect" class="form-label">Select Subjects</label>
                                <select class="form-select" id="subjectSelect">
                                    <option value="">-- Select Subject --</option>
                                    <% subjects.forEach(function(subject) { %>
                                        <option value="<%= subject %>">
                                            <%= subject %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <button type="button" class="btn btn-outline-primary w-100" id="addSubjectBtn">
                                    <i class="fas fa-plus me-2"></i> Add Subject
                                </button>
                            </div>
                        </div>
    
                        <div id="assignedSubjects" class="mt-3">
                            <div class="empty-container" id="emptySubjectsMessage">
                                <i class="fas fa-book"></i>
                                <p>No subjects have been assigned to this form yet.</p>
                            </div>
                            <!-- Assigned subjects will appear here -->
                        </div>
                    </div>
                    <% } %>
    
                    <!-- Form Sections Builder -->
                    <div class="form-section">
                        <div class="form-section-title">
                            <span class="form-section-icon"><i class="fas fa-th-list"></i></span>
                            Form Sections
                        </div>
                        
                        <p class="text-muted mb-3">Create sections to organize your questions (e.g., "Teaching Quality", "Course Content", etc.)</p>
                        
                        <div id="formSectionsContainer">
                            <div class="empty-container" id="emptySectionsContainerMessage">
                                <i class="fas fa-th-list"></i>
                                <p>No form sections have been added yet. Add a section to get started.</p>
                            </div>
                            <!-- Form sections will be added here -->
                        </div>
                        
                        <div class="mt-3">
                            <button type="button" class="btn btn-outline-primary" id="addFormSectionBtn">
                                <i class="fas fa-plus me-2"></i> Add New Section
                            </button>
                        </div>
                    </div>
    
                    <div class="action-buttons">
                        <button type="button" class="btn btn-outline-secondary" id="previewBtn">
                            <i class="fas fa-eye me-2"></i> Preview Form
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i> Create Form
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Add Section Modal -->
    <div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSectionModalLabel">Add Form Section</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="sectionTitle" class="form-label">Section Title</label>
                        <input type="text" class="form-control" id="sectionTitle" placeholder="E.g., Teaching Quality">
                    </div>
                    <div class="mb-3">
                        <label for="sectionDescription" class="form-label">Section Description (Optional)</label>
                        <textarea class="form-control" id="sectionDescription" rows="3" placeholder="Provide instructions or context for this section"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveSectionBtn">Add Section</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add Question Modal -->
    <div class="modal fade" id="addQuestionModal" tabindex="-1" aria-labelledby="addQuestionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addQuestionModalLabel">Add Question</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="currentSectionId">
                    <div class="mb-3">
                        <label for="questionText" class="form-label">Question Text</label>
                        <input type="text" class="form-control" id="questionText" placeholder="Enter your question">
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="questionType" class="form-label">Question Type</label>
                            <select class="form-select" id="questionType">
                                <option value="rating">Rating</option>
                                <option value="yes_no">Yes/No</option>
                                <option value="mcq">Multiple Choice</option>
                                <option value="text">Text</option>
                                <option value="grid">Grid</option>
                                <option value="dropdown">Dropdown</option>
                                <option value="date">Date</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check pt-4 mt-2">
                                <input class="form-check-input" type="checkbox" id="questionRequired" checked>
                                <label class="form-check-label" for="questionRequired">Required</label>
                            </div>
                        </div>
                    </div>
                    <div id="questionOptions" style="display: none;">
                        <div class="mb-3 mcq-options">
                            <label class="form-label">Options (comma separated)</label>
                            <textarea class="form-control" id="optionsText" rows="3" placeholder="Option 1, Option 2, Option 3"></textarea>
                        </div>
                    </div>
                    <div id="gridOptions" style="display: none;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Row Labels (comma separated)</label>
                                <textarea class="form-control" id="gridRows" rows="3" placeholder="Row 1, Row 2, Row 3"></textarea>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Column Labels (comma separated)</label>
                                <textarea class="form-control" id="gridColumns" rows="3" placeholder="Column 1, Column 2, Column 3"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveQuestionBtn">Add Question</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    
    <script>
        $(document).ready(function () {
            // Initialize variables
            let sectionCounter = 0;
            let questionCounter = 0;
            
            // Bootstrap modals
            const addSectionModal = new bootstrap.Modal(document.getElementById('addSectionModal'));
            const addQuestionModal = new bootstrap.Modal(document.getElementById('addQuestionModal'));
            
            // Toggle status text
            $('#formStatus').change(function () {
                $('.status-text').text($(this).is(':checked') ? 'Active' : 'Inactive');
                $(this).val($(this).is(':checked') ? 'active' : 'closed');
            });
    
            // Add semester
            $('#addSemesterBtn').click(function() {
                const semesterSelect = $('#semesterSelect');
                const semesterValue = semesterSelect.val();
                
                if (semesterValue) {
                    // Hide empty message
                    $('#emptySemestersMessage').hide();
                    
                    const semesterHtml = `
                    <div class="assigned-item" data-semester="${semesterValue}">
                        <i class="fas fa-graduation-cap me-1"></i>
                        ${semesterValue}
                        <button type="button" class="btn btn-sm text-danger remove-assigned-item">
                            <i class="fas fa-times"></i>
                        </button>
                        <input type="hidden" name="semesters[]" value="${semesterValue}">
                    </div>
                    `;
                    
                    $('#assignedSemesters').append(semesterHtml);
                    semesterSelect.val('');
                }
            });
    
            // Add faculty member
                $('#addFacultyBtn').click(function () {
    const facultySelect = $('#facultySelect');
    const facultyId = facultySelect.val();

    if (facultyId) {
        const facultyName = facultySelect.find('option:selected').text();
        const facultyHtml = `
        <div class="assigned-item" data-id="${facultyId}">
            <i class="fas fa-user-tie me-1"></i>
            ${facultyName}
            <button type="button" class="btn btn-sm text-danger remove-assigned-item">
                <i class="fas fa-times"></i>
            </button>
            <input type="hidden" name="facultyAssigned[]" value="${facultyId.toString()}">
        </div>
        `;
        
        // Hide empty message if it's visible
        $('#emptyFacultiesMessage').hide();
        $('#assignedFaculties').append(facultyHtml);
        facultySelect.val('');
    }
});
          
            // Remove assigned item (faculty, section, semester) when the X is clicked
            $(document).on('click', '.remove-assigned-item', function () {
                const container = $(this).closest('.assigned-item').parent();
                $(this).closest('.assigned-item').remove();
                
                // Show empty message if no items are assigned
                if (container.attr('id') === 'assignedFaculties' && container.find('.assigned-item').length === 0) {
                    $('#emptyFacultiesMessage').show();
                }
                else if (container.attr('id') === 'assignedSections' && container.find('.assigned-item').length === 0) {
                    $('#emptySectionsMessage').show();
                }
                else if (container.attr('id') === 'assignedSemesters' && container.find('.assigned-item').length === 0) {
                    $('#emptySemestersMessage').show();
                }
                else if (container.attr('id') === 'assignedSubjects' && container.find('.assigned-item').length === 0) {
                    $('#emptySubjectsMessage').show();
                }
            });
    
            // Section assignment
            $('#addSectionBtn').click(function () {
                const sectionSelect = $('#sectionSelect');
                const sectionValue = sectionSelect.val();
                
                if (sectionValue) {
                    const sectionHtml = `
                    <div class="assigned-item" data-section="${sectionValue}">
                        <i class="fas fa-layer-group me-1"></i>
                        ${sectionValue}
                        <button type="button" class="btn btn-sm text-danger remove-assigned-item">
                            <i class="fas fa-times"></i>
                        </button>
                        <input type="hidden" name="sectionsAssigned[]" value="${sectionValue}">
                    </div>
                    `;
                    
                    // Hide empty message if it's visible
                    $('#emptySectionsMessage').hide();
                    $('#assignedSections').append(sectionHtml);
                    sectionSelect.val('');
                }
            });
    
            // Subject assignment (for Academic forms only)
            $('#addSubjectBtn').click(function () {
                const subjectSelect = $('#subjectSelect');
                const subjectValue = subjectSelect.val();
                
                if (subjectValue) {
                    const subjectHtml = `
                    <div class="assigned-item" data-subject="${subjectValue}">
                        <i class="fas fa-book me-1"></i>
                        ${subjectValue}
                        <button type="button" class="btn btn-sm text-danger remove-assigned-item">
                            <i class="fas fa-times"></i>
                        </button>
                        <input type="hidden" name="subjects[]" value="${subjectValue}">
                    </div>
                    `;
                    
                    // Hide empty message if it's visible
                    $('#emptySubjectsMessage').hide();
                    $('#assignedSubjects').append(subjectHtml);
                    subjectSelect.val('');
                }
            });
    
            // Form Section Management
            $('#addFormSectionBtn').click(function() {
                // Show the add section modal
                $('#sectionTitle').val('');
                $('#sectionDescription').val('');
                addSectionModal.show();
            });
    
            $('#saveSectionBtn').click(function() {
                const sectionTitle = $('#sectionTitle').val().trim();
                if (sectionTitle) {
                    sectionCounter++;
                    const sectionId = `section-${sectionCounter}`;
                    const description = $('#sectionDescription').val().trim();
                    
                    const sectionHtml = `
                    <div class="form-section-container" id="${sectionId}" data-section-index="${sectionCounter-1}">
                        <div class="section-header">
                            <h5>${sectionTitle}</h5>
                            <div>
                                <button type="button" class="btn btn-sm btn-outline-primary add-question-btn" data-section="${sectionId}">
                                    <i class="fas fa-plus"></i> Add Question
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-section-btn">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="section-description mb-3">
                            ${description ? `<p class="text-muted">${description}</p>` : ''}
                        </div>
                        <input type="hidden" name="sections[${sectionCounter-1}][title]" value="${sectionTitle}">
                        <input type="hidden" name="sections[${sectionCounter-1}][description]" value="${description}">
                        <div class="questions-container">
                            <div class="empty-container section-empty-message">
                                <i class="fas fa-question-circle"></i>
                                <p>No questions have been added to this section yet.</p>
                            </div>
                        </div>
                    </div>
                    `;
                    
                    // Hide empty message and add the section
                    $('#emptySectionsContainerMessage').hide();
                    $('#formSectionsContainer').append(sectionHtml);
                    
                    // Close the modal
                    addSectionModal.hide();
                }
            });
    
            // Remove a section
            $(document).on('click', '.remove-section-btn', function() {
                // Remove the section
                $(this).closest('.form-section-container').remove();
                
                // Re-index the remaining sections
                $('#formSectionsContainer .form-section-container').each(function(index) {
                    const sectionId = $(this).attr('id');
                    $(this).attr('data-section-index', index);
                    
                    // Update hidden inputs for section
                    $(this).find('input[name^="sections["]').each(function() {
                        const fieldName = $(this).attr('name').split(/[\[\]]/)[2]; // Extract field name (title or description)
                        $(this).attr('name', `sections[${index}][${fieldName}]`);
                    });
                    
                    // Update questions indexing
                    $(this).find('.question-item').each(function(qIndex) {
                        $(this).find('input[name^="sections["]').each(function() {
                            const parts = $(this).attr('name').split(/[\[\]]/);
                            if (parts.length >= 5) {
                                const questionField = parts[4]; // Extract question field name
                                $(this).attr('name', `sections[${index}][questions][${qIndex}][${questionField}]`);
                            } else if (parts.length >= 7 && parts[4] === 'gridOptions') {
                                // Handle grid options specifically
                                const gridPart = parts[6]; // Rows or columns
                                $(this).attr('name', `sections[${index}][questions][${qIndex}][gridOptions][${gridPart}][]`);
                            } else if (parts[3] === 'questions' && parts[5] === 'options') {
                                // Handle question options
                                $(this).attr('name', `sections[${index}][questions][${qIndex}][options][]`);
                            }
                        });
                    });
                });
                
                // Show empty message if no sections exist
                if ($('#formSectionsContainer .form-section-container').length === 0) {
                    $('#emptySectionsContainerMessage').show();
                }
            });
    
            // Show Add Question Modal
            $(document).on('click', '.add-question-btn', function() {
                const sectionId = $(this).data('section');
                $('#currentSectionId').val(sectionId);
                $('#questionText').val('');
                $('#questionType').val('rating');
                $('#questionRequired').prop('checked', true);
                $('#optionsText').val('1, 2, 3, 4, 5');
                $('#gridRows').val('');
                $('#gridColumns').val('');
                
                // Show/hide options based on question type
                toggleQuestionOptions('rating');
                
                addQuestionModal.show();
            });
    
            // Toggle question options based on type
            $('#questionType').change(function() {
                const type = $(this).val();
                toggleQuestionOptions(type);
            });
    
            function toggleQuestionOptions(type) {
                $('#questionOptions').hide();
                $('#gridOptions').hide();
                
                if (type === 'mcq' || type === 'dropdown') {
                    $('#questionOptions').show();
                    $('#optionsText').val('Option 1, Option 2, Option 3');
                } else if (type === 'grid') {
                    $('#gridOptions').show();
                } else if (type === 'rating') {
                    $('#questionOptions').show();
                    $('#optionsText').val('1, 2, 3, 4, 5');
                }
            }
    
            // Save Question
            $('#saveQuestionBtn').click(function() {
                const sectionId = $('#currentSectionId').val();
                const questionText = $('#questionText').val().trim();
                const questionType = $('#questionType').val();
                const isRequired = $('#questionRequired').is(':checked');
                
                if (questionText) {
                    questionCounter++;
                    const sectionElement = $(`#${sectionId}`);
                    const sectionIndex = sectionElement.data('section-index');
                    const questionsContainer = sectionElement.find('.questions-container');
                    const questionCount = questionsContainer.find('.question-item').length;
                    const questionIndex = questionCount; // Zero-based index for the new question
                    
                    const questionHtml = createQuestionHtml(sectionIndex, questionIndex, questionText, questionType, isRequired);
                    
                    // Find the questions container and add the question
                    questionsContainer.find('.section-empty-message').hide();
                    questionsContainer.append(questionHtml);
                    
                    // Close the modal
                    addQuestionModal.hide();
                }
            });
    
           // Update the createQuestionHtml function to properly handle options
function createQuestionHtml(sectionIndex, questionIndex, questionText, questionType, isRequired) {
    let optionsHtml = '';
    let hiddenInputs = `
        <input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][questionText]" value="${questionText}">
        <input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][questionType]" value="${questionType}">
        <input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][required]" value="${isRequired}">
    `;
    
    // Handle different question types
    if (questionType === 'mcq' || questionType === 'dropdown' || questionType === 'rating') {
        const optionsText = $('#optionsText').val();
        const options = optionsText.split(',').map(opt => opt.trim()).filter(opt => opt);
        
        // Add options preview
        if (options.length > 0) {
            optionsHtml = `<div class="question-options mt-2 mb-2">
                <div class="badge bg-light text-dark me-1">Options: ${options.join(', ')}</div>
            </div>`;
            
            // Add hidden inputs for options
            options.forEach((opt, idx) => {
                hiddenInputs += `<input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][options][]" value="${opt}">`;
            });
        }
    } else if (questionType === 'grid') {
        const rows = $('#gridRows').val().split(',').map(r => r.trim()).filter(r => r);
        const cols = $('#gridColumns').val().split(',').map(c => c.trim()).filter(c => c);
        
        if (rows.length > 0 && cols.length > 0) {
            optionsHtml = `<div class="question-options mt-2 mb-2">
                <div class="badge bg-light text-dark me-1">Rows: ${rows.join(', ')}</div>
                <div class="badge bg-light text-dark">Columns: ${cols.join(', ')}</div>
            </div>`;
            
            // Add hidden inputs for grid options
            rows.forEach((row) => {
                hiddenInputs += `<input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][gridOptions][rows][]" value="${row}">`;
            });
            
            cols.forEach((col) => {
                hiddenInputs += `<input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][gridOptions][columns][]" value="${col}">`;
            });
        }
    } else if (questionType === 'yes_no') {
        // Add hidden inputs for yes/no options
        hiddenInputs += `<input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][options][]" value="Yes">`;
        hiddenInputs += `<input type="hidden" name="sections[${sectionIndex}][questions][${questionIndex}][options][]" value="No">`;
    }
    
    return `
    <div class="field-item question-item" data-question-index="${questionIndex}">
        <div class="d-flex justify-content-between align-items-start">
            <div>
                <div class="d-flex align-items-center">
                    <span class="badge ${isRequired ? 'bg-danger' : 'bg-secondary'} me-2">
                        ${isRequired ? 'Required' : 'Optional'}
                    </span>
                    <span class="badge bg-primary">${questionType.replace('_', ' ').toUpperCase()}</span>
                </div>
                <h5 class="mt-2">${questionText}</h5>
                ${optionsHtml}
            </div>
            <div>
                <button type="button" class="btn btn-sm btn-outline-danger remove-question-btn">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        ${hiddenInputs}
    </div>
    `;
}
        // Remove Question
        $(document).on('click', '.remove-question-btn', function() {
            const questionItem = $(this).closest('.question-item');
            const sectionContainer = questionItem.closest('.form-section-container');
            const sectionIndex = sectionContainer.data('section-index');
            
            // Remove the question
            questionItem.remove();
            
            // Re-index the remaining questions in this section
            sectionContainer.find('.question-item').each(function(index) {
                $(this).attr('data-question-index', index);
                
                // Update hidden inputs for question
                $(this).find('input[name^="sections["]').each(function() {
                    const parts = $(this).attr('name').split(/[\[\]]/);
                    if (parts.length >= 5) {
                        const questionField = parts[4]; // Extract question field name
                        $(this).attr('name', `sections[${sectionIndex}][questions][${index}][${questionField}]`);
                    } else if (parts.length >= 7 && parts[4] === 'gridOptions') {
                        // Handle grid options specifically
                        const gridPart = parts[6]; // Rows or columns
                        $(this).attr('name', `sections[${sectionIndex}][questions][${index}][gridOptions][${gridPart}][]`);
                    } else if (parts[3] === 'questions' && parts[5] === 'options') {
                        // Handle question options
                        $(this).attr('name', `sections[${sectionIndex}][questions][${index}][options][]`);
                    }
                });
            });
            
            // Show empty message if no questions exist in this section
            if (sectionContainer.find('.question-item').length === 0) {
                sectionContainer.find('.section-empty-message').show();
            }
        });

        // Form submission
        $('#createFormForm').submit(function(e) {
    e.preventDefault();
    
    // Validate required fields
    if (!$('#formTitle').val().trim()) {
        alert('Form title is required');
        return;
    }
    
    if (!$('#formDeadline').val()) {
        alert('Submission deadline is required');
        return;
    }
    
    // Validate at least one semester is assigned
    if ($('#assignedSemesters .assigned-item').length === 0) {
        alert('At least one semester must be assigned to the form');
        return;
    }
    
    // Validate at least one faculty is assigned
    if ($('#assignedFaculties .assigned-item').length === 0) {
        alert('At least one faculty member must be assigned to the form');
        return;
    }
    
    // Validate at least one section is assigned
    if ($('#assignedSections .assigned-item').length === 0) {
        alert('At least one section must be assigned to the form');
        return;
    }
    
    // Validate form has at least one section with questions
    if ($('#formSectionsContainer .form-section-container').length === 0) {
        alert('Form must have at least one section');
        return;
    }
    
    // Check if each section has at least one question
    let hasEmptySection = false;
    $('#formSectionsContainer .form-section-container').each(function() {
        if ($(this).find('.question-item').length === 0) {
            hasEmptySection = true;
            return false; // Break the loop
        }
    });
    
    if (hasEmptySection) {
        alert('Each section must contain at least one question');
        return;
    }
    
    // Get form data
    const formData = $(this).serializeArray();
    
    // Convert to an object and ensure facultyAssigned is an array of strings
    const formObject = {};
    $.each(formData, function(i, field) {
        // Handle arrays
        if (field.name.endsWith('[]')) {
            const key = field.name.replace('[]', '');
            if (!formObject[key]) {
                formObject[key] = [];
            }
            // Ensure value is a string
            formObject[key].push(String(field.value));
        } else {
            formObject[field.name] = field.value;
        }
    });
    
    // Submit the form
    $.ajax({
        url: `/admin/adminHome/forms/create/${$('#formType').val()}`,
        type: 'POST',
        data: JSON.stringify(formObject),
        contentType: 'application/json',
        success: function(response) {
            if (response.success) {
                alert(response.message);
                if (response.redirect) {
                    window.location.href = response.redirect;
                }
            } else {
                alert('Error: ' + response.message);
            }
        },
        error: function(xhr) {
            let errorMessage = 'An error occurred while creating the form';
            if (xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage = xhr.responseJSON.message;
            }
            alert('Error: ' + errorMessage);
        }
    });
});
        // Preview form functionality
        $('#previewBtn').click(function() {
            // Show preview in a modal or new tab
            alert('Preview functionality will be implemented in the next phase');
        });
    });
</script>

</body>
</html>