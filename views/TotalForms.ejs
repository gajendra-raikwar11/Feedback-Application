<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forms Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
    /* All your existing styles */
:root {
    --primary-color: #4361ee;
    --primary-hover: #3a56d4;
    --secondary-color: #3f3d56;
    --light-bg: #f8f9fa;
    --card-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    --card-hover-shadow: 0 10px 25px rgba(67, 97, 238, 0.15);
    --success-color: #2dce89;
    --warning-color: #ffc107;
    --danger-color: #f5365c;
    --border-radius: 10px;
    --transition-time: 0.3s;
}

/* Additional styles for toast notifications */
.toast-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1055;
}

.toast {
    min-width: 300px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border: none;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 10px;
}

.toast.bg-success {
    background-color: #2dce89 !important;
    color: white;
}

.toast.bg-danger {
    background-color: #f5365c !important;
    color: white;
}

.toast.bg-warning {
    background-color: #ffc107 !important;
    color: #212529;
}

.toast.bg-info {
    background-color: #11cdef !important;
    color: white;
}

.toast-header {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    color: inherit;
    background-color: rgba(255, 255, 255, 0.1);
    border-bottom: none;
}

.toast-body {
    padding: 0.75rem 1rem;
}

.toast .btn-close {
    filter: brightness(0) invert(1);
    opacity: 0.8;
}

.toast .btn-close:focus {
    box-shadow: 0 0 0 0.25rem rgba(255, 255, 255, 0.25);
}

/* Only for dark backgrounds */
.toast.bg-success .btn-close,
.toast.bg-danger .btn-close,
.toast.bg-info .btn-close {
    filter: brightness(0) invert(1);
}
body {
    background-color: #f7f9fc;
    font-family: 'Segoe UI', 'Roboto', sans-serif;
    color: #333;
}

.main-container {
    padding: 30px 20px;
}

.page-header {
    padding-bottom: 20px;
    margin-bottom: 30px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.page-title {
    font-weight: 700;
    color: var(--secondary-color);
    margin-bottom: 8px;
    position: relative;
    display: inline-block;
}

.page-title:after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 40px;
    height: 4px;
    background-color: var(--primary-color);
    border-radius: 5px;
}

/* Filter Card */
.filter-card {
    background: #ffffff;
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    margin-bottom: 25px;
    border: none;
    overflow: hidden;
}

.filter-card .card-body {
    padding: 20px;
}

.form-control,
.form-select {
    border: 1px solid #e9ecef;
    border-radius: 7px;
    padding: 10px 15px;
    height: calc(2.5rem + 2px);
    box-shadow: none;
    transition: all 0.2s;
}

.form-control:focus,
.form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.15);
}

.form-label {
    font-weight: 500;
    color: #4b4b4b;
    margin-bottom: 8px;
}

/* Form Cards - MODIFIED for fixing status badge overlap */
.form-card {
    background-color: #ffffff;
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    margin-bottom: 25px;
    position: relative;
    overflow: hidden;
    transition: all var(--transition-time) ease;
    border: none;
    height: 100%;
}

.form-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--card-hover-shadow);
}

.form-card .card-body {
    padding: 25px 20px;
    /* Increased top padding to prevent overlap with status badge */
    padding-top: 40px;
}

.card-status-badge {
    position: absolute;
    top: 15px;
    right: 15px;
    padding: 6px 12px;
    border-radius: 30px;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.3px;
    z-index: 2; /* Increased z-index */
    display: flex;
    align-items: center;
    gap: 5px;
}

.card-status-badge.active {
    background-color: rgba(45, 206, 137, 0.1);
    color: var(--success-color);
    z-index: 0;
}

.card-status-badge.inactive {
    background-color: rgba(163, 163, 163, 0.1);
    color: #7c7c7c;
    z-index: 0;
}

.card-status-badge.expired {
    background-color: rgba(245, 54, 92, 0.1);
    color: var(--danger-color);
    z-index: 0;
}

.card-title {
    color: var(--secondary-color);
    font-weight: 700;
    line-height: 1.3;
    margin-bottom: 20px;
    font-size: 1.1rem;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    word-break: break-word; /* Added to handle long titles */
    position: relative; /* Added for better positioning */
    max-width: calc(100% - 100px); /* Added to prevent overlap with badge */
}

.form-meta {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.meta-item {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: #646464;
}

.meta-item i {
    color: var(--primary-color);
    width: 20px;
    text-align: center;
    margin-right: 10px;
}

.assigned-faculty-list,
.assigned-classes {
    padding-top: 15px;
    margin-top: 15px;
    border-top: 1px solid #f0f0f0;
}

.assigned-faculty-list h6,
.assigned-classes h6 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #4b4b4b;
    margin-bottom: 10px;
    display: flex;
    align-items: center;
}

.assigned-faculty-list h6 i,
.assigned-classes h6 i {
    color: var(--primary-color);
    margin-right: 10px;
}

.faculty-badges,
.class-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
}

.faculty-badge,
.class-badge {
    font-weight: 500;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.75rem;
    background-color: #f7f9fc;
    color: #555;
    border: 1px solid #eaeaea;
}

.badge.additional {
    background-color: #e2e8f0;
    color: #475569;
}

.card-footer {
    background-color: #fcfcfc;
    border-top: 1px solid #f0f0f0;
    padding: 15px 20px;
}

.btn {
    padding: 0.5rem 1rem;
    border-radius: 7px;
    font-weight: 500;
    transition: all 0.25s ease;
}

.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-primary:hover {
    background-color: var(--primary-hover);
    border-color: var(--primary-hover);
}

.btn-outline-primary {
    color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-outline-primary:hover {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: #fff;
}

.btn-outline-secondary {
    color: #6c757d;
    border-color: #6c757d;
}

.btn-outline-danger {
    color: var(--danger-color);
    border-color: var(--danger-color);
}

.btn-outline-danger:hover {
    background-color: var(--danger-color);
    border-color: var(--danger-color);
    color: #fff;
}

.btn i {
    margin-right: 5px;
}

.btn-icon {
    width: 36px;
    height: 36px;
    padding: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 7px;
}

/* Empty Container */
.empty-container {
    padding: 60px 30px;
    text-align: center;
    background-color: #ffffff;
    border-radius: var(--border-radius);
    border: 2px dashed #e2e8f0;
    margin: 20px 0;
}

.empty-container i {
    font-size: 4rem;
    color: #cbd5e1;
    margin-bottom: 20px;
}

.empty-container h4 {
    font-weight: 700;
    color: #4b4b4b;
    margin-bottom: 15px;
}

/* Modal */
.modal-content {
    border: none;
    border-radius: var(--border-radius);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
}

.modal-header {
    border-bottom: 1px solid #f0f0f0;
    padding: 20px;
}

.modal-body {
    padding: 25px;
}

.modal-footer {
    border-top: 1px solid #f0f0f0;
    padding: 15px 20px;
}

/* Toast notifications */
.toast {
    background-color: #fff;
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
}

.toast-header {
    border-bottom: none;
    padding: 15px 15px 5px 15px;
}

.toast-body {
    padding: 5px 15px 15px 15px;
}

/* Custom checkboxes for bulk selection */
.form-select-overlay {
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 2;
}

.form-checkbox {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

/* Bulk actions toolbar */
.bulk-actions {
    border-radius: var(--border-radius);
    background-color: #ffffff;
    box-shadow: var(--card-shadow);
    transition: all 0.3s ease;
}

.form-stats {
    background-color: #ffffff;
    border-radius: var(--border-radius);
    box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
    padding: 24px 20px;
    text-align: center;
    transition: all 0.25s cubic-bezier(0.17, 0.67, 0.83, 0.67);
    height: 100%;
    position: relative;
    overflow: hidden;
    border-top: 4px solid var(--primary-color);
}

.form-stats:hover {
    transform: translateY(-4px);
    box-shadow: rgba(67, 97, 238, 0.15) 0px 8px 20px;
}

.form-stats::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(67, 97, 238, 0.03), transparent);
    z-index: 0;
}

.stat-number {
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 8px;
    position: relative;
    z-index: 0;
}

.stat-label {
    color: var(--secondary-color);
    font-weight: 600;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative;
    z-index: 0;
}

/* Responsive */
@media (max-width: 991.98px) {
    .form-meta {
        gap: 8px;
    }

    .card-body {
        padding: 20px 15px;
        padding-top: 40px; /* Keep consistent spacing for badge */
    }
    
    .card-title {
        max-width: calc(100% - 80px); /* Adjust for smaller screens */
    }
}

@media (max-width: 767.98px) {
    .main-container {
        padding: 20px 15px;
    }

    .page-header {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start !important;
    }

    .form-card {
        margin-bottom: 20px;
    }

    .card-title {
        font-size: 1rem;
        max-width: calc(100% - 70px); /* Further adjust for mobile */
    }
    
    .form-stats {
        margin-bottom: 15px;
        padding: 18px 16px;
    }

    .stat-number {
        font-size: 1.75rem;
    }

    .stat-label {
        font-size: 0.75rem;
    }
}

@media (max-width: 575.98px) {
    .filter-form-row {
        flex-direction: column;
    }

    .filter-form-row>div {
        width: 100%;
        margin-bottom: 15px;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .card-footer .d-flex {
        flex-direction: column;
        gap: 10px;
    }

    .card-footer .btn-group {
        width: 100%;
    }
    
    /* Status badge and title adjustments for very small screens */
    .card-status-badge {
        padding: 4px 8px;
        font-size: 0.7rem;
        top: 10px;
        right: 10px;
    }
    
    .card-body {
        padding-top: 35px; /* Slightly reduced for very small screens */
    }
}
</style>
</head>

<body>
    <%- include('partials/adminTopNavbar', { admin: adminData }) %>

<div class="container-fluid main-container">
    <div class="row">
        <div class="col-lg-2 col-md-3">
             <%- include('./partials/adminSideNavbar', { path: currentPath ,admin: adminData  }) %>
        </div>

        <div class="col-lg-10 col-md-9">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center page-header">
                <div>
                    <h2 class="page-title">Forms Management</h2>
                    <p class="text-muted">Create and manage evaluation forms</p>
                </div>
                <div class="actions">
                    <button id="enableBulkSelect"
                        class="btn btn-outline-secondary me-2 d-none d-md-inline-block">
                        <i class="fas fa-check-square"></i> Bulk Select
                    </button>
                    <a href="/admin/adminHome" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create Form
                    </a>
                </div>
            </div>

            <!-- Stats Section -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="form-stats">
            <div class="stat-number">
                <%= forms.length %>
            </div>
            <div class="stat-label">Total Forms</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-stats">
            <% 
                const activeForms = forms.filter(form => 
                    form.isActive && new Date(form.endDate) >= new Date()
                ).length; 
            %>
            <div class="stat-number">
                <%= activeForms %>
            </div>
            <div class="stat-label">Active Forms</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-stats">
            <% 
                const inactiveForms = forms.filter(form => 
                    !form.isActive || new Date(form.endDate) < new Date()
                ).length; 
            %>
            <div class="stat-number">
                <%= inactiveForms %>
            </div>
            <div class="stat-label">Inactive Forms</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-stats">
           
            <div class="stat-number">
                    <p><%= totalSubmissions %></p>
            </div>
            <div class="stat-label">Submissions</div>
        </div>
    </div>
</div>

            <!-- Bulk Actions Toolbar -->
            <div class="bulk-actions card mb-4" style="display: none;">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <span class="badge bg-primary rounded-pill me-3"><span id="selectedCount">0</span>
                            selected</span>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-success bulk-action" data-action="activate">
                                <i class="fas fa-check-circle"></i> Activate
                            </button>
                            <button class="btn btn-sm btn-outline-secondary bulk-action"
                                data-action="deactivate">
                                <i class="fas fa-pause-circle"></i> Deactivate
                            </button>
                            <button class="btn btn-sm btn-outline-danger bulk-action" data-action="delete">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                    <button class="btn btn-sm btn-light" id="cancelBulkSelect">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="card filter-card">
                <div class="card-body">
                    <form id="filterForm">
                        <div class="row g-3 filter-form-row">
                            <div class="col-lg-4 col-md-6">
                                <label for="search" class="form-label">
                                    <i class="fas fa-search text-muted me-2"></i>Search Forms
                                </label>
                                <input type="text" class="form-control" id="search"
                                    placeholder="Search by title...">
                            </div>
                           
                            <div class="col-lg-3 col-md-6">
                                <label for="statusFilter" class="form-label">
                                    <i class="fas fa-circle text-muted me-2"></i>Status
                                </label>
                                <select class="form-select" id="statusFilter">
                                    <option value="">All Statuses</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="expired">Expired</option>
                                </select>
                            </div>
                            <div class="col-lg-3 col-md-6 d-flex align-items-end">
                                <div class="d-flex gap-2 w-100">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-filter"></i> Filter
                                    </button>
                                    <button type="button" id="downloadExcel" class="btn btn-success">
                                        <i class="fas fa-file-excel"></i> Excel
                                    </button>
                                    <button type="button" id="resetFilters" class="btn btn-outline-secondary btn-icon">
                                        <i class="fas fa-redo-alt"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Forms Cards Container -->
            <!-- Forms Cards Container -->
<div class="row g-3" id="formsContainer">
    <% if (forms && forms.length > 0) { %>
        <% forms.forEach(function(form) { %>
            <div class="col-xl-4 col-lg-6 col-md-6">
                <div class="card h-100 form-card" data-id="<%= form._id %>" data-start-date="<%= form.startDate %>">
                    <!-- Status Badge -->
                    <div class="card-status-badge <%= form.isActive ? 'active' : 'inactive' %> <%= new Date(form.endDate) < new Date() ? 'expired' : '' %>">
                        <% 
                            // Format date in Indian format (DD-MM-YYYY)
                            const currentDate = new Date();
                            const endDate = new Date(form.endDate);
                            const isExpired = endDate < currentDate;
                            
                            if (isExpired) { 
                        %>
                            <i class="fas fa-calendar-times"></i><span>Expired</span>
                        <% } else if (form.isActive) { %>
                            <i class="fas fa-check-circle"></i><span>Active</span>
                        <% } else { %>
                            <i class="fas fa-pause-circle"></i><span>Inactive</span>
                        <% } %>
                    </div>
                
                    <div class="card-body">
                        <h5 class="card-title">
                            <%= form.title %>
                        </h5>
                
                        <div class="form-meta">
                            <div class="meta-item">
                                <i class="fas fa-layer-group"></i>
                                <span>
                                    <%= form.sections ? form.sections.length : 1 %> Sections
                                </span>
                            </div>
                
                            <div class="meta-item">
                                <i class="fas fa-tag"></i>
                                <span>
                                    Type: <%= form.formType || 'Training' %>
                                </span>
                            </div>
                
                            <div class="meta-item">
                                <i class="fas fa-calendar-alt"></i>
                                <span>
                                    <% 
                                        const deadline = new Date(form.endDate);
                                        // Use Indian date format (DD-MM-YYYY)
                                        const deadlineFormatted = deadline.toLocaleDateString('en-IN', { 
                                            day: 'numeric', 
                                            month: 'short', 
                                            year: 'numeric' 
                                        }); 
                                    %>
                                    Deadline: <%= deadlineFormatted %>
                                </span>
                            </div>
                
                            <div class="meta-item">
                                <i class="fas fa-user"></i>
                                <span>
                                    Created by: <%= form.createdBy || 'Admin' %>
                                </span>
                            </div>
                        </div>
                
                        <!-- Faculty Assignments -->
                        <div class="assigned-faculty-list">
                            <h6><i class="fas fa-user-tie"></i>Assigned Faculty</h6>
                            <% if (form.facultyAssignments && form.facultyAssignments.length > 0) { %>
                                <div class="faculty-badges">
                                    <% form.facultyAssignments.slice(0, 3).forEach(function(faculty) { %>
                                        <span class="faculty-badge">
                                            <%= faculty.facultyName %>
                                        </span>
                                    <% }); %>
                                    <% if (form.facultyAssignments.length > 3) { %>
                                        <span class="badge additional">
                                            +<%= form.facultyAssignments.length - 3 %> more
                                        </span>
                                    <% } %>
                                </div>
                            <% } else { %>
                                <p class="text-muted small">No faculty assigned</p>
                            <% } %>
                        </div>
                
                        <!-- Class Assignments -->
                        <% if (form.classAssignments && form.classAssignments.length > 0) { %>
                            <div class="assigned-classes">
                                <h6><i class="fas fa-users"></i>Assigned Classes</h6>
                                <div class="class-badges">
                                    <% 
                                        let uniqueClasses = [];
                                        form.classAssignments.forEach(function(assignment) {
                                            if (assignment.classes) {
                                                assignment.classes.forEach(function(cls) { 
                                                    if (!uniqueClasses.includes(cls)) { 
                                                        uniqueClasses.push(cls); 
                                                    }
                                                }); 
                                            }
                                        }); 
                                        
                                        uniqueClasses.slice(0, 3).forEach(function(cls) { 
                                    %>
                                        <span class="class-badge">
                                            <%= cls %>
                                        </span>
                                    <% }); %>
                
                                    <% if (uniqueClasses.length > 3) { %>
                                        <span class="badge additional">
                                            +<%= uniqueClasses.length - 3 %> more
                                        </span>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                
                    <div class="card-footer">
                        <div class="d-flex justify-content-between">
                            <a href="/admin/forms/view/<%= form._id %>" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <div class="btn-group">
                                <a href="/admin/forms/<%= form._id %>/edit" class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-sm btn-outline-danger delete-form" data-id="<%= form._id %>" data-title="<%= form.title %>">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="col-12">
            <div class="empty-container">
                <i class="fas fa-clipboard-list"></i>
                <h4>No Forms Found</h4>
                <p class="text-muted">There are no forms available. Create your first form to get started.</p>
                <a href="/admin/adminHome" class="btn btn-primary mt-3">
                    <i class="fas fa-plus me-2"></i> Create New Form
                </a>
            </div>
        </div>
    <% } %>
</div>

 <!-- Toast container - add this to enable toast notifications -->
 <div class="toast-container"></div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteFormModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-4">
                    <i class="fas fa-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                </div>
                <p class="text-center">Are you sure you want to delete the form "<span id="deleteFormName"
                        class="fw-bold"></span>"?</p>
                <p class="text-danger text-center small">This action cannot be undone. All form data and
                    submissions will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash me-2"></i>Delete Form
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
            $(document).ready(function () {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Delete form modal
            $('.delete-form').click(function () {
                const formId = $(this).data('id');
                const formTitle = $(this).data('title');

                $('#deleteFormName').text(formTitle);
                $('#confirmDelete').data('id', formId);

                const deleteModal = new bootstrap.Modal(document.getElementById('deleteFormModal'));
                deleteModal.show();
            });

            // Handle delete confirmation
            $('#confirmDelete').click(function () {
                const formId = $(this).data('id');
                const loadingBtn = $(this);

                // Change button to loading state
                loadingBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...');
                loadingBtn.prop('disabled', true);

                $.ajax({
                    url: `/admin/forms/${formId}`,
                    method: 'DELETE',
                    success: function (response) {
                        if (response.success) {
                            // Show success toast
                            showToast('success', 'Success!', 'Form deleted successfully');

                            // Remove the form from the UI with animation
                            $(`[data-id="${formId}"]`).closest('.col-xl-4').fadeOut(function () {
                                $(this).remove();

                                // Check if there are any forms left
                                if ($('#formsContainer .col-xl-4').length === 0) {
                                    $('#formsContainer').html(`
                                    <div class="col-12">
                                        <div class="empty-container">
                                            <i class="fas fa-clipboard-list"></i>
                                            <h4>No Forms Found</h4>
                                            <p class="text-muted">There are no forms available. Create your first form to get started.</p>
                                            <a href="/admin/forms/create" class="btn btn-primary mt-3">
                                                <i class="fas fa-plus me-2"></i> Create New Form
                                            </a>
                                        </div>
                                    </div>
                                `);
                                }
                                
                                // Update the stats
                                updateStats();
                            });

                            // Hide the modal
                            const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteFormModal'));
                            deleteModal.hide();
                        } else {
                            showToast('error', 'Error', response.message);
                            // Reset button state
                            loadingBtn.html('<i class="fas fa-trash me-2"></i>Delete Form');
                            loadingBtn.prop('disabled', false);
                        }
                    },
                    error: function (xhr) {
                        showToast('error', 'Error', 'An error occurred while deleting the form');
                        console.error(xhr.responseText);
                        // Reset button state
                        loadingBtn.html('<i class="fas fa-trash me-2"></i>Delete Form');
                        loadingBtn.prop('disabled', false);
                    }
                });
            });

            // Filter functionality
            $('#filterForm').submit(function (e) {
                e.preventDefault();

                const searchTerm = $('#search').val().toLowerCase();
                const status = $('#statusFilter').val();

                $('.col-xl-4').each(function () {
                    const card = $(this);
                    const formTitle = card.find('.card-title').text().toLowerCase();
                    const formType = card.find('.meta-item:contains("Type")').text().toLowerCase();
                    const statusBadge = card.find('.card-status-badge');

                    let statusMatch = true;
                    if (status !== '') {
                        // Improved status filtering logic
                        if (status === 'active' && (!statusBadge.hasClass('active') || statusBadge.hasClass('expired'))) {
                            statusMatch = false;
                        } else if (status === 'inactive' && !statusBadge.hasClass('inactive')) {
                            statusMatch = false;
                        } else if (status === 'expired' && !statusBadge.hasClass('expired')) {
                            statusMatch = false;
                        }
                    }

                    const titleMatch = searchTerm === '' || formTitle.includes(searchTerm);

                    if (titleMatch && statusMatch) {
                        card.show();
                    } else {
                        card.hide();
                    }
                });
                
                // Check if any visible cards
                if ($('#formsContainer .col-xl-4:visible').length === 0) {
                    if (!$('#noResults').length) {
                        $('#formsContainer').append(`
                        <div id="noResults" class="col-12 mt-4">
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="fas fa-info-circle me-3" style="font-size: 1.5rem;"></i>
                                <div>
                                    <h5 class="mb-1">No matching forms found</h5>
                                    <p class="mb-0">Try adjusting your search filters or <button id="clearFilters" class="btn btn-link p-0">clear all filters</button>.</p>
                                </div>
                            </div>
                        </div>
                    `);

                        // Handle clear filters button inside the alert
                        $('#clearFilters').click(function () {
                            $('#resetFilters').click();
                        });
                    }
                } else {
                    $('#noResults').remove();
                }
            });

            // Reset filters
            $('#resetFilters').click(function () {
                $('#search').val('');
                $('#statusFilter').val('');

                // Show all cards
                $('.col-xl-4').show();
                $('#noResults').remove();
                
                // Show toast notification
                showToast('info', 'Filters Reset', 'All filters have been cleared');
            });

            // Real-time search
            $('#search').on('input', function () {
                $('#filterForm').submit();
            });

            // Status filter immediate application
            $('#statusFilter').change(function () {
                $('#filterForm').submit();
            });

            // Enable bulk selection mode
            $('#enableBulkSelect').click(function () {
                $('.bulk-actions').slideDown(200);
                $('.form-card').append('<div class="form-select-overlay"><input type="checkbox" class="form-checkbox"></div>');
                $(this).hide();
                $('#cancelBulkSelect').show();
                
                // Show toast notification
                showToast('info', 'Bulk Selection Mode', 'You can now select multiple forms for batch actions');
            });

            // Cancel bulk selection
            $('#cancelBulkSelect').click(function () {
                $('.bulk-actions').slideUp(200);
                $('.form-select-overlay').remove();
                $('#enableBulkSelect').show();
                $(this).hide();
                updateSelectedCount();
            });

            // Form selection
            $(document).on('change', '.form-checkbox', function () {
                updateSelectedCount();
            });

            // Update selected count
            function updateSelectedCount() {
                const count = $('.form-checkbox:checked').length;
                $('#selectedCount').text(count);
            }

            // Function to update page statistics
            function updateStats() {
                // Count active and inactive forms after the change
                const totalForms = $('#formsContainer .form-card').length;
                const activeCount = $('.card-status-badge.active').length;
                const inactiveCount = $('.card-status-badge.inactive').length + $('.card-status-badge.expired').length;
                
                // Update stats in the UI
                $('.stat-number').eq(0).text(totalForms);
                $('.stat-number').eq(1).text(activeCount);
                $('.stat-number').eq(2).text(inactiveCount);
            }

            // Handle bulk actions
            $('.bulk-action').click(function () {
                const action = $(this).data('action');
                const selectedForms = [];

                $('.form-checkbox:checked').each(function () {
                    selectedForms.push($(this).closest('.form-card').data('id'));
                });

                if (selectedForms.length === 0) {
                    showToast('warning', 'Warning', 'Please select at least one form');
                    return;
                }

                if (action === 'delete') {
                    // Custom confirm dialog for delete action
                    if (!confirm(`Are you sure you want to delete ${selectedForms.length} forms? This action cannot be undone.`)) {
                        return;
                    }
                }

                // Process bulk action via AJAX
                const loadingBtn = $(this);
                const originalHtml = loadingBtn.html();

                // Change button to loading state
                loadingBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                loadingBtn.prop('disabled', true);

                $.ajax({
                    url: `/admin/forms/bulk-action`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        action: action,
                        formIds: selectedForms
                    }),
                    success: function (response) {
                        if (response.success) {
                            if (action === 'delete') {
                                // Remove deleted forms
                                selectedForms.forEach(formId => {
                                    $(`[data-id="${formId}"]`).closest('.col-xl-4').fadeOut(function () {
                                        $(this).remove();
                                    });
                                });

                                showToast('success', 'Success', `${selectedForms.length} forms deleted successfully`);
                            } else {
                                // Update status for activated/deactivated forms
                                selectedForms.forEach(formId => {
                                    const card = $(`[data-id="${formId}"]`);
                                    const cardContainer = card.closest('.col-xl-4');
                                    const statusBadge = cardContainer.find('.card-status-badge');

                                    // Remove previous status classes
                                    statusBadge.removeClass('active inactive');
                                    
                                    // Update the data attribute that stores the form state
                                    if (action === 'activate') {
                                        statusBadge.addClass('active');
                                        statusBadge.html('<i class="fas fa-check-circle"></i><span>active</span>');
                                        // Update the data attribute on the card element
                                        card.attr('data-status', 'active');
                                    } else {
                                        statusBadge.addClass('inactive');
                                        statusBadge.html('<i class="fas fa-pause-circle"></i><span>Closed</span>');
                                        // Update the data attribute on the card element
                                        card.attr('data-status', 'closed');
                                    }
                                });
                                
                                showToast('success', 'Success', `${selectedForms.length} forms ${action}d successfully`);
                            }
                            
                            // Update stats after actions are completed
                            updateStats();

                            // Cancel bulk selection mode
                            $('#cancelBulkSelect').click();
                        } else {
                            showToast('error', 'Error', response.message);
                        }
                    },
                    error: function (xhr) {
                        showToast('error', 'Error', 'An error occurred while processing the bulk action');
                        console.error(xhr.responseText);
                    },
                    complete: function () {
                        // Reset button state
                        loadingBtn.html(originalHtml);
                        loadingBtn.prop('disabled', false);
                    }
                });
            });

            // Excel download functionality
            $('#downloadExcel').click(function() {
                // Show loading state
                const loadingBtn = $(this);
                const originalHtml = loadingBtn.html();
                loadingBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                loadingBtn.prop('disabled', true);
                
                // Get current filter values
                const searchTerm = $('#search').val().toLowerCase();
                const status = $('#statusFilter').val();
                
                // Create array to hold form data
                const formsData = [];
                
                // Determine which forms to include based on current filters
                $('.col-xl-4:visible').each(function() {
                    const card = $(this).find('.form-card');
                    const formId = card.data('id');
                    const title = card.find('.card-title').text().trim();
                    const formType = card.find('.meta-item:contains("Type")').text().replace('Type:', '').trim();
                    const deadline = card.find('.meta-item:contains("Deadline")').text().replace('Deadline:', '').trim();
                    const createdBy = card.find('.meta-item:contains("Created by")').text().replace('Created by:', '').trim();
                    
                    // Get status
                    let status = 'Inactive';
                    if (card.find('.card-status-badge').hasClass('active')) {
                        status = 'Active';
                    } else if (card.find('.card-status-badge').hasClass('expired')) {
                        status = 'Expired';
                    }
                    
                    // Get assigned faculty
                    const assignedFaculty = [];
                    card.find('.faculty-badge').each(function() {
                        assignedFaculty.push($(this).text().trim());
                    });
                    
                    // Get assigned classes
                    const assignedClasses = [];
                    card.find('.class-badge').each(function() {
                        assignedClasses.push($(this).text().trim());
                    });
                    
                    // Get number of sections
                    const sectionsText = card.find('.meta-item:contains("Sections")').text();
                    const sections = sectionsText ? parseInt(sectionsText.match(/\d+/)[0]) : 0;
                    
                    // Add to forms data array
                    formsData.push({
                        id: formId,
                        title: title,
                        type: formType,
                        status: status,
                        deadline: deadline,
                        createdBy: createdBy,
                        sections: sections,
                        faculty: assignedFaculty.join(', '),
                        classes: assignedClasses.join(', ')
                    });
                });
                
                // If no forms are visible after filtering, use all forms
                if (formsData.length === 0 && $('.col-xl-4').length > 0) {
                    // Show toast notification
                    showToast('info', 'Information', 'Downloading all forms as Excel file');
                    
                    // Process all forms
                    $('.col-xl-4').each(function() {
                        const card = $(this).find('.form-card');
                        const formId = card.data('id');
                        const title = card.find('.card-title').text().trim();
                        const formType = card.find('.meta-item:contains("Type")').text().replace('Type:', '').trim();
                        const deadline = card.find('.meta-item:contains("Deadline")').text().replace('Deadline:', '').trim();
                        const createdBy = card.find('.meta-item:contains("Created by")').text().replace('Created by:', '').trim();
                        
                        // Get status
                        let status = 'Inactive';
                        if (card.find('.card-status-badge').hasClass('active')) {
                            status = 'Active';
                        } else if (card.find('.card-status-badge').hasClass('expired')) {
                            status = 'Expired';
                        }
                        
                        // Get assigned faculty
                        const assignedFaculty = [];
                        card.find('.faculty-badge').each(function() {
                            assignedFaculty.push($(this).text().trim());
                        });
                        
                        // Get assigned classes
                        const assignedClasses = [];
                        card.find('.class-badge').each(function() {
                            assignedClasses.push($(this).text().trim());
                        });
                        
                        // Get number of sections
                        const sectionsText = card.find('.meta-item:contains("Sections")').text();
                        const sections = sectionsText ? parseInt(sectionsText.match(/\d+/)[0]) : 0;
                        
                        // Add to forms data array
                        formsData.push({
                            id: formId,
                            title: title,
                            type: formType,
                            status: status,
                            deadline: deadline,
                            createdBy: createdBy,
                            sections: sections,
                            faculty: assignedFaculty.join(', '),
                            classes: assignedClasses.join(', ')
                        });
                    });
                }
                
                // Send AJAX request to server to generate Excel file
                $.ajax({
                    url: '/admin/forms/export-excel',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        forms: formsData,
                        filters: {
                            search: searchTerm,
                            status: status
                        }
                    }),
                    success: function(response) {
                        // Reset button state immediately
                        loadingBtn.html(originalHtml);
                        loadingBtn.prop('disabled', false);
                        
                        if (response.success) {
                            // Create a temporary link and trigger download
                            const downloadLink = document.createElement('a');
                            downloadLink.href = response.fileUrl;
                            downloadLink.download = response.fileName || 'forms-data.xlsx';
                            document.body.appendChild(downloadLink);
                            downloadLink.click();
                            document.body.removeChild(downloadLink);
                            
                            // Show success toast after download starts
                            showToast('success', 'Success', 'Excel file downloaded successfully');
                        } else {
                            showToast('error', 'Error', response.message || 'Failed to generate Excel file');
                        }
                    },
                    error: function(xhr) {
                        // Reset button state
                        loadingBtn.html(originalHtml);
                        loadingBtn.prop('disabled', false);
                        
                        showToast('error', 'Error', 'An error occurred while generating the Excel file');
                        console.error(xhr.responseText);
                    },
                    complete: function() {
                        // Ensure button state is reset even if there's an issue in the success or error handlers
                        setTimeout(function() {
                            if (loadingBtn.prop('disabled')) {
                                loadingBtn.html(originalHtml);
                                loadingBtn.prop('disabled', false);
                            }
                        }, 500);
                    }
                });
            });

            // IMPROVED TOAST NOTIFICATION SYSTEM
            function showToast(type, title, message) {
                // Generate a unique ID for this toast
                const toastId = 'toast-' + Date.now();
                
                // Determine background class based on type
                let bgClass = '';
                let iconClass = '';
                
                switch(type) {
                    case 'success':
                        bgClass = 'bg-success';
                        iconClass = 'fas fa-check-circle';
                        break;
                    case 'error':
                        bgClass = 'bg-danger';
                        iconClass = 'fas fa-exclamation-circle';
                        break;
                    case 'warning':
                        bgClass = 'bg-warning';
                        iconClass = 'fas fa-exclamation-triangle';
                        break;
                    case 'info':
                    default:
                        bgClass = 'bg-info';
                        iconClass = 'fas fa-info-circle';
                        break;
                }
                
                // Create the toast HTML
                const toastHtml = `
                <div id="${toastId}" class="toast ${bgClass} show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <i class="${iconClass} me-2"></i>
                        <strong class="me-auto">${title}</strong>
                        <small>just now</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
                `;
                
                // Create toast container if it doesn't exist
                if ($('.toast-container').length === 0) {
                    $('body').append('<div class="toast-container"></div>');
                }
                
                // Add toast to container
                $('.toast-container').append(toastHtml);
                
                // Initialize toast with Bootstrap
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement, {
                    animation: true,
                    autohide: true,
                    delay: 5000
                });
                
                // Show the toast
                toast.show();
                
                // Remove toast from DOM after it's hidden
                $(toastElement).on('hidden.bs.toast', function() {
                    $(this).remove();
                });
                
                // Add click event to close button
                $(toastElement).find('.btn-close').on('click', function() {
                    toast.hide();
                });
                
                // Also set a timer to remove it after 5 seconds as a fallback
                setTimeout(() => {
                    if (document.getElementById(toastId)) {
                        $(toastElement).remove();
                    }
                }, 5000);
            }
            
            // Test toast notification on page load
            // setTimeout(() => {
            //     showToast('info', 'Welcome', 'Welcome to Forms Management dashboard');
            // }, 1000);
        });

</script>
</body>
</html>